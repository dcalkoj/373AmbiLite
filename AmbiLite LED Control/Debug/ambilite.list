
ambilite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000691c  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b4c  08006b4c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006b4c  08006b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b54  08006b54  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b58  08006b58  00016b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000010  08006b6c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08006b6c  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150f7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255c  00000000  00000000  00035137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00037698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  00038880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aacd  00000000  00000000  00039990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015302  00000000  00000000  0006445d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a372  00000000  00000000  0007975f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00183ad1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d90  00000000  00000000  00183b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006ac4 	.word	0x08006ac4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	08006ac4 	.word	0x08006ac4

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <__aeabi_uldivmod>:
 8000a3c:	b953      	cbnz	r3, 8000a54 <__aeabi_uldivmod+0x18>
 8000a3e:	b94a      	cbnz	r2, 8000a54 <__aeabi_uldivmod+0x18>
 8000a40:	2900      	cmp	r1, #0
 8000a42:	bf08      	it	eq
 8000a44:	2800      	cmpeq	r0, #0
 8000a46:	bf1c      	itt	ne
 8000a48:	f04f 31ff 	movne.w	r1, #4294967295
 8000a4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a50:	f000 b974 	b.w	8000d3c <__aeabi_idiv0>
 8000a54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a5c:	f000 f806 	bl	8000a6c <__udivmoddi4>
 8000a60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a68:	b004      	add	sp, #16
 8000a6a:	4770      	bx	lr

08000a6c <__udivmoddi4>:
 8000a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a70:	9d08      	ldr	r5, [sp, #32]
 8000a72:	4604      	mov	r4, r0
 8000a74:	468e      	mov	lr, r1
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d14d      	bne.n	8000b16 <__udivmoddi4+0xaa>
 8000a7a:	428a      	cmp	r2, r1
 8000a7c:	4694      	mov	ip, r2
 8000a7e:	d969      	bls.n	8000b54 <__udivmoddi4+0xe8>
 8000a80:	fab2 f282 	clz	r2, r2
 8000a84:	b152      	cbz	r2, 8000a9c <__udivmoddi4+0x30>
 8000a86:	fa01 f302 	lsl.w	r3, r1, r2
 8000a8a:	f1c2 0120 	rsb	r1, r2, #32
 8000a8e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a92:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a96:	ea41 0e03 	orr.w	lr, r1, r3
 8000a9a:	4094      	lsls	r4, r2
 8000a9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000aa0:	0c21      	lsrs	r1, r4, #16
 8000aa2:	fbbe f6f8 	udiv	r6, lr, r8
 8000aa6:	fa1f f78c 	uxth.w	r7, ip
 8000aaa:	fb08 e316 	mls	r3, r8, r6, lr
 8000aae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ab2:	fb06 f107 	mul.w	r1, r6, r7
 8000ab6:	4299      	cmp	r1, r3
 8000ab8:	d90a      	bls.n	8000ad0 <__udivmoddi4+0x64>
 8000aba:	eb1c 0303 	adds.w	r3, ip, r3
 8000abe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ac2:	f080 811f 	bcs.w	8000d04 <__udivmoddi4+0x298>
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	f240 811c 	bls.w	8000d04 <__udivmoddi4+0x298>
 8000acc:	3e02      	subs	r6, #2
 8000ace:	4463      	add	r3, ip
 8000ad0:	1a5b      	subs	r3, r3, r1
 8000ad2:	b2a4      	uxth	r4, r4
 8000ad4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad8:	fb08 3310 	mls	r3, r8, r0, r3
 8000adc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae0:	fb00 f707 	mul.w	r7, r0, r7
 8000ae4:	42a7      	cmp	r7, r4
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x92>
 8000ae8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af0:	f080 810a 	bcs.w	8000d08 <__udivmoddi4+0x29c>
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	f240 8107 	bls.w	8000d08 <__udivmoddi4+0x29c>
 8000afa:	4464      	add	r4, ip
 8000afc:	3802      	subs	r0, #2
 8000afe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b02:	1be4      	subs	r4, r4, r7
 8000b04:	2600      	movs	r6, #0
 8000b06:	b11d      	cbz	r5, 8000b10 <__udivmoddi4+0xa4>
 8000b08:	40d4      	lsrs	r4, r2
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b10:	4631      	mov	r1, r6
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d909      	bls.n	8000b2e <__udivmoddi4+0xc2>
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	f000 80ef 	beq.w	8000cfe <__udivmoddi4+0x292>
 8000b20:	2600      	movs	r6, #0
 8000b22:	e9c5 0100 	strd	r0, r1, [r5]
 8000b26:	4630      	mov	r0, r6
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	fab3 f683 	clz	r6, r3
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d14a      	bne.n	8000bcc <__udivmoddi4+0x160>
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d302      	bcc.n	8000b40 <__udivmoddi4+0xd4>
 8000b3a:	4282      	cmp	r2, r0
 8000b3c:	f200 80f9 	bhi.w	8000d32 <__udivmoddi4+0x2c6>
 8000b40:	1a84      	subs	r4, r0, r2
 8000b42:	eb61 0303 	sbc.w	r3, r1, r3
 8000b46:	2001      	movs	r0, #1
 8000b48:	469e      	mov	lr, r3
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d0e0      	beq.n	8000b10 <__udivmoddi4+0xa4>
 8000b4e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b52:	e7dd      	b.n	8000b10 <__udivmoddi4+0xa4>
 8000b54:	b902      	cbnz	r2, 8000b58 <__udivmoddi4+0xec>
 8000b56:	deff      	udf	#255	; 0xff
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	2a00      	cmp	r2, #0
 8000b5e:	f040 8092 	bne.w	8000c86 <__udivmoddi4+0x21a>
 8000b62:	eba1 010c 	sub.w	r1, r1, ip
 8000b66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6a:	fa1f fe8c 	uxth.w	lr, ip
 8000b6e:	2601      	movs	r6, #1
 8000b70:	0c20      	lsrs	r0, r4, #16
 8000b72:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b76:	fb07 1113 	mls	r1, r7, r3, r1
 8000b7a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b7e:	fb0e f003 	mul.w	r0, lr, r3
 8000b82:	4288      	cmp	r0, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x12c>
 8000b86:	eb1c 0101 	adds.w	r1, ip, r1
 8000b8a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x12a>
 8000b90:	4288      	cmp	r0, r1
 8000b92:	f200 80cb 	bhi.w	8000d2c <__udivmoddi4+0x2c0>
 8000b96:	4643      	mov	r3, r8
 8000b98:	1a09      	subs	r1, r1, r0
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ba8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bac:	45a6      	cmp	lr, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x156>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bb8:	d202      	bcs.n	8000bc0 <__udivmoddi4+0x154>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	f200 80bb 	bhi.w	8000d36 <__udivmoddi4+0x2ca>
 8000bc0:	4608      	mov	r0, r1
 8000bc2:	eba4 040e 	sub.w	r4, r4, lr
 8000bc6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bca:	e79c      	b.n	8000b06 <__udivmoddi4+0x9a>
 8000bcc:	f1c6 0720 	rsb	r7, r6, #32
 8000bd0:	40b3      	lsls	r3, r6
 8000bd2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bd6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bda:	fa20 f407 	lsr.w	r4, r0, r7
 8000bde:	fa01 f306 	lsl.w	r3, r1, r6
 8000be2:	431c      	orrs	r4, r3
 8000be4:	40f9      	lsrs	r1, r7
 8000be6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bea:	fa00 f306 	lsl.w	r3, r0, r6
 8000bee:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bf2:	0c20      	lsrs	r0, r4, #16
 8000bf4:	fa1f fe8c 	uxth.w	lr, ip
 8000bf8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bfc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c00:	fb08 f00e 	mul.w	r0, r8, lr
 8000c04:	4288      	cmp	r0, r1
 8000c06:	fa02 f206 	lsl.w	r2, r2, r6
 8000c0a:	d90b      	bls.n	8000c24 <__udivmoddi4+0x1b8>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c14:	f080 8088 	bcs.w	8000d28 <__udivmoddi4+0x2bc>
 8000c18:	4288      	cmp	r0, r1
 8000c1a:	f240 8085 	bls.w	8000d28 <__udivmoddi4+0x2bc>
 8000c1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c22:	4461      	add	r1, ip
 8000c24:	1a09      	subs	r1, r1, r0
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c2c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c30:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c38:	458e      	cmp	lr, r1
 8000c3a:	d908      	bls.n	8000c4e <__udivmoddi4+0x1e2>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c44:	d26c      	bcs.n	8000d20 <__udivmoddi4+0x2b4>
 8000c46:	458e      	cmp	lr, r1
 8000c48:	d96a      	bls.n	8000d20 <__udivmoddi4+0x2b4>
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	4461      	add	r1, ip
 8000c4e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c52:	fba0 9402 	umull	r9, r4, r0, r2
 8000c56:	eba1 010e 	sub.w	r1, r1, lr
 8000c5a:	42a1      	cmp	r1, r4
 8000c5c:	46c8      	mov	r8, r9
 8000c5e:	46a6      	mov	lr, r4
 8000c60:	d356      	bcc.n	8000d10 <__udivmoddi4+0x2a4>
 8000c62:	d053      	beq.n	8000d0c <__udivmoddi4+0x2a0>
 8000c64:	b15d      	cbz	r5, 8000c7e <__udivmoddi4+0x212>
 8000c66:	ebb3 0208 	subs.w	r2, r3, r8
 8000c6a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c6e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c72:	fa22 f306 	lsr.w	r3, r2, r6
 8000c76:	40f1      	lsrs	r1, r6
 8000c78:	431f      	orrs	r7, r3
 8000c7a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c7e:	2600      	movs	r6, #0
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	f1c2 0320 	rsb	r3, r2, #32
 8000c8a:	40d8      	lsrs	r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	fa21 f303 	lsr.w	r3, r1, r3
 8000c94:	4091      	lsls	r1, r2
 8000c96:	4301      	orrs	r1, r0
 8000c98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ca0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ca4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ca8:	0c0b      	lsrs	r3, r1, #16
 8000caa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cae:	fb00 f60e 	mul.w	r6, r0, lr
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x260>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cc2:	d22f      	bcs.n	8000d24 <__udivmoddi4+0x2b8>
 8000cc4:	429e      	cmp	r6, r3
 8000cc6:	d92d      	bls.n	8000d24 <__udivmoddi4+0x2b8>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	b289      	uxth	r1, r1
 8000cd0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cd4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cdc:	fb06 f30e 	mul.w	r3, r6, lr
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x28a>
 8000ce4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cec:	d216      	bcs.n	8000d1c <__udivmoddi4+0x2b0>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d914      	bls.n	8000d1c <__udivmoddi4+0x2b0>
 8000cf2:	3e02      	subs	r6, #2
 8000cf4:	4461      	add	r1, ip
 8000cf6:	1ac9      	subs	r1, r1, r3
 8000cf8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cfc:	e738      	b.n	8000b70 <__udivmoddi4+0x104>
 8000cfe:	462e      	mov	r6, r5
 8000d00:	4628      	mov	r0, r5
 8000d02:	e705      	b.n	8000b10 <__udivmoddi4+0xa4>
 8000d04:	4606      	mov	r6, r0
 8000d06:	e6e3      	b.n	8000ad0 <__udivmoddi4+0x64>
 8000d08:	4618      	mov	r0, r3
 8000d0a:	e6f8      	b.n	8000afe <__udivmoddi4+0x92>
 8000d0c:	454b      	cmp	r3, r9
 8000d0e:	d2a9      	bcs.n	8000c64 <__udivmoddi4+0x1f8>
 8000d10:	ebb9 0802 	subs.w	r8, r9, r2
 8000d14:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d18:	3801      	subs	r0, #1
 8000d1a:	e7a3      	b.n	8000c64 <__udivmoddi4+0x1f8>
 8000d1c:	4646      	mov	r6, r8
 8000d1e:	e7ea      	b.n	8000cf6 <__udivmoddi4+0x28a>
 8000d20:	4620      	mov	r0, r4
 8000d22:	e794      	b.n	8000c4e <__udivmoddi4+0x1e2>
 8000d24:	4640      	mov	r0, r8
 8000d26:	e7d1      	b.n	8000ccc <__udivmoddi4+0x260>
 8000d28:	46d0      	mov	r8, sl
 8000d2a:	e77b      	b.n	8000c24 <__udivmoddi4+0x1b8>
 8000d2c:	3b02      	subs	r3, #2
 8000d2e:	4461      	add	r1, ip
 8000d30:	e732      	b.n	8000b98 <__udivmoddi4+0x12c>
 8000d32:	4630      	mov	r0, r6
 8000d34:	e709      	b.n	8000b4a <__udivmoddi4+0xde>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	e742      	b.n	8000bc2 <__udivmoddi4+0x156>

08000d3c <__aeabi_idiv0>:
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t flag=0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	flag=1;
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <HAL_UART_RxCpltCallback+0x1c>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000204 	.word	0x20000204

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	f5ad 7d6c 	sub.w	sp, sp, #944	; 0x3b0
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d68:	f001 f9ed 	bl	8002146 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6c:	f000 fc3c 	bl	80015e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d70:	f000 fd8e 	bl	8001890 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d74:	f000 fd62 	bl	800183c <MX_DMA_Init>
  MX_SPI1_Init();
 8000d78:	f000 fc88 	bl	800168c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000d7c:	f000 fd12 	bl	80017a4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000d80:	f000 fcc2 	bl	8001708 <MX_TIM2_Init>

	//LED Strip Setup
	volatile uint8_t data[400];

	Frame frame;
	frame.startFrame = 0;
 8000d84:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000d88:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
	frame.endFrame = 0xFFFFFFFF;
 8000d90:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000d94:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	for (int i =0; i<NUMLED;++i){
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8000da6:	e03a      	b.n	8000e1e <main+0xbe>
		frame.ledarray[i].b = 0;
 8000da8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000dac:	f5a3 7266 	sub.w	r2, r3, #920	; 0x398
 8000db0:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	715a      	strb	r2, [r3, #5]
		frame.ledarray[i].g = 0;
 8000dbc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000dc0:	f5a3 7266 	sub.w	r2, r3, #920	; 0x398
 8000dc4:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	2200      	movs	r2, #0
 8000dce:	719a      	strb	r2, [r3, #6]
		frame.ledarray[i].r = 0;
 8000dd0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000dd4:	f5a3 7266 	sub.w	r2, r3, #920	; 0x398
 8000dd8:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	2200      	movs	r2, #0
 8000de2:	71da      	strb	r2, [r3, #7]

		frame.ledarray[i].staticstart = 0b111;
 8000de4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000de8:	f5a3 7266 	sub.w	r2, r3, #920	; 0x398
 8000dec:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	791a      	ldrb	r2, [r3, #4]
 8000df6:	f042 0207 	orr.w	r2, r2, #7
 8000dfa:	711a      	strb	r2, [r3, #4]
		frame.ledarray[i].globbright = 0b11111;
 8000dfc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000e00:	f5a3 7266 	sub.w	r2, r3, #920	; 0x398
 8000e04:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	791a      	ldrb	r2, [r3, #4]
 8000e0e:	f042 02f8 	orr.w	r2, r2, #248	; 0xf8
 8000e12:	711a      	strb	r2, [r3, #4]
	for (int i =0; i<NUMLED;++i){
 8000e14:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8000e1e:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8000e22:	2b73      	cmp	r3, #115	; 0x73
 8000e24:	ddc0      	ble.n	8000da8 <main+0x48>
	}
	HAL_SPI_Transmit(&hspi1, &frame, sizeof(Frame), 10000);
 8000e26:	f107 0118 	add.w	r1, r7, #24
 8000e2a:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e2e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8000e32:	48d9      	ldr	r0, [pc, #868]	; (8001198 <main+0x438>)
 8000e34:	f003 fd35 	bl	80048a2 <HAL_SPI_Transmit>

	enum piOpCode op = send;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f887 33ab 	strb.w	r3, [r7, #939]	; 0x3ab

	//Mode select
	//enum Mode mode = piCam;
	//enum Wanted nextNeeded = Top;
	enum Color currentColor = Green;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	f887 3397 	strb.w	r3, [r7, #919]	; 0x397
	int increment = 15;
 8000e44:	230f      	movs	r3, #15
 8000e46:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390

	//Color Profiling Mode Config
	int8_t modg = 4;
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	f887 33aa 	strb.w	r3, [r7, #938]	; 0x3aa
	int8_t modr = 5;
 8000e50:	2305      	movs	r3, #5
 8000e52:	f887 33a9 	strb.w	r3, [r7, #937]	; 0x3a9
	int8_t modb = 3;
 8000e56:	2303      	movs	r3, #3
 8000e58:	f887 33a8 	strb.w	r3, [r7, #936]	; 0x3a8
	uint8_t green = 190;
 8000e5c:	23be      	movs	r3, #190	; 0xbe
 8000e5e:	f887 33a7 	strb.w	r3, [r7, #935]	; 0x3a7
	uint8_t red = 6;
 8000e62:	2306      	movs	r3, #6
 8000e64:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
	uint8_t blue = 40;
 8000e68:	2328      	movs	r3, #40	; 0x28
 8000e6a:	f887 33a5 	strb.w	r3, [r7, #933]	; 0x3a5
	uint16_t delay = 50;
 8000e6e:	2332      	movs	r3, #50	; 0x32
 8000e70:	f8a7 338e 	strh.w	r3, [r7, #910]	; 0x38e


	while (1)
	{

		if (mode == piCam){
 8000e74:	4bc9      	ldr	r3, [pc, #804]	; (800119c <main+0x43c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f040 82dc 	bne.w	8001436 <main+0x6d6>
			//Wait for start frame 1001
			uint8_t buf[1];
			uint8_t bufR[1];
			bufR[0] = 0;
 8000e7e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000e82:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
			buf[0] = op;
 8000e8a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000e8e:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8000e92:	f897 23ab 	ldrb.w	r2, [r7, #939]	; 0x3ab
 8000e96:	701a      	strb	r2, [r3, #0]
			uint8_t stop = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 33a4 	strb.w	r3, [r7, #932]	; 0x3a4
			do{ //handshake
				HAL_UART_Abort(&huart3);
 8000e9e:	48c0      	ldr	r0, [pc, #768]	; (80011a0 <main+0x440>)
 8000ea0:	f004 fcc0 	bl	8005824 <HAL_UART_Abort>
				HAL_DMA_Abort(&hdma_usart3_rx);
 8000ea4:	48bf      	ldr	r0, [pc, #764]	; (80011a4 <main+0x444>)
 8000ea6:	f001 fc1c 	bl	80026e2 <HAL_DMA_Abort>
				HAL_UART_Transmit(&huart3, buf, 1, 100);
 8000eaa:	f107 0114 	add.w	r1, r7, #20
 8000eae:	2364      	movs	r3, #100	; 0x64
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	48bb      	ldr	r0, [pc, #748]	; (80011a0 <main+0x440>)
 8000eb4:	f004 faf4 	bl	80054a0 <HAL_UART_Transmit>
				HAL_UART_Receive(&huart3, bufR, 1, 1000);
 8000eb8:	f107 0110 	add.w	r1, r7, #16
 8000ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	48b7      	ldr	r0, [pc, #732]	; (80011a0 <main+0x440>)
 8000ec4:	f004 fb83 	bl	80055ce <HAL_UART_Receive>

				if(mode!=piCam){
 8000ec8:	4bb4      	ldr	r3, [pc, #720]	; (800119c <main+0x43c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <main+0x178>
					stop=1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	f887 33a4 	strb.w	r3, [r7, #932]	; 0x3a4
					break;
 8000ed6:	e006      	b.n	8000ee6 <main+0x186>
				}

			}while(bufR[0] != 101);
 8000ed8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8000edc:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b65      	cmp	r3, #101	; 0x65
 8000ee4:	d1db      	bne.n	8000e9e <main+0x13e>

			if(stop){
 8000ee6:	f897 33a4 	ldrb.w	r3, [r7, #932]	; 0x3a4
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <main+0x196>
				stop=0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f887 33a4 	strb.w	r3, [r7, #932]	; 0x3a4
 8000ef4:	e7be      	b.n	8000e74 <main+0x114>
				continue;
			}

			HAL_UART_Abort(&huart3);
 8000ef6:	48aa      	ldr	r0, [pc, #680]	; (80011a0 <main+0x440>)
 8000ef8:	f004 fc94 	bl	8005824 <HAL_UART_Abort>
			HAL_DMA_Abort(&hdma_usart3_rx);
 8000efc:	48a9      	ldr	r0, [pc, #676]	; (80011a4 <main+0x444>)
 8000efe:	f001 fbf0 	bl	80026e2 <HAL_DMA_Abort>
			HAL_UART_Receive_DMA(&huart3, data, NUMLED2);
 8000f02:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8000f06:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	48a4      	ldr	r0, [pc, #656]	; (80011a0 <main+0x440>)
 8000f0e:	f004 fc33 	bl	8005778 <HAL_UART_Receive_DMA>


			uint8_t bool=0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f887 338d 	strb.w	r3, [r7, #909]	; 0x38d

			while(flag==0){
 8000f18:	bf00      	nop
 8000f1a:	4ba3      	ldr	r3, [pc, #652]	; (80011a8 <main+0x448>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0fb      	beq.n	8000f1a <main+0x1ba>
				bool;
			}

			for(int i = 0; i < NUMLED; i++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 8000f28:	e270      	b.n	800140c <main+0x6ac>
			{
				float brightness = max(max(data[3*i], data[3*i+1]), data[3*i+2])/255.0;
 8000f2a:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8000f38:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8000f3c:	5cd3      	ldrb	r3, [r2, r3]
 8000f3e:	b2d9      	uxtb	r1, r3
 8000f40:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8000f44:	4613      	mov	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	4413      	add	r3, r2
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8000f50:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8000f54:	5cd3      	ldrb	r3, [r2, r3]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4299      	cmp	r1, r3
 8000f5a:	d90c      	bls.n	8000f76 <main+0x216>
 8000f5c:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8000f6a:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8000f6e:	5cd3      	ldrb	r3, [r2, r3]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4619      	mov	r1, r3
 8000f74:	e00c      	b.n	8000f90 <main+0x230>
 8000f76:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	4413      	add	r3, r2
 8000f80:	3301      	adds	r3, #1
 8000f82:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8000f86:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8000f8a:	5cd3      	ldrb	r3, [r2, r3]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8000f94:	4613      	mov	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4413      	add	r3, r2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8000fa0:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8000fa4:	5cd3      	ldrb	r3, [r2, r3]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	dd37      	ble.n	800101c <main+0x2bc>
 8000fac:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8000fba:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8000fbe:	5cd3      	ldrb	r3, [r2, r3]
 8000fc0:	b2d9      	uxtb	r1, r3
 8000fc2:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	3301      	adds	r3, #1
 8000fce:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8000fd2:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8000fd6:	5cd3      	ldrb	r3, [r2, r3]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	d90e      	bls.n	8000ffc <main+0x29c>
 8000fde:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8000fec:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8000ff0:	5cd3      	ldrb	r3, [r2, r3]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fa55 	bl	80004a4 <__aeabi_i2d>
 8000ffa:	e01e      	b.n	800103a <main+0x2da>
 8000ffc:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	3301      	adds	r3, #1
 8001008:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800100c:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8001010:	5cd3      	ldrb	r3, [r2, r3]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fa45 	bl	80004a4 <__aeabi_i2d>
 800101a:	e00e      	b.n	800103a <main+0x2da>
 800101c:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	3302      	adds	r3, #2
 8001028:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800102c:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8001030:	5cd3      	ldrb	r3, [r2, r3]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa35 	bl	80004a4 <__aeabi_i2d>
 800103a:	a355      	add	r3, pc, #340	; (adr r3, 8001190 <main+0x430>)
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	f7ff fbc4 	bl	80007cc <__aeabi_ddiv>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4610      	mov	r0, r2
 800104a:	4619      	mov	r1, r3
 800104c:	f7ff fca6 	bl	800099c <__aeabi_d2f>
 8001050:	4603      	mov	r3, r0
 8001052:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
				float thresh= 0.0;
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384

				uint8_t ledbrite = 0 + ((31 - 0) / (255 - 0)) * (brightness - 0);
 800105e:	edd7 7ae2 	vldr	s15, [r7, #904]	; 0x388
 8001062:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80011ac <main+0x44c>
 8001066:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80011ac <main+0x44c>
 800106e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001076:	edc7 7a01 	vstr	s15, [r7, #4]
 800107a:	793b      	ldrb	r3, [r7, #4]
 800107c:	f887 3383 	strb.w	r3, [r7, #899]	; 0x383

				if(i < 37)
 8001080:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001084:	2b24      	cmp	r3, #36	; 0x24
 8001086:	dc68      	bgt.n	800115a <main+0x3fa>
				{

					frame.ledarray[37 -i - 1].b =  brightness > thresh ? data[3*i+0]: 0 ;
 8001088:	ed97 7ae2 	vldr	s14, [r7, #904]	; 0x388
 800108c:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	dd0b      	ble.n	80010b2 <main+0x352>
 800109a:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 80010a8:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 80010ac:	5cd3      	ldrb	r3, [r2, r3]
 80010ae:	b2d9      	uxtb	r1, r3
 80010b0:	e000      	b.n	80010b4 <main+0x354>
 80010b2:	2100      	movs	r1, #0
 80010b4:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80010b8:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 80010bc:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 80010c0:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	460a      	mov	r2, r1
 80010ca:	715a      	strb	r2, [r3, #5]
					frame.ledarray[37 -i - 1].g =  brightness > thresh ? data[3*i+1]: 0 ;
 80010cc:	ed97 7ae2 	vldr	s14, [r7, #904]	; 0x388
 80010d0:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 80010d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	dd0c      	ble.n	80010f8 <main+0x398>
 80010de:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	3301      	adds	r3, #1
 80010ea:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 80010ee:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 80010f2:	5cd3      	ldrb	r3, [r2, r3]
 80010f4:	b2d9      	uxtb	r1, r3
 80010f6:	e000      	b.n	80010fa <main+0x39a>
 80010f8:	2100      	movs	r1, #0
 80010fa:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80010fe:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8001102:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8001106:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	460a      	mov	r2, r1
 8001110:	719a      	strb	r2, [r3, #6]
					frame.ledarray[37 -i - 1].r =  brightness > thresh ? data[3*i+2]: 0 ;
 8001112:	ed97 7ae2 	vldr	s14, [r7, #904]	; 0x388
 8001116:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 800111a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800111e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001122:	dd0c      	ble.n	800113e <main+0x3de>
 8001124:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	3302      	adds	r3, #2
 8001130:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8001134:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8001138:	5cd3      	ldrb	r3, [r2, r3]
 800113a:	b2d9      	uxtb	r1, r3
 800113c:	e000      	b.n	8001140 <main+0x3e0>
 800113e:	2100      	movs	r1, #0
 8001140:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001144:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8001148:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800114c:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	460a      	mov	r2, r1
 8001156:	71da      	strb	r2, [r3, #7]
 8001158:	e153      	b.n	8001402 <main+0x6a2>

				}
				else if(i < 58)
 800115a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800115e:	2b39      	cmp	r3, #57	; 0x39
 8001160:	dc7a      	bgt.n	8001258 <main+0x4f8>
				{
					frame.ledarray[NUMLED -i + 36].b =  brightness > thresh ? data[3*i+0]: 0 ;
 8001162:	ed97 7ae2 	vldr	s14, [r7, #904]	; 0x388
 8001166:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 800116a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800116e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001172:	dd1d      	ble.n	80011b0 <main+0x450>
 8001174:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8001182:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8001186:	5cd3      	ldrb	r3, [r2, r3]
 8001188:	b2d9      	uxtb	r1, r3
 800118a:	e012      	b.n	80011b2 <main+0x452>
 800118c:	f3af 8000 	nop.w
 8001190:	00000000 	.word	0x00000000
 8001194:	406fe000 	.word	0x406fe000
 8001198:	2000002c 	.word	0x2000002c
 800119c:	20000000 	.word	0x20000000
 80011a0:	200000dc 	.word	0x200000dc
 80011a4:	2000016c 	.word	0x2000016c
 80011a8:	20000204 	.word	0x20000204
 80011ac:	00000000 	.word	0x00000000
 80011b0:	2100      	movs	r1, #0
 80011b2:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80011b6:	f1c3 0398 	rsb	r3, r3, #152	; 0x98
 80011ba:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 80011be:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	460a      	mov	r2, r1
 80011c8:	715a      	strb	r2, [r3, #5]
					frame.ledarray[NUMLED -i + 36].g =  brightness > thresh ? data[3*i+1]: 0 ;
 80011ca:	ed97 7ae2 	vldr	s14, [r7, #904]	; 0x388
 80011ce:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 80011d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	dd0c      	ble.n	80011f6 <main+0x496>
 80011dc:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	3301      	adds	r3, #1
 80011e8:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 80011ec:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 80011f0:	5cd3      	ldrb	r3, [r2, r3]
 80011f2:	b2d9      	uxtb	r1, r3
 80011f4:	e000      	b.n	80011f8 <main+0x498>
 80011f6:	2100      	movs	r1, #0
 80011f8:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80011fc:	f1c3 0398 	rsb	r3, r3, #152	; 0x98
 8001200:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8001204:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	460a      	mov	r2, r1
 800120e:	719a      	strb	r2, [r3, #6]
					frame.ledarray[NUMLED -i + 36].r = brightness > thresh ? data[3*i+2]: 0 ;
 8001210:	ed97 7ae2 	vldr	s14, [r7, #904]	; 0x388
 8001214:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001220:	dd0c      	ble.n	800123c <main+0x4dc>
 8001222:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	3302      	adds	r3, #2
 800122e:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8001232:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8001236:	5cd3      	ldrb	r3, [r2, r3]
 8001238:	b2d9      	uxtb	r1, r3
 800123a:	e000      	b.n	800123e <main+0x4de>
 800123c:	2100      	movs	r1, #0
 800123e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001242:	f1c3 0398 	rsb	r3, r3, #152	; 0x98
 8001246:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800124a:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	460a      	mov	r2, r1
 8001254:	71da      	strb	r2, [r3, #7]
 8001256:	e0d4      	b.n	8001402 <main+0x6a2>

				}
				else if(i < 95)
 8001258:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800125c:	2b5e      	cmp	r3, #94	; 0x5e
 800125e:	dc68      	bgt.n	8001332 <main+0x5d2>
				{
					frame.ledarray[NUMLED - 22 - i + 58].b =  brightness > thresh ? data[3*i+0]: 0 ;
 8001260:	ed97 7ae2 	vldr	s14, [r7, #904]	; 0x388
 8001264:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001270:	dd0b      	ble.n	800128a <main+0x52a>
 8001272:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8001280:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8001284:	5cd3      	ldrb	r3, [r2, r3]
 8001286:	b2d9      	uxtb	r1, r3
 8001288:	e000      	b.n	800128c <main+0x52c>
 800128a:	2100      	movs	r1, #0
 800128c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001290:	f1c3 0398 	rsb	r3, r3, #152	; 0x98
 8001294:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8001298:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	460a      	mov	r2, r1
 80012a2:	715a      	strb	r2, [r3, #5]
					frame.ledarray[NUMLED - 22 - i + 58].g =  brightness > thresh ?data[3*i+1]: 0 ;
 80012a4:	ed97 7ae2 	vldr	s14, [r7, #904]	; 0x388
 80012a8:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 80012ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b4:	dd0c      	ble.n	80012d0 <main+0x570>
 80012b6:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	3301      	adds	r3, #1
 80012c2:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 80012c6:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 80012ca:	5cd3      	ldrb	r3, [r2, r3]
 80012cc:	b2d9      	uxtb	r1, r3
 80012ce:	e000      	b.n	80012d2 <main+0x572>
 80012d0:	2100      	movs	r1, #0
 80012d2:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80012d6:	f1c3 0398 	rsb	r3, r3, #152	; 0x98
 80012da:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 80012de:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	460a      	mov	r2, r1
 80012e8:	719a      	strb	r2, [r3, #6]
					frame.ledarray[NUMLED - 22 - i + 58].r =  brightness > thresh ? data[3*i+2]: 0 ;
 80012ea:	ed97 7ae2 	vldr	s14, [r7, #904]	; 0x388
 80012ee:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 80012f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fa:	dd0c      	ble.n	8001316 <main+0x5b6>
 80012fc:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	3302      	adds	r3, #2
 8001308:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800130c:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8001310:	5cd3      	ldrb	r3, [r2, r3]
 8001312:	b2d9      	uxtb	r1, r3
 8001314:	e000      	b.n	8001318 <main+0x5b8>
 8001316:	2100      	movs	r1, #0
 8001318:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800131c:	f1c3 0398 	rsb	r3, r3, #152	; 0x98
 8001320:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8001324:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	460a      	mov	r2, r1
 800132e:	71da      	strb	r2, [r3, #7]
 8001330:	e067      	b.n	8001402 <main+0x6a2>

				}
				else
				{
					frame.ledarray[57 -i + 95].b =  brightness > thresh ? data[3*i+0]: 0 ;
 8001332:	ed97 7ae2 	vldr	s14, [r7, #904]	; 0x388
 8001336:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 800133a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	dd0b      	ble.n	800135c <main+0x5fc>
 8001344:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001348:	4613      	mov	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8001352:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 8001356:	5cd3      	ldrb	r3, [r2, r3]
 8001358:	b2d9      	uxtb	r1, r3
 800135a:	e000      	b.n	800135e <main+0x5fe>
 800135c:	2100      	movs	r1, #0
 800135e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001362:	f1c3 0398 	rsb	r3, r3, #152	; 0x98
 8001366:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800136a:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	460a      	mov	r2, r1
 8001374:	715a      	strb	r2, [r3, #5]
					frame.ledarray[57 -i + 95].g = brightness > thresh ? data[3*i+1]: 0 ;
 8001376:	ed97 7ae2 	vldr	s14, [r7, #904]	; 0x388
 800137a:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 800137e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001386:	dd0c      	ble.n	80013a2 <main+0x642>
 8001388:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	3301      	adds	r3, #1
 8001394:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 8001398:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 800139c:	5cd3      	ldrb	r3, [r2, r3]
 800139e:	b2d9      	uxtb	r1, r3
 80013a0:	e000      	b.n	80013a4 <main+0x644>
 80013a2:	2100      	movs	r1, #0
 80013a4:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80013a8:	f1c3 0398 	rsb	r3, r3, #152	; 0x98
 80013ac:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 80013b0:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	460a      	mov	r2, r1
 80013ba:	719a      	strb	r2, [r3, #6]
					frame.ledarray[57 -i + 95].r =  brightness > thresh ?data[3*i+2]: 0 ;
 80013bc:	ed97 7ae2 	vldr	s14, [r7, #904]	; 0x388
 80013c0:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 80013c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013cc:	dd0c      	ble.n	80013e8 <main+0x688>
 80013ce:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3302      	adds	r3, #2
 80013da:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 80013de:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 80013e2:	5cd3      	ldrb	r3, [r2, r3]
 80013e4:	b2d9      	uxtb	r1, r3
 80013e6:	e000      	b.n	80013ea <main+0x68a>
 80013e8:	2100      	movs	r1, #0
 80013ea:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 80013ee:	f1c3 0398 	rsb	r3, r3, #152	; 0x98
 80013f2:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 80013f6:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	460a      	mov	r2, r1
 8001400:	71da      	strb	r2, [r3, #7]
			for(int i = 0; i < NUMLED; i++)
 8001402:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001406:	3301      	adds	r3, #1
 8001408:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 800140c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001410:	2b73      	cmp	r3, #115	; 0x73
 8001412:	f77f ad8a 	ble.w	8000f2a <main+0x1ca>
				}
			}

			HAL_SPI_Transmit(&hspi1, &frame, sizeof(Frame), 10000);
 8001416:	f107 0118 	add.w	r1, r7, #24
 800141a:	f242 7310 	movw	r3, #10000	; 0x2710
 800141e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8001422:	486c      	ldr	r0, [pc, #432]	; (80015d4 <main+0x874>)
 8001424:	f003 fa3d 	bl	80048a2 <HAL_SPI_Transmit>

			//while(1){}
			HAL_Delay(5);
 8001428:	2005      	movs	r0, #5
 800142a:	f000 ff01 	bl	8002230 <HAL_Delay>
			flag=0;
 800142e:	4b6a      	ldr	r3, [pc, #424]	; (80015d8 <main+0x878>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	e0c8      	b.n	80015c8 <main+0x868>
		}

		else if (mode == refreshBorder){ //Ask pi to update the border, wait for a 101 ACK message back.0
 8001436:	4b69      	ldr	r3, [pc, #420]	; (80015dc <main+0x87c>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d145      	bne.n	80014ca <main+0x76a>
			op = update;
 800143e:	2301      	movs	r3, #1
 8001440:	f887 33ab 	strb.w	r3, [r7, #939]	; 0x3ab
			uint8_t buf[1];
			buf[0] = op;
 8001444:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001448:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800144c:	f897 23ab 	ldrb.w	r2, [r7, #939]	; 0x3ab
 8001450:	701a      	strb	r2, [r3, #0]
			uint8_t bufR[1];
			bufR[0] = 0;
 8001452:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8001456:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]

			uint8_t stop = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	f887 339f 	strb.w	r3, [r7, #927]	; 0x39f

			do{ //handshake
				HAL_UART_Abort(&huart3);
 8001464:	485e      	ldr	r0, [pc, #376]	; (80015e0 <main+0x880>)
 8001466:	f004 f9dd 	bl	8005824 <HAL_UART_Abort>
				HAL_DMA_Abort(&hdma_usart3_rx);
 800146a:	485e      	ldr	r0, [pc, #376]	; (80015e4 <main+0x884>)
 800146c:	f001 f939 	bl	80026e2 <HAL_DMA_Abort>
				HAL_UART_Transmit(&huart3, buf, 1, 100);
 8001470:	f107 010c 	add.w	r1, r7, #12
 8001474:	2364      	movs	r3, #100	; 0x64
 8001476:	2201      	movs	r2, #1
 8001478:	4859      	ldr	r0, [pc, #356]	; (80015e0 <main+0x880>)
 800147a:	f004 f811 	bl	80054a0 <HAL_UART_Transmit>
				HAL_UART_Receive(&huart3, bufR, 1, 1000);
 800147e:	f107 0108 	add.w	r1, r7, #8
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	2201      	movs	r2, #1
 8001488:	4855      	ldr	r0, [pc, #340]	; (80015e0 <main+0x880>)
 800148a:	f004 f8a0 	bl	80055ce <HAL_UART_Receive>
				if(mode!=piCam){
 800148e:	4b53      	ldr	r3, [pc, #332]	; (80015dc <main+0x87c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <main+0x73e>
					stop=1;
 8001496:	2301      	movs	r3, #1
 8001498:	f887 339f 	strb.w	r3, [r7, #927]	; 0x39f
					break;
 800149c:	e006      	b.n	80014ac <main+0x74c>
				}

			}while(bufR[0] != 101);
 800149e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80014a2:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b65      	cmp	r3, #101	; 0x65
 80014aa:	d1db      	bne.n	8001464 <main+0x704>

			if(stop) {
 80014ac:	f897 339f 	ldrb.w	r3, [r7, #927]	; 0x39f
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <main+0x75c>
				stop=0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 339f 	strb.w	r3, [r7, #927]	; 0x39f
 80014ba:	e4db      	b.n	8000e74 <main+0x114>
				continue;
			}


			mode = piCam;
 80014bc:	4b47      	ldr	r3, [pc, #284]	; (80015dc <main+0x87c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
			op = send;
 80014c2:	2302      	movs	r3, #2
 80014c4:	f887 33ab 	strb.w	r3, [r7, #939]	; 0x3ab
 80014c8:	e07e      	b.n	80015c8 <main+0x868>
		}

		//Mode 2 -- CP
		else if(mode == colorProfile){
 80014ca:	4b44      	ldr	r3, [pc, #272]	; (80015dc <main+0x87c>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d17a      	bne.n	80015c8 <main+0x868>
			for (int i =0; i<NUMLED;++i){
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 80014d8:	e025      	b.n	8001526 <main+0x7c6>
				frame.ledarray[i].b = blue;
 80014da:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80014de:	f5a3 7266 	sub.w	r2, r3, #920	; 0x398
 80014e2:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	f897 23a5 	ldrb.w	r2, [r7, #933]	; 0x3a5
 80014ee:	715a      	strb	r2, [r3, #5]
				frame.ledarray[i].g = green;
 80014f0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80014f4:	f5a3 7266 	sub.w	r2, r3, #920	; 0x398
 80014f8:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	f897 23a7 	ldrb.w	r2, [r7, #935]	; 0x3a7
 8001504:	719a      	strb	r2, [r3, #6]
				frame.ledarray[i].r = red;
 8001506:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800150a:	f5a3 7266 	sub.w	r2, r3, #920	; 0x398
 800150e:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	f897 23a6 	ldrb.w	r2, [r7, #934]	; 0x3a6
 800151a:	71da      	strb	r2, [r3, #7]
			for (int i =0; i<NUMLED;++i){
 800151c:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8001520:	3301      	adds	r3, #1
 8001522:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8001526:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800152a:	2b73      	cmp	r3, #115	; 0x73
 800152c:	ddd5      	ble.n	80014da <main+0x77a>
			}
			HAL_SPI_Transmit(&hspi1, &frame, sizeof(Frame), 1000);
 800152e:	f107 0118 	add.w	r1, r7, #24
 8001532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001536:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800153a:	4826      	ldr	r0, [pc, #152]	; (80015d4 <main+0x874>)
 800153c:	f003 f9b1 	bl	80048a2 <HAL_SPI_Transmit>

			if(green<=5 || green>=250)
 8001540:	f897 33a7 	ldrb.w	r3, [r7, #935]	; 0x3a7
 8001544:	2b05      	cmp	r3, #5
 8001546:	d903      	bls.n	8001550 <main+0x7f0>
 8001548:	f897 33a7 	ldrb.w	r3, [r7, #935]	; 0x3a7
 800154c:	2bf9      	cmp	r3, #249	; 0xf9
 800154e:	d905      	bls.n	800155c <main+0x7fc>
				modg*=-1;
 8001550:	f897 33aa 	ldrb.w	r3, [r7, #938]	; 0x3aa
 8001554:	425b      	negs	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	f887 33aa 	strb.w	r3, [r7, #938]	; 0x3aa
			if(red <=5 || red >= 250)
 800155c:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 8001560:	2b05      	cmp	r3, #5
 8001562:	d903      	bls.n	800156c <main+0x80c>
 8001564:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 8001568:	2bf9      	cmp	r3, #249	; 0xf9
 800156a:	d905      	bls.n	8001578 <main+0x818>
				modr*=-1;
 800156c:	f897 33a9 	ldrb.w	r3, [r7, #937]	; 0x3a9
 8001570:	425b      	negs	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f887 33a9 	strb.w	r3, [r7, #937]	; 0x3a9
			if(blue <=5 || blue >= 250)
 8001578:	f897 33a5 	ldrb.w	r3, [r7, #933]	; 0x3a5
 800157c:	2b05      	cmp	r3, #5
 800157e:	d903      	bls.n	8001588 <main+0x828>
 8001580:	f897 33a5 	ldrb.w	r3, [r7, #933]	; 0x3a5
 8001584:	2bf9      	cmp	r3, #249	; 0xf9
 8001586:	d905      	bls.n	8001594 <main+0x834>
				modb*=-1;
 8001588:	f897 33a8 	ldrb.w	r3, [r7, #936]	; 0x3a8
 800158c:	425b      	negs	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f887 33a8 	strb.w	r3, [r7, #936]	; 0x3a8

			green+=modg;
 8001594:	f897 23aa 	ldrb.w	r2, [r7, #938]	; 0x3aa
 8001598:	f897 33a7 	ldrb.w	r3, [r7, #935]	; 0x3a7
 800159c:	4413      	add	r3, r2
 800159e:	f887 33a7 	strb.w	r3, [r7, #935]	; 0x3a7
			blue+=modb;
 80015a2:	f897 23a8 	ldrb.w	r2, [r7, #936]	; 0x3a8
 80015a6:	f897 33a5 	ldrb.w	r3, [r7, #933]	; 0x3a5
 80015aa:	4413      	add	r3, r2
 80015ac:	f887 33a5 	strb.w	r3, [r7, #933]	; 0x3a5
			red+=modr;
 80015b0:	f897 23a9 	ldrb.w	r2, [r7, #937]	; 0x3a9
 80015b4:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 80015b8:	4413      	add	r3, r2
 80015ba:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6

			HAL_Delay(delay);
 80015be:	f8b7 338e 	ldrh.w	r3, [r7, #910]	; 0x38e
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fe34 	bl	8002230 <HAL_Delay>
		}


		if (mode == 6) {
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <main+0x87c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b06      	cmp	r3, #6
 80015ce:	f47f ac51 	bne.w	8000e74 <main+0x114>
			while(1);
 80015d2:	e7fe      	b.n	80015d2 <main+0x872>
 80015d4:	2000002c 	.word	0x2000002c
 80015d8:	20000204 	.word	0x20000204
 80015dc:	20000000 	.word	0x20000000
 80015e0:	200000dc 	.word	0x200000dc
 80015e4:	2000016c 	.word	0x2000016c

080015e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b096      	sub	sp, #88	; 0x58
 80015ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	2244      	movs	r2, #68	; 0x44
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f005 fa5c 	bl	8006ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800160a:	2000      	movs	r0, #0
 800160c:	f001 fc02 	bl	8002e14 <HAL_PWREx_ControlVoltageScaling>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001616:	f000 fc01 	bl	8001e1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800161a:	2310      	movs	r3, #16
 800161c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800161e:	2301      	movs	r3, #1
 8001620:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001626:	2360      	movs	r3, #96	; 0x60
 8001628:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162a:	2302      	movs	r3, #2
 800162c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800162e:	2301      	movs	r3, #1
 8001630:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001632:	2301      	movs	r3, #1
 8001634:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001636:	233c      	movs	r3, #60	; 0x3c
 8001638:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800163a:	2302      	movs	r3, #2
 800163c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800163e:	2302      	movs	r3, #2
 8001640:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001642:	2302      	movs	r3, #2
 8001644:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4618      	mov	r0, r3
 800164c:	f001 fc96 	bl	8002f7c <HAL_RCC_OscConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001656:	f000 fbe1 	bl	8001e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165a:	230f      	movs	r3, #15
 800165c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165e:	2303      	movs	r3, #3
 8001660:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001670:	463b      	mov	r3, r7
 8001672:	2105      	movs	r1, #5
 8001674:	4618      	mov	r0, r3
 8001676:	f002 f89b 	bl	80037b0 <HAL_RCC_ClockConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001680:	f000 fbcc 	bl	8001e1c <Error_Handler>
  }
}
 8001684:	bf00      	nop
 8001686:	3758      	adds	r7, #88	; 0x58
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_SPI1_Init+0x74>)
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <MX_SPI1_Init+0x78>)
 8001694:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_SPI1_Init+0x74>)
 8001698:	f44f 7282 	mov.w	r2, #260	; 0x104
 800169c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_SPI1_Init+0x74>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <MX_SPI1_Init+0x74>)
 80016a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_SPI1_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <MX_SPI1_Init+0x74>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_SPI1_Init+0x74>)
 80016ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_SPI1_Init+0x74>)
 80016c2:	2228      	movs	r2, #40	; 0x28
 80016c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_SPI1_Init+0x74>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_SPI1_Init+0x74>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_SPI1_Init+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_SPI1_Init+0x74>)
 80016da:	2207      	movs	r2, #7
 80016dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <MX_SPI1_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_SPI1_Init+0x74>)
 80016e6:	2208      	movs	r2, #8
 80016e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_SPI1_Init+0x74>)
 80016ec:	f003 f836 	bl	800475c <HAL_SPI_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016f6:	f000 fb91 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000002c 	.word	0x2000002c
 8001704:	40013000 	.word	0x40013000

08001708 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170e:	f107 0310 	add.w	r3, r7, #16
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <MX_TIM2_Init+0x98>)
 8001728:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120-1;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_TIM2_Init+0x98>)
 8001730:	2277      	movs	r2, #119	; 0x77
 8001732:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_TIM2_Init+0x98>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_TIM2_Init+0x98>)
 800173c:	f04f 32ff 	mov.w	r2, #4294967295
 8001740:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <MX_TIM2_Init+0x98>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001748:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <MX_TIM2_Init+0x98>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800174e:	4814      	ldr	r0, [pc, #80]	; (80017a0 <MX_TIM2_Init+0x98>)
 8001750:	f003 fb7a 	bl	8004e48 <HAL_TIM_Base_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800175a:	f000 fb5f 	bl	8001e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001762:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	4619      	mov	r1, r3
 800176a:	480d      	ldr	r0, [pc, #52]	; (80017a0 <MX_TIM2_Init+0x98>)
 800176c:	f003 fbc3 	bl	8004ef6 <HAL_TIM_ConfigClockSource>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001776:	f000 fb51 	bl	8001e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_TIM2_Init+0x98>)
 8001788:	f003 fdb2 	bl	80052f0 <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001792:	f000 fb43 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000090 	.word	0x20000090

080017a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017a8:	4b22      	ldr	r3, [pc, #136]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017aa:	4a23      	ldr	r2, [pc, #140]	; (8001838 <MX_USART3_UART_Init+0x94>)
 80017ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017b0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80017b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017b6:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017ca:	220c      	movs	r2, #12
 80017cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017ec:	4811      	ldr	r0, [pc, #68]	; (8001834 <MX_USART3_UART_Init+0x90>)
 80017ee:	f003 fe07 	bl	8005400 <HAL_UART_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017f8:	f000 fb10 	bl	8001e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017fc:	2100      	movs	r1, #0
 80017fe:	480d      	ldr	r0, [pc, #52]	; (8001834 <MX_USART3_UART_Init+0x90>)
 8001800:	f005 f869 	bl	80068d6 <HAL_UARTEx_SetTxFifoThreshold>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800180a:	f000 fb07 	bl	8001e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180e:	2100      	movs	r1, #0
 8001810:	4808      	ldr	r0, [pc, #32]	; (8001834 <MX_USART3_UART_Init+0x90>)
 8001812:	f005 f89e 	bl	8006952 <HAL_UARTEx_SetRxFifoThreshold>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800181c:	f000 fafe 	bl	8001e1c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_USART3_UART_Init+0x90>)
 8001822:	f005 f81d 	bl	8006860 <HAL_UARTEx_EnableFifoMode>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800182c:	f000 faf6 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200000dc 	.word	0x200000dc
 8001838:	40004800 	.word	0x40004800

0800183c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <MX_DMA_Init+0x50>)
 8001844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001846:	4a11      	ldr	r2, [pc, #68]	; (800188c <MX_DMA_Init+0x50>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	6493      	str	r3, [r2, #72]	; 0x48
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <MX_DMA_Init+0x50>)
 8001850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_DMA_Init+0x50>)
 800185c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <MX_DMA_Init+0x50>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6493      	str	r3, [r2, #72]	; 0x48
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_DMA_Init+0x50>)
 8001868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	200b      	movs	r0, #11
 8001878:	f000 fdd9 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800187c:	200b      	movs	r0, #11
 800187e:	f000 fdf2 	bl	8002466 <HAL_NVIC_EnableIRQ>

}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a6:	4b89      	ldr	r3, [pc, #548]	; (8001acc <MX_GPIO_Init+0x23c>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	4a88      	ldr	r2, [pc, #544]	; (8001acc <MX_GPIO_Init+0x23c>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b2:	4b86      	ldr	r3, [pc, #536]	; (8001acc <MX_GPIO_Init+0x23c>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018be:	4b83      	ldr	r3, [pc, #524]	; (8001acc <MX_GPIO_Init+0x23c>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	4a82      	ldr	r2, [pc, #520]	; (8001acc <MX_GPIO_Init+0x23c>)
 80018c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ca:	4b80      	ldr	r3, [pc, #512]	; (8001acc <MX_GPIO_Init+0x23c>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	4b7d      	ldr	r3, [pc, #500]	; (8001acc <MX_GPIO_Init+0x23c>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	4a7c      	ldr	r2, [pc, #496]	; (8001acc <MX_GPIO_Init+0x23c>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e2:	4b7a      	ldr	r3, [pc, #488]	; (8001acc <MX_GPIO_Init+0x23c>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ee:	4b77      	ldr	r3, [pc, #476]	; (8001acc <MX_GPIO_Init+0x23c>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	4a76      	ldr	r2, [pc, #472]	; (8001acc <MX_GPIO_Init+0x23c>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fa:	4b74      	ldr	r3, [pc, #464]	; (8001acc <MX_GPIO_Init+0x23c>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	4b71      	ldr	r3, [pc, #452]	; (8001acc <MX_GPIO_Init+0x23c>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	4a70      	ldr	r2, [pc, #448]	; (8001acc <MX_GPIO_Init+0x23c>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001912:	4b6e      	ldr	r3, [pc, #440]	; (8001acc <MX_GPIO_Init+0x23c>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800191e:	4b6b      	ldr	r3, [pc, #428]	; (8001acc <MX_GPIO_Init+0x23c>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	4a6a      	ldr	r2, [pc, #424]	; (8001acc <MX_GPIO_Init+0x23c>)
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192a:	4b68      	ldr	r3, [pc, #416]	; (8001acc <MX_GPIO_Init+0x23c>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001936:	4b65      	ldr	r3, [pc, #404]	; (8001acc <MX_GPIO_Init+0x23c>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a64      	ldr	r2, [pc, #400]	; (8001acc <MX_GPIO_Init+0x23c>)
 800193c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b62      	ldr	r3, [pc, #392]	; (8001acc <MX_GPIO_Init+0x23c>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800194e:	f001 fb05 	bl	8002f5c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	2110      	movs	r1, #16
 8001956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195a:	f001 fa0b 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001964:	485a      	ldr	r0, [pc, #360]	; (8001ad0 <MX_GPIO_Init+0x240>)
 8001966:	f001 fa05 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2140      	movs	r1, #64	; 0x40
 800196e:	4859      	ldr	r0, [pc, #356]	; (8001ad4 <MX_GPIO_Init+0x244>)
 8001970:	f001 fa00 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	2180      	movs	r1, #128	; 0x80
 8001978:	4857      	ldr	r0, [pc, #348]	; (8001ad8 <MX_GPIO_Init+0x248>)
 800197a:	f001 f9fb 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800197e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001984:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	4850      	ldr	r0, [pc, #320]	; (8001ad8 <MX_GPIO_Init+0x248>)
 8001996:	f001 f85b 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800199a:	2310      	movs	r3, #16
 800199c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b4:	f001 f84c 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 80019b8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	2301      	movs	r3, #1
 80019c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	483f      	ldr	r0, [pc, #252]	; (8001ad0 <MX_GPIO_Init+0x240>)
 80019d2:	f001 f83d 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80019d6:	2320      	movs	r3, #32
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	483a      	ldr	r0, [pc, #232]	; (8001ad4 <MX_GPIO_Init+0x244>)
 80019ea:	f001 f831 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80019ee:	2340      	movs	r3, #64	; 0x40
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4833      	ldr	r0, [pc, #204]	; (8001ad4 <MX_GPIO_Init+0x244>)
 8001a06:	f001 f823 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_TX_Pin STLINK_RX_Pin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001a0a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	4619      	mov	r1, r3
 8001a26:	482b      	ldr	r0, [pc, #172]	; (8001ad4 <MX_GPIO_Init+0x244>)
 8001a28:	f001 f812 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	4619      	mov	r1, r3
 8001a42:	4825      	ldr	r0, [pc, #148]	; (8001ad8 <MX_GPIO_Init+0x248>)
 8001a44:	f001 f804 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a48:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	4619      	mov	r1, r3
 8001a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a68:	f000 fff2 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a84:	f000 ffe4 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a8c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	480f      	ldr	r0, [pc, #60]	; (8001adc <MX_GPIO_Init+0x24c>)
 8001a9e:	f000 ffd7 	bl	8002a50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2006      	movs	r0, #6
 8001aa8:	f000 fcc1 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001aac:	2006      	movs	r0, #6
 8001aae:	f000 fcda 	bl	8002466 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2007      	movs	r0, #7
 8001ab8:	f000 fcb9 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001abc:	2007      	movs	r0, #7
 8001abe:	f000 fcd2 	bl	8002466 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ac2:	bf00      	nop
 8001ac4:	3730      	adds	r7, #48	; 0x30
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	48000400 	.word	0x48000400
 8001ad4:	48001800 	.word	0x48001800
 8001ad8:	48000800 	.word	0x48000800
 8001adc:	48000c00 	.word	0x48000c00

08001ae0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	f040 80aa 	bne.w	8001c46 <HAL_GPIO_EXTI_Callback+0x166>
		// read data packet
		//		receive_signal();

		switch(receive_signal_state) {
 8001af2:	4b90      	ldr	r3, [pc, #576]	; (8001d34 <HAL_GPIO_EXTI_Callback+0x254>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	f200 80aa 	bhi.w	8001c50 <HAL_GPIO_EXTI_Callback+0x170>
 8001afc:	a201      	add	r2, pc, #4	; (adr r2, 8001b04 <HAL_GPIO_EXTI_Callback+0x24>)
 8001afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b02:	bf00      	nop
 8001b04:	08001b15 	.word	0x08001b15
 8001b08:	08001b29 	.word	0x08001b29
 8001b0c:	08001b6f 	.word	0x08001b6f
 8001b10:	08001bd1 	.word	0x08001bd1
		case 0:
			// measure leading frame
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8001b14:	4b88      	ldr	r3, [pc, #544]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x258>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24
			++receive_signal_state;
 8001b1c:	4b85      	ldr	r3, [pc, #532]	; (8001d34 <HAL_GPIO_EXTI_Callback+0x254>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	4a84      	ldr	r2, [pc, #528]	; (8001d34 <HAL_GPIO_EXTI_Callback+0x254>)
 8001b24:	6013      	str	r3, [r2, #0]

			break;
 8001b26:	e093      	b.n	8001c50 <HAL_GPIO_EXTI_Callback+0x170>
		case 1:
			// validate leading frame
			lead_time = __HAL_TIM_GET_COUNTER(&htim2);
 8001b28:	4b83      	ldr	r3, [pc, #524]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x258>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b82      	ldr	r3, [pc, #520]	; (8001d3c <HAL_GPIO_EXTI_Callback+0x25c>)
 8001b32:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8001b34:	4b80      	ldr	r3, [pc, #512]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x258>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24
//			} else {
//				--receive_signal_state;
//			}


			if (lead_time > 20 && lead_time < 30000) {
 8001b3c:	4b7f      	ldr	r3, [pc, #508]	; (8001d3c <HAL_GPIO_EXTI_Callback+0x25c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b14      	cmp	r3, #20
 8001b42:	dd0e      	ble.n	8001b62 <HAL_GPIO_EXTI_Callback+0x82>
 8001b44:	4b7d      	ldr	r3, [pc, #500]	; (8001d3c <HAL_GPIO_EXTI_Callback+0x25c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f247 522f 	movw	r2, #29999	; 0x752f
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	dc08      	bgt.n	8001b62 <HAL_GPIO_EXTI_Callback+0x82>
				++receive_signal_state;
 8001b50:	4b78      	ldr	r3, [pc, #480]	; (8001d34 <HAL_GPIO_EXTI_Callback+0x254>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	4a77      	ldr	r2, [pc, #476]	; (8001d34 <HAL_GPIO_EXTI_Callback+0x254>)
 8001b58:	6013      	str	r3, [r2, #0]
				bit_pos = 3;
 8001b5a:	4b79      	ldr	r3, [pc, #484]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x260>)
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	601a      	str	r2, [r3, #0]
			} else {
				--receive_signal_state;
			}


			break;
 8001b60:	e076      	b.n	8001c50 <HAL_GPIO_EXTI_Callback+0x170>
				--receive_signal_state;
 8001b62:	4b74      	ldr	r3, [pc, #464]	; (8001d34 <HAL_GPIO_EXTI_Callback+0x254>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	4a72      	ldr	r2, [pc, #456]	; (8001d34 <HAL_GPIO_EXTI_Callback+0x254>)
 8001b6a:	6013      	str	r3, [r2, #0]
			break;
 8001b6c:	e070      	b.n	8001c50 <HAL_GPIO_EXTI_Callback+0x170>
		case 2:
			// read 4-bit command
			bit_time = __HAL_TIM_GET_COUNTER(&htim2);
 8001b6e:	4b72      	ldr	r3, [pc, #456]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x258>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b73      	ldr	r3, [pc, #460]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x264>)
 8001b78:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8001b7a:	4b6f      	ldr	r3, [pc, #444]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x258>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24

			if (bit_time > 3000) {
 8001b82:	4b70      	ldr	r3, [pc, #448]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x264>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	dd0d      	ble.n	8001baa <HAL_GPIO_EXTI_Callback+0xca>
				command |= (1 << bit_pos);
 8001b8e:	4b6c      	ldr	r3, [pc, #432]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x260>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2201      	movs	r2, #1
 8001b94:	409a      	lsls	r2, r3
 8001b96:	4b6c      	ldr	r3, [pc, #432]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x268>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	4a6a      	ldr	r2, [pc, #424]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x268>)
 8001b9e:	6013      	str	r3, [r2, #0]
				++one_count;
 8001ba0:	4b6a      	ldr	r3, [pc, #424]	; (8001d4c <HAL_GPIO_EXTI_Callback+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	4a69      	ldr	r2, [pc, #420]	; (8001d4c <HAL_GPIO_EXTI_Callback+0x26c>)
 8001ba8:	6013      	str	r3, [r2, #0]
			}

			--bit_pos;
 8001baa:	4b65      	ldr	r3, [pc, #404]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x260>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	4a63      	ldr	r2, [pc, #396]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x260>)
 8001bb2:	6013      	str	r3, [r2, #0]

			if (bit_pos == -1) {
 8001bb4:	4b62      	ldr	r3, [pc, #392]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x260>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d145      	bne.n	8001c4a <HAL_GPIO_EXTI_Callback+0x16a>
				++receive_signal_state;
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	; (8001d34 <HAL_GPIO_EXTI_Callback+0x254>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4a5b      	ldr	r2, [pc, #364]	; (8001d34 <HAL_GPIO_EXTI_Callback+0x254>)
 8001bc6:	6013      	str	r3, [r2, #0]
				bit_pos = 2;
 8001bc8:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x260>)
 8001bca:	2202      	movs	r2, #2
 8001bcc:	601a      	str	r2, [r3, #0]
			}

			break;
 8001bce:	e03c      	b.n	8001c4a <HAL_GPIO_EXTI_Callback+0x16a>
		case 3:
			// read 3-bit checksum
			bit_time = __HAL_TIM_GET_COUNTER(&htim2);
 8001bd0:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x258>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b5a      	ldr	r3, [pc, #360]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x264>)
 8001bda:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8001bdc:	4b56      	ldr	r3, [pc, #344]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x258>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2200      	movs	r2, #0
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24

			if (bit_time > 3000) {
 8001be4:	4b57      	ldr	r3, [pc, #348]	; (8001d44 <HAL_GPIO_EXTI_Callback+0x264>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001bec:	4293      	cmp	r3, r2
 8001bee:	dd08      	ble.n	8001c02 <HAL_GPIO_EXTI_Callback+0x122>
				checksum |= (1 << bit_pos);
 8001bf0:	4b53      	ldr	r3, [pc, #332]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x260>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	4b55      	ldr	r3, [pc, #340]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x270>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	4a54      	ldr	r2, [pc, #336]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x270>)
 8001c00:	6013      	str	r3, [r2, #0]
			}

			--bit_pos;
 8001c02:	4b4f      	ldr	r3, [pc, #316]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x260>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	4a4d      	ldr	r2, [pc, #308]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x260>)
 8001c0a:	6013      	str	r3, [r2, #0]


			// set and reset
			if (bit_pos == -1) {
 8001c0c:	4b4c      	ldr	r3, [pc, #304]	; (8001d40 <HAL_GPIO_EXTI_Callback+0x260>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d11b      	bne.n	8001c4e <HAL_GPIO_EXTI_Callback+0x16e>
				if (checksum == one_count) {
 8001c16:	4b4e      	ldr	r3, [pc, #312]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x270>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <HAL_GPIO_EXTI_Callback+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d104      	bne.n	8001c2c <HAL_GPIO_EXTI_Callback+0x14c>
					mode = command;
 8001c22:	4b49      	ldr	r3, [pc, #292]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x268>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b4a      	ldr	r3, [pc, #296]	; (8001d54 <HAL_GPIO_EXTI_Callback+0x274>)
 8001c2a:	701a      	strb	r2, [r3, #0]
				}

				command = 0;
 8001c2c:	4b46      	ldr	r3, [pc, #280]	; (8001d48 <HAL_GPIO_EXTI_Callback+0x268>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
				checksum = 0;
 8001c32:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <HAL_GPIO_EXTI_Callback+0x270>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
				one_count = 0;
 8001c38:	4b44      	ldr	r3, [pc, #272]	; (8001d4c <HAL_GPIO_EXTI_Callback+0x26c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
				receive_signal_state = 0;
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_GPIO_EXTI_Callback+0x254>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
			}

			break;
 8001c44:	e003      	b.n	8001c4e <HAL_GPIO_EXTI_Callback+0x16e>
		}

	}
 8001c46:	bf00      	nop
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_EXTI_Callback+0x170>
			break;
 8001c4a:	bf00      	nop
 8001c4c:	e000      	b.n	8001c50 <HAL_GPIO_EXTI_Callback+0x170>
			break;
 8001c4e:	bf00      	nop



	if (GPIO_Pin == GPIO_PIN_1) {
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	f040 80c7 	bne.w	8001de6 <HAL_GPIO_EXTI_Callback+0x306>
		// read data packet
		//		receive_signal();

		switch(receive_signal_state2) {
 8001c58:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x278>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	f200 80c7 	bhi.w	8001df0 <HAL_GPIO_EXTI_Callback+0x310>
 8001c62:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <HAL_GPIO_EXTI_Callback+0x188>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001c79 	.word	0x08001c79
 8001c6c:	08001c8d 	.word	0x08001c8d
 8001c70:	08001cd3 	.word	0x08001cd3
 8001c74:	08001d71 	.word	0x08001d71
		case 0:
			// measure leading frame
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8001c78:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x258>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24
			++receive_signal_state2;
 8001c80:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x278>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	4a34      	ldr	r2, [pc, #208]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x278>)
 8001c88:	6013      	str	r3, [r2, #0]

			break;
 8001c8a:	e0b1      	b.n	8001df0 <HAL_GPIO_EXTI_Callback+0x310>
//			} else {
//				--receive_signal_state2;
//			}


			lead_time2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x258>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x27c>)
 8001c96:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x258>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	625a      	str	r2, [r3, #36]	; 0x24

			if (lead_time2 > 30 && lead_time2 < 30000) {
 8001ca0:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x27c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b1e      	cmp	r3, #30
 8001ca6:	dd0e      	ble.n	8001cc6 <HAL_GPIO_EXTI_Callback+0x1e6>
 8001ca8:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x27c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f247 522f 	movw	r2, #29999	; 0x752f
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	dc08      	bgt.n	8001cc6 <HAL_GPIO_EXTI_Callback+0x1e6>
				++receive_signal_state2;
 8001cb4:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x278>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	4a27      	ldr	r2, [pc, #156]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x278>)
 8001cbc:	6013      	str	r3, [r2, #0]
				bit_pos2 = 3;
 8001cbe:	4b28      	ldr	r3, [pc, #160]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x280>)
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	601a      	str	r2, [r3, #0]
			} else {
				--receive_signal_state2;
			}

			break;
 8001cc4:	e094      	b.n	8001df0 <HAL_GPIO_EXTI_Callback+0x310>
				--receive_signal_state2;
 8001cc6:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x278>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	4a22      	ldr	r2, [pc, #136]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x278>)
 8001cce:	6013      	str	r3, [r2, #0]
			break;
 8001cd0:	e08e      	b.n	8001df0 <HAL_GPIO_EXTI_Callback+0x310>
		case 2:
			// read 4-bit command
			bit_time2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x258>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_GPIO_EXTI_Callback+0x284>)
 8001cdc:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_GPIO_EXTI_Callback+0x258>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24

			if (bit_time2 > 3000) {
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <HAL_GPIO_EXTI_Callback+0x284>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	dd0d      	ble.n	8001d0e <HAL_GPIO_EXTI_Callback+0x22e>
				command2 |= (1 << bit_pos2);
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x280>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_GPIO_EXTI_Callback+0x288>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_GPIO_EXTI_Callback+0x288>)
 8001d02:	6013      	str	r3, [r2, #0]
				++one_count2;
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	4a18      	ldr	r2, [pc, #96]	; (8001d6c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001d0c:	6013      	str	r3, [r2, #0]
			}

			--bit_pos2;
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x280>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x280>)
 8001d16:	6013      	str	r3, [r2, #0]

			if (bit_pos2 == -1) {
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x280>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d163      	bne.n	8001dea <HAL_GPIO_EXTI_Callback+0x30a>
				++receive_signal_state2;
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x278>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <HAL_GPIO_EXTI_Callback+0x278>)
 8001d2a:	6013      	str	r3, [r2, #0]
				bit_pos2 = 2;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x280>)
 8001d2e:	2202      	movs	r2, #2
 8001d30:	601a      	str	r2, [r3, #0]
			}

			break;
 8001d32:	e05a      	b.n	8001dea <HAL_GPIO_EXTI_Callback+0x30a>
 8001d34:	200001cc 	.word	0x200001cc
 8001d38:	20000090 	.word	0x20000090
 8001d3c:	200001e0 	.word	0x200001e0
 8001d40:	200001dc 	.word	0x200001dc
 8001d44:	200001e4 	.word	0x200001e4
 8001d48:	200001d0 	.word	0x200001d0
 8001d4c:	200001d8 	.word	0x200001d8
 8001d50:	200001d4 	.word	0x200001d4
 8001d54:	20000000 	.word	0x20000000
 8001d58:	200001e8 	.word	0x200001e8
 8001d5c:	200001fc 	.word	0x200001fc
 8001d60:	200001f8 	.word	0x200001f8
 8001d64:	20000200 	.word	0x20000200
 8001d68:	200001ec 	.word	0x200001ec
 8001d6c:	200001f4 	.word	0x200001f4
		case 3:
			// read 3-bit checksum
			bit_time2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001d70:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x31c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <HAL_GPIO_EXTI_Callback+0x320>)
 8001d7a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x31c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2200      	movs	r2, #0
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24

			if (bit_time2 > 3000) {
 8001d84:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_GPIO_EXTI_Callback+0x320>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	dd08      	ble.n	8001da2 <HAL_GPIO_EXTI_Callback+0x2c2>
				checksum2 |= (1 << bit_pos2);
 8001d90:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x324>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2201      	movs	r2, #1
 8001d96:	409a      	lsls	r2, r3
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x328>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	4a1a      	ldr	r2, [pc, #104]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x328>)
 8001da0:	6013      	str	r3, [r2, #0]
			}

			--bit_pos2;
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x324>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x324>)
 8001daa:	6013      	str	r3, [r2, #0]


			// set and reset
			if (bit_pos2 == -1) {
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x324>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d11b      	bne.n	8001dee <HAL_GPIO_EXTI_Callback+0x30e>
				if (checksum2 == one_count2) {
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x328>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <HAL_GPIO_EXTI_Callback+0x32c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d104      	bne.n	8001dcc <HAL_GPIO_EXTI_Callback+0x2ec>
					mode = command2;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x330>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x334>)
 8001dca:	701a      	strb	r2, [r3, #0]
				}

				command2 = 0;
 8001dcc:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x330>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
				checksum2 = 0;
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x328>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
				one_count2 = 0;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_GPIO_EXTI_Callback+0x32c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
				receive_signal_state2 = 0;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <HAL_GPIO_EXTI_Callback+0x338>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
			}

			break;
 8001de4:	e003      	b.n	8001dee <HAL_GPIO_EXTI_Callback+0x30e>
		}

	}
 8001de6:	bf00      	nop
 8001de8:	e002      	b.n	8001df0 <HAL_GPIO_EXTI_Callback+0x310>
			break;
 8001dea:	bf00      	nop
 8001dec:	e000      	b.n	8001df0 <HAL_GPIO_EXTI_Callback+0x310>
			break;
 8001dee:	bf00      	nop
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	20000090 	.word	0x20000090
 8001e00:	20000200 	.word	0x20000200
 8001e04:	200001f8 	.word	0x200001f8
 8001e08:	200001f0 	.word	0x200001f0
 8001e0c:	200001f4 	.word	0x200001f4
 8001e10:	200001ec 	.word	0x200001ec
 8001e14:	20000000 	.word	0x20000000
 8001e18:	200001e8 	.word	0x200001e8

08001e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e20:	b672      	cpsid	i
}
 8001e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e24:	e7fe      	b.n	8001e24 <Error_Handler+0x8>
	...

08001e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_MspInit+0x44>)
 8001e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e32:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <HAL_MspInit+0x44>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6613      	str	r3, [r2, #96]	; 0x60
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_MspInit+0x44>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_MspInit+0x44>)
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <HAL_MspInit+0x44>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6593      	str	r3, [r2, #88]	; 0x58
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_MspInit+0x44>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000

08001e70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	f107 0314 	add.w	r3, r7, #20
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_SPI_MspInit+0x7c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d128      	bne.n	8001ee4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <HAL_SPI_MspInit+0x80>)
 8001e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e96:	4a16      	ldr	r2, [pc, #88]	; (8001ef0 <HAL_SPI_MspInit+0x80>)
 8001e98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_SPI_MspInit+0x80>)
 8001ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_SPI_MspInit+0x80>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	4a10      	ldr	r2, [pc, #64]	; (8001ef0 <HAL_SPI_MspInit+0x80>)
 8001eb0:	f043 0310 	orr.w	r3, r3, #16
 8001eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <HAL_SPI_MspInit+0x80>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001ec2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ed4:	2305      	movs	r3, #5
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <HAL_SPI_MspInit+0x84>)
 8001ee0:	f000 fdb6 	bl	8002a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ee4:	bf00      	nop
 8001ee6:	3728      	adds	r7, #40	; 0x28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40013000 	.word	0x40013000
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	48001000 	.word	0x48001000

08001ef8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f08:	d10b      	bne.n	8001f22 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_TIM_Base_MspInit+0x38>)
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0e:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <HAL_TIM_Base_MspInit+0x38>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6593      	str	r3, [r2, #88]	; 0x58
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_TIM_Base_MspInit+0x38>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000

08001f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b0ae      	sub	sp, #184	; 0xb8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	2294      	movs	r2, #148	; 0x94
 8001f52:	2100      	movs	r1, #0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f004 fdad 	bl	8006ab4 <memset>
  if(huart->Instance==USART3)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a36      	ldr	r2, [pc, #216]	; (8002038 <HAL_UART_MspInit+0x104>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d164      	bne.n	800202e <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f64:	2304      	movs	r3, #4
 8001f66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4618      	mov	r0, r3
 8001f72:	f001 fedb 	bl	8003d2c <HAL_RCCEx_PeriphCLKConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f7c:	f7ff ff4e 	bl	8001e1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f80:	4b2e      	ldr	r3, [pc, #184]	; (800203c <HAL_UART_MspInit+0x108>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	4a2d      	ldr	r2, [pc, #180]	; (800203c <HAL_UART_MspInit+0x108>)
 8001f86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8c:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_UART_MspInit+0x108>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f98:	4b28      	ldr	r3, [pc, #160]	; (800203c <HAL_UART_MspInit+0x108>)
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9c:	4a27      	ldr	r2, [pc, #156]	; (800203c <HAL_UART_MspInit+0x108>)
 8001f9e:	f043 0308 	orr.w	r3, r3, #8
 8001fa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <HAL_UART_MspInit+0x108>)
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fca:	2307      	movs	r3, #7
 8001fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	481a      	ldr	r0, [pc, #104]	; (8002040 <HAL_UART_MspInit+0x10c>)
 8001fd8:	f000 fd3a 	bl	8002a50 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel1;
 8001fdc:	4b19      	ldr	r3, [pc, #100]	; (8002044 <HAL_UART_MspInit+0x110>)
 8001fde:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <HAL_UART_MspInit+0x114>)
 8001fe0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_UART_MspInit+0x110>)
 8001fe4:	221c      	movs	r2, #28
 8001fe6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <HAL_UART_MspInit+0x110>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_UART_MspInit+0x110>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <HAL_UART_MspInit+0x110>)
 8001ff6:	2280      	movs	r2, #128	; 0x80
 8001ff8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_UART_MspInit+0x110>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002000:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_UART_MspInit+0x110>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <HAL_UART_MspInit+0x110>)
 8002008:	2200      	movs	r2, #0
 800200a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_UART_MspInit+0x110>)
 800200e:	2200      	movs	r2, #0
 8002010:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002012:	480c      	ldr	r0, [pc, #48]	; (8002044 <HAL_UART_MspInit+0x110>)
 8002014:	f000 fa42 	bl	800249c <HAL_DMA_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800201e:	f7ff fefd 	bl	8001e1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a07      	ldr	r2, [pc, #28]	; (8002044 <HAL_UART_MspInit+0x110>)
 8002026:	67da      	str	r2, [r3, #124]	; 0x7c
 8002028:	4a06      	ldr	r2, [pc, #24]	; (8002044 <HAL_UART_MspInit+0x110>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	37b8      	adds	r7, #184	; 0xb8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40004800 	.word	0x40004800
 800203c:	40021000 	.word	0x40021000
 8002040:	48000c00 	.word	0x48000c00
 8002044:	2000016c 	.word	0x2000016c
 8002048:	40020008 	.word	0x40020008

0800204c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <NMI_Handler+0x4>

08002052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <HardFault_Handler+0x4>

08002058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <MemManage_Handler+0x4>

0800205e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <BusFault_Handler+0x4>

08002064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <UsageFault_Handler+0x4>

0800206a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002098:	f000 f8aa 	bl	80021f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}

080020a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80020a4:	2001      	movs	r0, #1
 80020a6:	f000 fe7d 	bl	8002da4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}

080020ae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80020b2:	2002      	movs	r0, #2
 80020b4:	f000 fe76 	bl	8002da4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <DMA1_Channel1_IRQHandler+0x10>)
 80020c2:	f000 fb6a 	bl	800279a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000016c 	.word	0x2000016c

080020d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <SystemInit+0x20>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <SystemInit+0x20>)
 80020dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800212c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f8:	f7ff ffea 	bl	80020d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020fc:	480c      	ldr	r0, [pc, #48]	; (8002130 <LoopForever+0x6>)
  ldr r1, =_edata
 80020fe:	490d      	ldr	r1, [pc, #52]	; (8002134 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <LoopForever+0xe>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002104:	e002      	b.n	800210c <LoopCopyDataInit>

08002106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210a:	3304      	adds	r3, #4

0800210c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800210c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002110:	d3f9      	bcc.n	8002106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002114:	4c0a      	ldr	r4, [pc, #40]	; (8002140 <LoopForever+0x16>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002118:	e001      	b.n	800211e <LoopFillZerobss>

0800211a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800211c:	3204      	adds	r2, #4

0800211e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002120:	d3fb      	bcc.n	800211a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002122:	f004 fca3 	bl	8006a6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002126:	f7fe fe1b 	bl	8000d60 <main>

0800212a <LoopForever>:

LoopForever:
    b LoopForever
 800212a:	e7fe      	b.n	800212a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800212c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002134:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002138:	08006b5c 	.word	0x08006b5c
  ldr r2, =_sbss
 800213c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002140:	2000020c 	.word	0x2000020c

08002144 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002144:	e7fe      	b.n	8002144 <ADC1_IRQHandler>

08002146 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002150:	2003      	movs	r0, #3
 8002152:	f000 f961 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002156:	2000      	movs	r0, #0
 8002158:	f000 f80e 	bl	8002178 <HAL_InitTick>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	71fb      	strb	r3, [r7, #7]
 8002166:	e001      	b.n	800216c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002168:	f7ff fe5e 	bl	8001e28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800216c:	79fb      	ldrb	r3, [r7, #7]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002184:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <HAL_InitTick+0x6c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d023      	beq.n	80021d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800218c:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <HAL_InitTick+0x70>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HAL_InitTick+0x6c>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219a:	fbb3 f3f1 	udiv	r3, r3, r1
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f96d 	bl	8002482 <HAL_SYSTICK_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10f      	bne.n	80021ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d809      	bhi.n	80021c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b4:	2200      	movs	r2, #0
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f000 f937 	bl	800242e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021c0:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_InitTick+0x74>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e007      	b.n	80021d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e004      	b.n	80021d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
 80021d2:	e001      	b.n	80021d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000000c 	.word	0x2000000c
 80021e8:	20000004 	.word	0x20000004
 80021ec:	20000008 	.word	0x20000008

080021f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_IncTick+0x20>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x24>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <HAL_IncTick+0x24>)
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	2000000c 	.word	0x2000000c
 8002214:	20000208 	.word	0x20000208

08002218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return uwTick;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <HAL_GetTick+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000208 	.word	0x20000208

08002230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff ffee 	bl	8002218 <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d005      	beq.n	8002256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_Delay+0x44>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002256:	bf00      	nop
 8002258:	f7ff ffde 	bl	8002218 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	d8f7      	bhi.n	8002258 <HAL_Delay+0x28>
  {
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	2000000c 	.word	0x2000000c

08002278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	db0b      	blt.n	8002306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4907      	ldr	r1, [pc, #28]	; (8002314 <__NVIC_EnableIRQ+0x38>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2001      	movs	r0, #1
 80022fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	; (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	; (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e4:	d301      	bcc.n	80023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <SysTick_Config+0x40>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f2:	210f      	movs	r1, #15
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f7ff ff8e 	bl	8002318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <SysTick_Config+0x40>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <SysTick_Config+0x40>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff29 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff3e 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff8e 	bl	800236c <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5d 	bl	8002318 <__NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff31 	bl	80022dc <__NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffa2 	bl	80023d4 <SysTick_Config>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e08d      	b.n	80025ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b47      	ldr	r3, [pc, #284]	; (80025d4 <HAL_DMA_Init+0x138>)
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d80f      	bhi.n	80024da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	4b45      	ldr	r3, [pc, #276]	; (80025d8 <HAL_DMA_Init+0x13c>)
 80024c2:	4413      	add	r3, r2
 80024c4:	4a45      	ldr	r2, [pc, #276]	; (80025dc <HAL_DMA_Init+0x140>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	009a      	lsls	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a42      	ldr	r2, [pc, #264]	; (80025e0 <HAL_DMA_Init+0x144>)
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
 80024d8:	e00e      	b.n	80024f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	4b40      	ldr	r3, [pc, #256]	; (80025e4 <HAL_DMA_Init+0x148>)
 80024e2:	4413      	add	r3, r2
 80024e4:	4a3d      	ldr	r2, [pc, #244]	; (80025dc <HAL_DMA_Init+0x140>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	009a      	lsls	r2, r3, #2
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a3c      	ldr	r2, [pc, #240]	; (80025e8 <HAL_DMA_Init+0x14c>)
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800250e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002512:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800251c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fa1e 	bl	800298c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002558:	d102      	bne.n	8002560 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002574:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d010      	beq.n	80025a0 <HAL_DMA_Init+0x104>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b04      	cmp	r3, #4
 8002584:	d80c      	bhi.n	80025a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fa3e 	bl	8002a08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	e008      	b.n	80025b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40020407 	.word	0x40020407
 80025d8:	bffdfff8 	.word	0xbffdfff8
 80025dc:	cccccccd 	.word	0xcccccccd
 80025e0:	40020000 	.word	0x40020000
 80025e4:	bffdfbf8 	.word	0xbffdfbf8
 80025e8:	40020400 	.word	0x40020400

080025ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_DMA_Start_IT+0x20>
 8002608:	2302      	movs	r3, #2
 800260a:	e066      	b.n	80026da <HAL_DMA_Start_IT+0xee>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d155      	bne.n	80026cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0201 	bic.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 f963 	bl	8002910 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 020e 	orr.w	r2, r2, #14
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e00f      	b.n	8002684 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0204 	bic.w	r2, r2, #4
 8002672:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 020a 	orr.w	r2, r2, #10
 8002682:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d007      	beq.n	80026ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 0201 	orr.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	e005      	b.n	80026d8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80026d4:	2302      	movs	r3, #2
 80026d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d008      	beq.n	800270c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2204      	movs	r2, #4
 80026fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e040      	b.n	800278e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 020e 	bic.w	r2, r2, #14
 800271a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800272a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f003 021c 	and.w	r2, r3, #28
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	2101      	movs	r1, #1
 800274a:	fa01 f202 	lsl.w	r2, r1, r2
 800274e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002758:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00c      	beq.n	800277c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002770:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800277a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800278c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f003 031c 	and.w	r3, r3, #28
 80027ba:	2204      	movs	r2, #4
 80027bc:	409a      	lsls	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d026      	beq.n	8002814 <HAL_DMA_IRQHandler+0x7a>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d021      	beq.n	8002814 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d107      	bne.n	80027ee <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0204 	bic.w	r2, r2, #4
 80027ec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	f003 021c 	and.w	r2, r3, #28
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	2104      	movs	r1, #4
 80027fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002800:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	2b00      	cmp	r3, #0
 8002808:	d071      	beq.n	80028ee <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002812:	e06c      	b.n	80028ee <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	f003 031c 	and.w	r3, r3, #28
 800281c:	2202      	movs	r2, #2
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d02e      	beq.n	8002886 <HAL_DMA_IRQHandler+0xec>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d029      	beq.n	8002886 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10b      	bne.n	8002858 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 020a 	bic.w	r2, r2, #10
 800284e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	f003 021c 	and.w	r2, r3, #28
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	2102      	movs	r1, #2
 8002866:	fa01 f202 	lsl.w	r2, r1, r2
 800286a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d038      	beq.n	80028ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002884:	e033      	b.n	80028ee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f003 031c 	and.w	r3, r3, #28
 800288e:	2208      	movs	r2, #8
 8002890:	409a      	lsls	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d02a      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x156>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d025      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 020e 	bic.w	r2, r2, #14
 80028b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	f003 021c 	and.w	r2, r3, #28
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	2101      	movs	r1, #1
 80028c2:	fa01 f202 	lsl.w	r2, r1, r2
 80028c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d004      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028ee:	bf00      	nop
 80028f0:	bf00      	nop
}
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002926:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292c:	2b00      	cmp	r3, #0
 800292e:	d004      	beq.n	800293a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002938:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	f003 021c 	and.w	r2, r3, #28
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	2101      	movs	r1, #1
 8002948:	fa01 f202 	lsl.w	r2, r1, r2
 800294c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b10      	cmp	r3, #16
 800295c:	d108      	bne.n	8002970 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800296e:	e007      	b.n	8002980 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	60da      	str	r2, [r3, #12]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800299c:	429a      	cmp	r2, r3
 800299e:	d80a      	bhi.n	80029b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029ac:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6493      	str	r3, [r2, #72]	; 0x48
 80029b4:	e007      	b.n	80029c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	009a      	lsls	r2, r3, #2
 80029be:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80029c0:	4413      	add	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	3b08      	subs	r3, #8
 80029ce:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80029dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	2201      	movs	r2, #1
 80029e6:	409a      	lsls	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40020407 	.word	0x40020407
 80029fc:	4002081c 	.word	0x4002081c
 8002a00:	cccccccd 	.word	0xcccccccd
 8002a04:	40020880 	.word	0x40020880

08002a08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	461a      	mov	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a2a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2201      	movs	r2, #1
 8002a36:	409a      	lsls	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	1000823f 	.word	0x1000823f
 8002a4c:	40020940 	.word	0x40020940

08002a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5e:	e166      	b.n	8002d2e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2101      	movs	r1, #1
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8158 	beq.w	8002d28 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d005      	beq.n	8002a90 <HAL_GPIO_Init+0x40>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d130      	bne.n	8002af2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f003 0201 	and.w	r2, r3, #1
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d017      	beq.n	8002b2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	2203      	movs	r2, #3
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d123      	bne.n	8002b82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	08da      	lsrs	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3208      	adds	r2, #8
 8002b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	220f      	movs	r2, #15
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	08da      	lsrs	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3208      	adds	r2, #8
 8002b7c:	6939      	ldr	r1, [r7, #16]
 8002b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0203 	and.w	r2, r3, #3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 80b2 	beq.w	8002d28 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc4:	4b61      	ldr	r3, [pc, #388]	; (8002d4c <HAL_GPIO_Init+0x2fc>)
 8002bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc8:	4a60      	ldr	r2, [pc, #384]	; (8002d4c <HAL_GPIO_Init+0x2fc>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6613      	str	r3, [r2, #96]	; 0x60
 8002bd0:	4b5e      	ldr	r3, [pc, #376]	; (8002d4c <HAL_GPIO_Init+0x2fc>)
 8002bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bdc:	4a5c      	ldr	r2, [pc, #368]	; (8002d50 <HAL_GPIO_Init+0x300>)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c06:	d02b      	beq.n	8002c60 <HAL_GPIO_Init+0x210>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d025      	beq.n	8002c5c <HAL_GPIO_Init+0x20c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a51      	ldr	r2, [pc, #324]	; (8002d58 <HAL_GPIO_Init+0x308>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d01f      	beq.n	8002c58 <HAL_GPIO_Init+0x208>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a50      	ldr	r2, [pc, #320]	; (8002d5c <HAL_GPIO_Init+0x30c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d019      	beq.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a4f      	ldr	r2, [pc, #316]	; (8002d60 <HAL_GPIO_Init+0x310>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d013      	beq.n	8002c50 <HAL_GPIO_Init+0x200>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a4e      	ldr	r2, [pc, #312]	; (8002d64 <HAL_GPIO_Init+0x314>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00d      	beq.n	8002c4c <HAL_GPIO_Init+0x1fc>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a4d      	ldr	r2, [pc, #308]	; (8002d68 <HAL_GPIO_Init+0x318>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d007      	beq.n	8002c48 <HAL_GPIO_Init+0x1f8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a4c      	ldr	r2, [pc, #304]	; (8002d6c <HAL_GPIO_Init+0x31c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_GPIO_Init+0x1f4>
 8002c40:	2307      	movs	r3, #7
 8002c42:	e00e      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c44:	2308      	movs	r3, #8
 8002c46:	e00c      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c48:	2306      	movs	r3, #6
 8002c4a:	e00a      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c4c:	2305      	movs	r3, #5
 8002c4e:	e008      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c50:	2304      	movs	r3, #4
 8002c52:	e006      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c54:	2303      	movs	r3, #3
 8002c56:	e004      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e002      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <HAL_GPIO_Init+0x212>
 8002c60:	2300      	movs	r3, #0
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	f002 0203 	and.w	r2, r2, #3
 8002c68:	0092      	lsls	r2, r2, #2
 8002c6a:	4093      	lsls	r3, r2
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c72:	4937      	ldr	r1, [pc, #220]	; (8002d50 <HAL_GPIO_Init+0x300>)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	3302      	adds	r3, #2
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c80:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <HAL_GPIO_Init+0x320>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ca4:	4a32      	ldr	r2, [pc, #200]	; (8002d70 <HAL_GPIO_Init+0x320>)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002caa:	4b31      	ldr	r3, [pc, #196]	; (8002d70 <HAL_GPIO_Init+0x320>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cce:	4a28      	ldr	r2, [pc, #160]	; (8002d70 <HAL_GPIO_Init+0x320>)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cd4:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <HAL_GPIO_Init+0x320>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cf8:	4a1d      	ldr	r2, [pc, #116]	; (8002d70 <HAL_GPIO_Init+0x320>)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <HAL_GPIO_Init+0x320>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d22:	4a13      	ldr	r2, [pc, #76]	; (8002d70 <HAL_GPIO_Init+0x320>)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f47f ae91 	bne.w	8002a60 <HAL_GPIO_Init+0x10>
  }
}
 8002d3e:	bf00      	nop
 8002d40:	bf00      	nop
 8002d42:	371c      	adds	r7, #28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40010000 	.word	0x40010000
 8002d54:	48000400 	.word	0x48000400
 8002d58:	48000800 	.word	0x48000800
 8002d5c:	48000c00 	.word	0x48000c00
 8002d60:	48001000 	.word	0x48001000
 8002d64:	48001400 	.word	0x48001400
 8002d68:	48001800 	.word	0x48001800
 8002d6c:	48001c00 	.word	0x48001c00
 8002d70:	40010400 	.word	0x40010400

08002d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	807b      	strh	r3, [r7, #2]
 8002d80:	4613      	mov	r3, r2
 8002d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d84:	787b      	ldrb	r3, [r7, #1]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d8a:	887a      	ldrh	r2, [r7, #2]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d90:	e002      	b.n	8002d98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dae:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d006      	beq.n	8002dc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dba:	4a05      	ldr	r2, [pc, #20]	; (8002dd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe fe8c 	bl	8001ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40010400 	.word	0x40010400

08002dd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de4:	d102      	bne.n	8002dec <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dea:	e00b      	b.n	8002e04 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfa:	d102      	bne.n	8002e02 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e00:	e000      	b.n	8002e04 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002e02:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40007000 	.word	0x40007000

08002e14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d141      	bne.n	8002ea6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e22:	4b4b      	ldr	r3, [pc, #300]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2e:	d131      	bne.n	8002e94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e30:	4b47      	ldr	r3, [pc, #284]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e36:	4a46      	ldr	r2, [pc, #280]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e40:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e48:	4a41      	ldr	r2, [pc, #260]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e50:	4b40      	ldr	r3, [pc, #256]	; (8002f54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2232      	movs	r2, #50	; 0x32
 8002e56:	fb02 f303 	mul.w	r3, r2, r3
 8002e5a:	4a3f      	ldr	r2, [pc, #252]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	0c9b      	lsrs	r3, r3, #18
 8002e62:	3301      	adds	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e66:	e002      	b.n	8002e6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e6e:	4b38      	ldr	r3, [pc, #224]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7a:	d102      	bne.n	8002e82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f2      	bne.n	8002e68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e82:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8e:	d158      	bne.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e057      	b.n	8002f44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e94:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e9a:	4a2d      	ldr	r2, [pc, #180]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ea4:	e04d      	b.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eac:	d141      	bne.n	8002f32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eae:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eba:	d131      	bne.n	8002f20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ebc:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ec2:	4a23      	ldr	r2, [pc, #140]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ecc:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ed4:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002edc:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2232      	movs	r2, #50	; 0x32
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	4a1c      	ldr	r2, [pc, #112]	; (8002f58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	0c9b      	lsrs	r3, r3, #18
 8002eee:	3301      	adds	r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ef2:	e002      	b.n	8002efa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f06:	d102      	bne.n	8002f0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f2      	bne.n	8002ef4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f1a:	d112      	bne.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e011      	b.n	8002f44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f26:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f30:	e007      	b.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f32:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f3a:	4a05      	ldr	r2, [pc, #20]	; (8002f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f40:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	40007000 	.word	0x40007000
 8002f54:	20000004 	.word	0x20000004
 8002f58:	431bde83 	.word	0x431bde83

08002f5c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4a04      	ldr	r2, [pc, #16]	; (8002f78 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f6a:	6053      	str	r3, [r2, #4]
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40007000 	.word	0x40007000

08002f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f000 bc08 	b.w	80037a0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f90:	4b96      	ldr	r3, [pc, #600]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f9a:	4b94      	ldr	r3, [pc, #592]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80e4 	beq.w	800317a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x4c>
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	f040 808b 	bne.w	80030d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	f040 8087 	bne.w	80030d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fc8:	4b88      	ldr	r3, [pc, #544]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x64>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e3df      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1a      	ldr	r2, [r3, #32]
 8002fe4:	4b81      	ldr	r3, [pc, #516]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d004      	beq.n	8002ffa <HAL_RCC_OscConfig+0x7e>
 8002ff0:	4b7e      	ldr	r3, [pc, #504]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff8:	e005      	b.n	8003006 <HAL_RCC_OscConfig+0x8a>
 8002ffa:	4b7c      	ldr	r3, [pc, #496]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8002ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003006:	4293      	cmp	r3, r2
 8003008:	d223      	bcs.n	8003052 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fdcc 	bl	8003bac <RCC_SetFlashLatencyFromMSIRange>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e3c0      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800301e:	4b73      	ldr	r3, [pc, #460]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a72      	ldr	r2, [pc, #456]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	4b70      	ldr	r3, [pc, #448]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	496d      	ldr	r1, [pc, #436]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003038:	4313      	orrs	r3, r2
 800303a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800303c:	4b6b      	ldr	r3, [pc, #428]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	4968      	ldr	r1, [pc, #416]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800304c:	4313      	orrs	r3, r2
 800304e:	604b      	str	r3, [r1, #4]
 8003050:	e025      	b.n	800309e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003052:	4b66      	ldr	r3, [pc, #408]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a65      	ldr	r2, [pc, #404]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003058:	f043 0308 	orr.w	r3, r3, #8
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	4b63      	ldr	r3, [pc, #396]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	4960      	ldr	r1, [pc, #384]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003070:	4b5e      	ldr	r3, [pc, #376]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	495b      	ldr	r1, [pc, #364]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003080:	4313      	orrs	r3, r2
 8003082:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fd8c 	bl	8003bac <RCC_SetFlashLatencyFromMSIRange>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e380      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800309e:	f000 fcc1 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b51      	ldr	r3, [pc, #324]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	4950      	ldr	r1, [pc, #320]	; (80031f0 <HAL_RCC_OscConfig+0x274>)
 80030b0:	5ccb      	ldrb	r3, [r1, r3]
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ba:	4a4e      	ldr	r2, [pc, #312]	; (80031f4 <HAL_RCC_OscConfig+0x278>)
 80030bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030be:	4b4e      	ldr	r3, [pc, #312]	; (80031f8 <HAL_RCC_OscConfig+0x27c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff f858 	bl	8002178 <HAL_InitTick>
 80030c8:	4603      	mov	r3, r0
 80030ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d052      	beq.n	8003178 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	e364      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d032      	beq.n	8003144 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030de:	4b43      	ldr	r3, [pc, #268]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a42      	ldr	r2, [pc, #264]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030ea:	f7ff f895 	bl	8002218 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030f2:	f7ff f891 	bl	8002218 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e34d      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003104:	4b39      	ldr	r3, [pc, #228]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0f0      	beq.n	80030f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003110:	4b36      	ldr	r3, [pc, #216]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a35      	ldr	r2, [pc, #212]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003116:	f043 0308 	orr.w	r3, r3, #8
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b33      	ldr	r3, [pc, #204]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4930      	ldr	r1, [pc, #192]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800312e:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	492b      	ldr	r1, [pc, #172]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800313e:	4313      	orrs	r3, r2
 8003140:	604b      	str	r3, [r1, #4]
 8003142:	e01a      	b.n	800317a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003144:	4b29      	ldr	r3, [pc, #164]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a28      	ldr	r2, [pc, #160]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800314a:	f023 0301 	bic.w	r3, r3, #1
 800314e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003150:	f7ff f862 	bl	8002218 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003158:	f7ff f85e 	bl	8002218 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e31a      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800316a:	4b20      	ldr	r3, [pc, #128]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x1dc>
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003178:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d073      	beq.n	800326e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d005      	beq.n	8003198 <HAL_RCC_OscConfig+0x21c>
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b0c      	cmp	r3, #12
 8003190:	d10e      	bne.n	80031b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d10b      	bne.n	80031b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003198:	4b14      	ldr	r3, [pc, #80]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d063      	beq.n	800326c <HAL_RCC_OscConfig+0x2f0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d15f      	bne.n	800326c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e2f7      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b8:	d106      	bne.n	80031c8 <HAL_RCC_OscConfig+0x24c>
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e025      	b.n	8003214 <HAL_RCC_OscConfig+0x298>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d0:	d114      	bne.n	80031fc <HAL_RCC_OscConfig+0x280>
 80031d2:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a05      	ldr	r2, [pc, #20]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80031d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b03      	ldr	r3, [pc, #12]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a02      	ldr	r2, [pc, #8]	; (80031ec <HAL_RCC_OscConfig+0x270>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e013      	b.n	8003214 <HAL_RCC_OscConfig+0x298>
 80031ec:	40021000 	.word	0x40021000
 80031f0:	08006adc 	.word	0x08006adc
 80031f4:	20000004 	.word	0x20000004
 80031f8:	20000008 	.word	0x20000008
 80031fc:	4ba0      	ldr	r3, [pc, #640]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a9f      	ldr	r2, [pc, #636]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	4b9d      	ldr	r3, [pc, #628]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a9c      	ldr	r2, [pc, #624]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800320e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d013      	beq.n	8003244 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fe fffc 	bl	8002218 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003224:	f7fe fff8 	bl	8002218 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	; 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e2b4      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003236:	4b92      	ldr	r3, [pc, #584]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x2a8>
 8003242:	e014      	b.n	800326e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7fe ffe8 	bl	8002218 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800324c:	f7fe ffe4 	bl	8002218 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e2a0      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800325e:	4b88      	ldr	r3, [pc, #544]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x2d0>
 800326a:	e000      	b.n	800326e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d060      	beq.n	800333c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2b04      	cmp	r3, #4
 800327e:	d005      	beq.n	800328c <HAL_RCC_OscConfig+0x310>
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2b0c      	cmp	r3, #12
 8003284:	d119      	bne.n	80032ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d116      	bne.n	80032ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800328c:	4b7c      	ldr	r3, [pc, #496]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_OscConfig+0x328>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e27d      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a4:	4b76      	ldr	r3, [pc, #472]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	061b      	lsls	r3, r3, #24
 80032b2:	4973      	ldr	r1, [pc, #460]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032b8:	e040      	b.n	800333c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d023      	beq.n	800330a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c2:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a6e      	ldr	r2, [pc, #440]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ce:	f7fe ffa3 	bl	8002218 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d6:	f7fe ff9f 	bl	8002218 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e25b      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e8:	4b65      	ldr	r3, [pc, #404]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f4:	4b62      	ldr	r3, [pc, #392]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	061b      	lsls	r3, r3, #24
 8003302:	495f      	ldr	r1, [pc, #380]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
 8003308:	e018      	b.n	800333c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330a:	4b5d      	ldr	r3, [pc, #372]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a5c      	ldr	r2, [pc, #368]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7fe ff7f 	bl	8002218 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331e:	f7fe ff7b 	bl	8002218 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e237      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003330:	4b53      	ldr	r3, [pc, #332]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f0      	bne.n	800331e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d03c      	beq.n	80033c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01c      	beq.n	800338a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003350:	4b4b      	ldr	r3, [pc, #300]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003356:	4a4a      	ldr	r2, [pc, #296]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fe ff5a 	bl	8002218 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003368:	f7fe ff56 	bl	8002218 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e212      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800337a:	4b41      	ldr	r3, [pc, #260]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800337c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ef      	beq.n	8003368 <HAL_RCC_OscConfig+0x3ec>
 8003388:	e01b      	b.n	80033c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800338a:	4b3d      	ldr	r3, [pc, #244]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800338c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003390:	4a3b      	ldr	r2, [pc, #236]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003392:	f023 0301 	bic.w	r3, r3, #1
 8003396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339a:	f7fe ff3d 	bl	8002218 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a2:	f7fe ff39 	bl	8002218 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e1f5      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b4:	4b32      	ldr	r3, [pc, #200]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80033b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ef      	bne.n	80033a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80a6 	beq.w	800351c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d0:	2300      	movs	r3, #0
 80033d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033d4:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80033d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10d      	bne.n	80033fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e0:	4b27      	ldr	r3, [pc, #156]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80033e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e4:	4a26      	ldr	r2, [pc, #152]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80033e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ea:	6593      	str	r3, [r2, #88]	; 0x58
 80033ec:	4b24      	ldr	r3, [pc, #144]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f8:	2301      	movs	r3, #1
 80033fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033fc:	4b21      	ldr	r3, [pc, #132]	; (8003484 <HAL_RCC_OscConfig+0x508>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d118      	bne.n	800343a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003408:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <HAL_RCC_OscConfig+0x508>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <HAL_RCC_OscConfig+0x508>)
 800340e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003412:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003414:	f7fe ff00 	bl	8002218 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341c:	f7fe fefc 	bl	8002218 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e1b8      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <HAL_RCC_OscConfig+0x508>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d108      	bne.n	8003454 <HAL_RCC_OscConfig+0x4d8>
 8003442:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	4a0d      	ldr	r2, [pc, #52]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003452:	e029      	b.n	80034a8 <HAL_RCC_OscConfig+0x52c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d115      	bne.n	8003488 <HAL_RCC_OscConfig+0x50c>
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	4a07      	ldr	r2, [pc, #28]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003464:	f043 0304 	orr.w	r3, r3, #4
 8003468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	4a03      	ldr	r2, [pc, #12]	; (8003480 <HAL_RCC_OscConfig+0x504>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800347c:	e014      	b.n	80034a8 <HAL_RCC_OscConfig+0x52c>
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	40007000 	.word	0x40007000
 8003488:	4b9d      	ldr	r3, [pc, #628]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	4a9c      	ldr	r2, [pc, #624]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003498:	4b99      	ldr	r3, [pc, #612]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800349e:	4a98      	ldr	r2, [pc, #608]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 80034a0:	f023 0304 	bic.w	r3, r3, #4
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d016      	beq.n	80034de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fe feb2 	bl	8002218 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7fe feae 	bl	8002218 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e168      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ce:	4b8c      	ldr	r3, [pc, #560]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ed      	beq.n	80034b8 <HAL_RCC_OscConfig+0x53c>
 80034dc:	e015      	b.n	800350a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034de:	f7fe fe9b 	bl	8002218 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fe fe97 	bl	8002218 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e151      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034fc:	4b80      	ldr	r3, [pc, #512]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1ed      	bne.n	80034e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800350a:	7ffb      	ldrb	r3, [r7, #31]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d105      	bne.n	800351c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003510:	4b7b      	ldr	r3, [pc, #492]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	4a7a      	ldr	r2, [pc, #488]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 8003516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d03c      	beq.n	80035a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01c      	beq.n	800356a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003530:	4b73      	ldr	r3, [pc, #460]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 8003532:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003536:	4a72      	ldr	r2, [pc, #456]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fe fe6a 	bl	8002218 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003548:	f7fe fe66 	bl	8002218 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e122      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800355a:	4b69      	ldr	r3, [pc, #420]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 800355c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0ef      	beq.n	8003548 <HAL_RCC_OscConfig+0x5cc>
 8003568:	e01b      	b.n	80035a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800356a:	4b65      	ldr	r3, [pc, #404]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 800356c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003570:	4a63      	ldr	r2, [pc, #396]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357a:	f7fe fe4d 	bl	8002218 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003582:	f7fe fe49 	bl	8002218 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e105      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003594:	4b5a      	ldr	r3, [pc, #360]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 8003596:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1ef      	bne.n	8003582 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80f9 	beq.w	800379e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	f040 80cf 	bne.w	8003754 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035b6:	4b52      	ldr	r3, [pc, #328]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 0203 	and.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d12c      	bne.n	8003624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	3b01      	subs	r3, #1
 80035d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d8:	429a      	cmp	r2, r3
 80035da:	d123      	bne.n	8003624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d11b      	bne.n	8003624 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d113      	bne.n	8003624 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	3b01      	subs	r3, #1
 800360a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d109      	bne.n	8003624 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	3b01      	subs	r3, #1
 800361e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d071      	beq.n	8003708 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d068      	beq.n	80036fc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800362a:	4b35      	ldr	r3, [pc, #212]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d105      	bne.n	8003642 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003636:	4b32      	ldr	r3, [pc, #200]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0ac      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003646:	4b2e      	ldr	r3, [pc, #184]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a2d      	ldr	r2, [pc, #180]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 800364c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003650:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003652:	f7fe fde1 	bl	8002218 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365a:	f7fe fddd 	bl	8002218 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e099      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800366c:	4b24      	ldr	r3, [pc, #144]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f0      	bne.n	800365a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003678:	4b21      	ldr	r3, [pc, #132]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCC_OscConfig+0x788>)
 800367e:	4013      	ands	r3, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003688:	3a01      	subs	r2, #1
 800368a:	0112      	lsls	r2, r2, #4
 800368c:	4311      	orrs	r1, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003692:	0212      	lsls	r2, r2, #8
 8003694:	4311      	orrs	r1, r2
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800369a:	0852      	lsrs	r2, r2, #1
 800369c:	3a01      	subs	r2, #1
 800369e:	0552      	lsls	r2, r2, #21
 80036a0:	4311      	orrs	r1, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036a6:	0852      	lsrs	r2, r2, #1
 80036a8:	3a01      	subs	r2, #1
 80036aa:	0652      	lsls	r2, r2, #25
 80036ac:	4311      	orrs	r1, r2
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036b2:	06d2      	lsls	r2, r2, #27
 80036b4:	430a      	orrs	r2, r1
 80036b6:	4912      	ldr	r1, [pc, #72]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036bc:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0f      	ldr	r2, [pc, #60]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 80036c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4a0c      	ldr	r2, [pc, #48]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 80036ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036d4:	f7fe fda0 	bl	8002218 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036dc:	f7fe fd9c 	bl	8002218 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e058      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ee:	4b04      	ldr	r3, [pc, #16]	; (8003700 <HAL_RCC_OscConfig+0x784>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036fa:	e050      	b.n	800379e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e04f      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
 8003700:	40021000 	.word	0x40021000
 8003704:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003708:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <HAL_RCC_OscConfig+0x82c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d144      	bne.n	800379e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003714:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <HAL_RCC_OscConfig+0x82c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a23      	ldr	r2, [pc, #140]	; (80037a8 <HAL_RCC_OscConfig+0x82c>)
 800371a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800371e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003720:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <HAL_RCC_OscConfig+0x82c>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4a20      	ldr	r2, [pc, #128]	; (80037a8 <HAL_RCC_OscConfig+0x82c>)
 8003726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800372c:	f7fe fd74 	bl	8002218 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe fd70 	bl	8002218 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e02c      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <HAL_RCC_OscConfig+0x82c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x7b8>
 8003752:	e024      	b.n	800379e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b0c      	cmp	r3, #12
 8003758:	d01f      	beq.n	800379a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <HAL_RCC_OscConfig+0x82c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a12      	ldr	r2, [pc, #72]	; (80037a8 <HAL_RCC_OscConfig+0x82c>)
 8003760:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003766:	f7fe fd57 	bl	8002218 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376e:	f7fe fd53 	bl	8002218 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e00f      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_RCC_OscConfig+0x82c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f0      	bne.n	800376e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCC_OscConfig+0x82c>)
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	4905      	ldr	r1, [pc, #20]	; (80037a8 <HAL_RCC_OscConfig+0x82c>)
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_RCC_OscConfig+0x830>)
 8003794:	4013      	ands	r3, r2
 8003796:	60cb      	str	r3, [r1, #12]
 8003798:	e001      	b.n	800379e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3720      	adds	r7, #32
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000
 80037ac:	feeefffc 	.word	0xfeeefffc

080037b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e11d      	b.n	8003a04 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c8:	4b90      	ldr	r3, [pc, #576]	; (8003a0c <HAL_RCC_ClockConfig+0x25c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d910      	bls.n	80037f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b8d      	ldr	r3, [pc, #564]	; (8003a0c <HAL_RCC_ClockConfig+0x25c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 020f 	bic.w	r2, r3, #15
 80037de:	498b      	ldr	r1, [pc, #556]	; (8003a0c <HAL_RCC_ClockConfig+0x25c>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b89      	ldr	r3, [pc, #548]	; (8003a0c <HAL_RCC_ClockConfig+0x25c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e105      	b.n	8003a04 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d010      	beq.n	8003826 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	4b81      	ldr	r3, [pc, #516]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003810:	429a      	cmp	r2, r3
 8003812:	d908      	bls.n	8003826 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003814:	4b7e      	ldr	r3, [pc, #504]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	497b      	ldr	r1, [pc, #492]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d079      	beq.n	8003926 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b03      	cmp	r3, #3
 8003838:	d11e      	bne.n	8003878 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800383a:	4b75      	ldr	r3, [pc, #468]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e0dc      	b.n	8003a04 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800384a:	f000 fa09 	bl	8003c60 <RCC_GetSysClockFreqFromPLLSource>
 800384e:	4603      	mov	r3, r0
 8003850:	4a70      	ldr	r2, [pc, #448]	; (8003a14 <HAL_RCC_ClockConfig+0x264>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d946      	bls.n	80038e4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003856:	4b6e      	ldr	r3, [pc, #440]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d140      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003862:	4b6b      	ldr	r3, [pc, #428]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800386a:	4a69      	ldr	r2, [pc, #420]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 800386c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003870:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	e035      	b.n	80038e4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d107      	bne.n	8003890 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003880:	4b63      	ldr	r3, [pc, #396]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d115      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0b9      	b.n	8003a04 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d107      	bne.n	80038a8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003898:	4b5d      	ldr	r3, [pc, #372]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d109      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0ad      	b.n	8003a04 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a8:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0a5      	b.n	8003a04 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80038b8:	f000 f8b4 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80038bc:	4603      	mov	r3, r0
 80038be:	4a55      	ldr	r2, [pc, #340]	; (8003a14 <HAL_RCC_ClockConfig+0x264>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d90f      	bls.n	80038e4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038c4:	4b52      	ldr	r3, [pc, #328]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038d0:	4b4f      	ldr	r3, [pc, #316]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d8:	4a4d      	ldr	r2, [pc, #308]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 80038da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038de:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038e0:	2380      	movs	r3, #128	; 0x80
 80038e2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038e4:	4b4a      	ldr	r3, [pc, #296]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f023 0203 	bic.w	r2, r3, #3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4947      	ldr	r1, [pc, #284]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f6:	f7fe fc8f 	bl	8002218 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038fe:	f7fe fc8b 	bl	8002218 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	; 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e077      	b.n	8003a04 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003914:	4b3e      	ldr	r3, [pc, #248]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 020c 	and.w	r2, r3, #12
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	429a      	cmp	r2, r3
 8003924:	d1eb      	bne.n	80038fe <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b80      	cmp	r3, #128	; 0x80
 800392a:	d105      	bne.n	8003938 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800392c:	4b38      	ldr	r3, [pc, #224]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a37      	ldr	r2, [pc, #220]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 8003932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003936:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d010      	beq.n	8003966 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	4b31      	ldr	r3, [pc, #196]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003950:	429a      	cmp	r2, r3
 8003952:	d208      	bcs.n	8003966 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003954:	4b2e      	ldr	r3, [pc, #184]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	492b      	ldr	r1, [pc, #172]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 8003962:	4313      	orrs	r3, r2
 8003964:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003966:	4b29      	ldr	r3, [pc, #164]	; (8003a0c <HAL_RCC_ClockConfig+0x25c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d210      	bcs.n	8003996 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003974:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <HAL_RCC_ClockConfig+0x25c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 020f 	bic.w	r2, r3, #15
 800397c:	4923      	ldr	r1, [pc, #140]	; (8003a0c <HAL_RCC_ClockConfig+0x25c>)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003984:	4b21      	ldr	r3, [pc, #132]	; (8003a0c <HAL_RCC_ClockConfig+0x25c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d001      	beq.n	8003996 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e036      	b.n	8003a04 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a2:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	4918      	ldr	r1, [pc, #96]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d009      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c0:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4910      	ldr	r1, [pc, #64]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039d4:	f000 f826 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <HAL_RCC_ClockConfig+0x260>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	490c      	ldr	r1, [pc, #48]	; (8003a18 <HAL_RCC_ClockConfig+0x268>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
 80039f0:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <HAL_RCC_ClockConfig+0x26c>)
 80039f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_RCC_ClockConfig+0x270>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe fbbd 	bl	8002178 <HAL_InitTick>
 80039fe:	4603      	mov	r3, r0
 8003a00:	73fb      	strb	r3, [r7, #15]

  return status;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40022000 	.word	0x40022000
 8003a10:	40021000 	.word	0x40021000
 8003a14:	04c4b400 	.word	0x04c4b400
 8003a18:	08006adc 	.word	0x08006adc
 8003a1c:	20000004 	.word	0x20000004
 8003a20:	20000008 	.word	0x20000008

08003a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b089      	sub	sp, #36	; 0x24
 8003a28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a32:	4b3e      	ldr	r3, [pc, #248]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a3c:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x34>
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b0c      	cmp	r3, #12
 8003a50:	d121      	bne.n	8003a96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d11e      	bne.n	8003a96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a58:	4b34      	ldr	r3, [pc, #208]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a64:	4b31      	ldr	r3, [pc, #196]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	e005      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a74:	4b2d      	ldr	r3, [pc, #180]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a80:	4a2b      	ldr	r2, [pc, #172]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10d      	bne.n	8003aac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d102      	bne.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a9c:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e004      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003aa8:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x114>)
 8003aaa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2b0c      	cmp	r3, #12
 8003ab0:	d134      	bne.n	8003b1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ab2:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d003      	beq.n	8003aca <HAL_RCC_GetSysClockFreq+0xa6>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d003      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xac>
 8003ac8:	e005      	b.n	8003ad6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003aca:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x110>)
 8003acc:	617b      	str	r3, [r7, #20]
      break;
 8003ace:	e005      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ad2:	617b      	str	r3, [r7, #20]
      break;
 8003ad4:	e002      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	617b      	str	r3, [r7, #20]
      break;
 8003ada:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003adc:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aea:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	fb03 f202 	mul.w	r2, r3, r2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	0e5b      	lsrs	r3, r3, #25
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b1c:	69bb      	ldr	r3, [r7, #24]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3724      	adds	r7, #36	; 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	08006af4 	.word	0x08006af4
 8003b34:	00f42400 	.word	0x00f42400
 8003b38:	007a1200 	.word	0x007a1200

08003b3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000004 	.word	0x20000004

08003b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b58:	f7ff fff0 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	0a1b      	lsrs	r3, r3, #8
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	4904      	ldr	r1, [pc, #16]	; (8003b7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b6a:	5ccb      	ldrb	r3, [r1, r3]
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	08006aec 	.word	0x08006aec

08003b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b84:	f7ff ffda 	bl	8003b3c <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0adb      	lsrs	r3, r3, #11
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4904      	ldr	r1, [pc, #16]	; (8003ba8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	08006aec 	.word	0x08006aec

08003bac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bb8:	4b27      	ldr	r3, [pc, #156]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bc4:	f7ff f906 	bl	8002dd4 <HAL_PWREx_GetVoltageRange>
 8003bc8:	6178      	str	r0, [r7, #20]
 8003bca:	e014      	b.n	8003bf6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bcc:	4b22      	ldr	r3, [pc, #136]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd8:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003be4:	f7ff f8f6 	bl	8002dd4 <HAL_PWREx_GetVoltageRange>
 8003be8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bea:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	4a1a      	ldr	r2, [pc, #104]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bfc:	d10b      	bne.n	8003c16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b80      	cmp	r3, #128	; 0x80
 8003c02:	d913      	bls.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2ba0      	cmp	r3, #160	; 0xa0
 8003c08:	d902      	bls.n	8003c10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	e00d      	b.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c10:	2301      	movs	r3, #1
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	e00a      	b.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b7f      	cmp	r3, #127	; 0x7f
 8003c1a:	d902      	bls.n	8003c22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	e004      	b.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b70      	cmp	r3, #112	; 0x70
 8003c26:	d101      	bne.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c28:	2301      	movs	r3, #1
 8003c2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f023 020f 	bic.w	r2, r3, #15
 8003c34:	4909      	ldr	r1, [pc, #36]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c3c:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d001      	beq.n	8003c4e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40022000 	.word	0x40022000

08003c60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c66:	4b2d      	ldr	r3, [pc, #180]	; (8003d1c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d00b      	beq.n	8003c8e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d825      	bhi.n	8003cc8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d008      	beq.n	8003c94 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d11f      	bne.n	8003cc8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c8a:	613b      	str	r3, [r7, #16]
    break;
 8003c8c:	e01f      	b.n	8003cce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003c8e:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003c90:	613b      	str	r3, [r7, #16]
    break;
 8003c92:	e01c      	b.n	8003cce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c94:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d107      	bne.n	8003cb0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ca0:	4b1e      	ldr	r3, [pc, #120]	; (8003d1c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	e005      	b.n	8003cbc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003cbc:	4a1a      	ldr	r2, [pc, #104]	; (8003d28 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc4:	613b      	str	r3, [r7, #16]
    break;
 8003cc6:	e002      	b.n	8003cce <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	613b      	str	r3, [r7, #16]
    break;
 8003ccc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	3301      	adds	r3, #1
 8003cda:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	fb03 f202 	mul.w	r2, r3, r2
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cf4:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	0e5b      	lsrs	r3, r3, #25
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003d0e:	683b      	ldr	r3, [r7, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	00f42400 	.word	0x00f42400
 8003d24:	007a1200 	.word	0x007a1200
 8003d28:	08006af4 	.word	0x08006af4

08003d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d34:	2300      	movs	r3, #0
 8003d36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d38:	2300      	movs	r3, #0
 8003d3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d040      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d4c:	2b80      	cmp	r3, #128	; 0x80
 8003d4e:	d02a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d50:	2b80      	cmp	r3, #128	; 0x80
 8003d52:	d825      	bhi.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d54:	2b60      	cmp	r3, #96	; 0x60
 8003d56:	d026      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d58:	2b60      	cmp	r3, #96	; 0x60
 8003d5a:	d821      	bhi.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d5c:	2b40      	cmp	r3, #64	; 0x40
 8003d5e:	d006      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	d81d      	bhi.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d009      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d010      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003d6c:	e018      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d6e:	4b89      	ldr	r3, [pc, #548]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	4a88      	ldr	r2, [pc, #544]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d7a:	e015      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fb02 	bl	800438c <RCCEx_PLLSAI1_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d8c:	e00c      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	3320      	adds	r3, #32
 8003d92:	2100      	movs	r1, #0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fbed 	bl	8004574 <RCCEx_PLLSAI2_Config>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d9e:	e003      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	74fb      	strb	r3, [r7, #19]
      break;
 8003da4:	e000      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003da6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10b      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dae:	4b79      	ldr	r3, [pc, #484]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003db0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003db4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dbc:	4975      	ldr	r1, [pc, #468]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003dc4:	e001      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc6:	7cfb      	ldrb	r3, [r7, #19]
 8003dc8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d047      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dde:	d030      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de4:	d82a      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dea:	d02a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003df0:	d824      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df6:	d008      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfc:	d81e      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e06:	d010      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e08:	e018      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e0a:	4b62      	ldr	r3, [pc, #392]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	4a61      	ldr	r2, [pc, #388]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e14:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e16:	e015      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fab4 	bl	800438c <RCCEx_PLLSAI1_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e28:	e00c      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3320      	adds	r3, #32
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fb9f 	bl	8004574 <RCCEx_PLLSAI2_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e3a:	e003      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	74fb      	strb	r3, [r7, #19]
      break;
 8003e40:	e000      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e4a:	4b52      	ldr	r3, [pc, #328]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	494e      	ldr	r1, [pc, #312]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e60:	e001      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e62:	7cfb      	ldrb	r3, [r7, #19]
 8003e64:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 809f 	beq.w	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e74:	2300      	movs	r3, #0
 8003e76:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e78:	4b46      	ldr	r3, [pc, #280]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00d      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e8e:	4b41      	ldr	r3, [pc, #260]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	4a40      	ldr	r2, [pc, #256]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e98:	6593      	str	r3, [r2, #88]	; 0x58
 8003e9a:	4b3e      	ldr	r3, [pc, #248]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eaa:	4b3b      	ldr	r3, [pc, #236]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a3a      	ldr	r2, [pc, #232]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eb6:	f7fe f9af 	bl	8002218 <HAL_GetTick>
 8003eba:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ebc:	e009      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ebe:	f7fe f9ab 	bl	8002218 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d902      	bls.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	74fb      	strb	r3, [r7, #19]
        break;
 8003ed0:	e005      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ed2:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0ef      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d15b      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ee4:	4b2b      	ldr	r3, [pc, #172]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eee:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d01f      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d019      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f0e:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f14:	4a1f      	ldr	r2, [pc, #124]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f1e:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	4a1b      	ldr	r2, [pc, #108]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f2e:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d016      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fe f96a 	bl	8002218 <HAL_GetTick>
 8003f44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f46:	e00b      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f48:	f7fe f966 	bl	8002218 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d902      	bls.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	74fb      	strb	r3, [r7, #19]
            break;
 8003f5e:	e006      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0ec      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003f6e:	7cfb      	ldrb	r3, [r7, #19]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10c      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f74:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f84:	4903      	ldr	r1, [pc, #12]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f8e:	7cfb      	ldrb	r3, [r7, #19]
 8003f90:	74bb      	strb	r3, [r7, #18]
 8003f92:	e005      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003f94:	40021000 	.word	0x40021000
 8003f98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	7cfb      	ldrb	r3, [r7, #19]
 8003f9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fa0:	7c7b      	ldrb	r3, [r7, #17]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d105      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa6:	4ba0      	ldr	r3, [pc, #640]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003faa:	4a9f      	ldr	r2, [pc, #636]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fbe:	4b9a      	ldr	r3, [pc, #616]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc4:	f023 0203 	bic.w	r2, r3, #3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	4996      	ldr	r1, [pc, #600]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fe0:	4b91      	ldr	r3, [pc, #580]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe6:	f023 020c 	bic.w	r2, r3, #12
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	498e      	ldr	r1, [pc, #568]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004002:	4b89      	ldr	r3, [pc, #548]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004008:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004010:	4985      	ldr	r1, [pc, #532]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004024:	4b80      	ldr	r3, [pc, #512]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004032:	497d      	ldr	r1, [pc, #500]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004046:	4b78      	ldr	r3, [pc, #480]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004054:	4974      	ldr	r1, [pc, #464]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004068:	4b6f      	ldr	r3, [pc, #444]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004076:	496c      	ldr	r1, [pc, #432]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800408a:	4b67      	ldr	r3, [pc, #412]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004090:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004098:	4963      	ldr	r1, [pc, #396]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040ac:	4b5e      	ldr	r3, [pc, #376]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ba:	495b      	ldr	r1, [pc, #364]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ce:	4b56      	ldr	r3, [pc, #344]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	4952      	ldr	r1, [pc, #328]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040f0:	4b4d      	ldr	r3, [pc, #308]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fe:	494a      	ldr	r1, [pc, #296]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004112:	4b45      	ldr	r3, [pc, #276]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	4941      	ldr	r1, [pc, #260]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004134:	4b3c      	ldr	r3, [pc, #240]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004136:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800413a:	f023 0203 	bic.w	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004142:	4939      	ldr	r1, [pc, #228]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d028      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004156:	4b34      	ldr	r3, [pc, #208]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004164:	4930      	ldr	r1, [pc, #192]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004174:	d106      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004176:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	4a2b      	ldr	r2, [pc, #172]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004180:	60d3      	str	r3, [r2, #12]
 8004182:	e011      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004188:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800418c:	d10c      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3304      	adds	r3, #4
 8004192:	2101      	movs	r1, #1
 8004194:	4618      	mov	r0, r3
 8004196:	f000 f8f9 	bl	800438c <RCCEx_PLLSAI1_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80041a4:	7cfb      	ldrb	r3, [r7, #19]
 80041a6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d04d      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041bc:	d108      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80041be:	4b1a      	ldr	r3, [pc, #104]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041c4:	4a18      	ldr	r2, [pc, #96]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041ce:	e012      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80041d0:	4b15      	ldr	r3, [pc, #84]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d6:	4a14      	ldr	r2, [pc, #80]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041dc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ee:	490e      	ldr	r1, [pc, #56]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041fe:	d106      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4a08      	ldr	r2, [pc, #32]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800420a:	60d3      	str	r3, [r2, #12]
 800420c:	e020      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004212:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004216:	d109      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4a02      	ldr	r2, [pc, #8]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800421e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004222:	60d3      	str	r3, [r2, #12]
 8004224:	e014      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004226:	bf00      	nop
 8004228:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004234:	d10c      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3304      	adds	r3, #4
 800423a:	2101      	movs	r1, #1
 800423c:	4618      	mov	r0, r3
 800423e:	f000 f8a5 	bl	800438c <RCCEx_PLLSAI1_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004246:	7cfb      	ldrb	r3, [r7, #19]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800424c:	7cfb      	ldrb	r3, [r7, #19]
 800424e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d028      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800425c:	4b4a      	ldr	r3, [pc, #296]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800426a:	4947      	ldr	r1, [pc, #284]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800427a:	d106      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427c:	4b42      	ldr	r3, [pc, #264]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a41      	ldr	r2, [pc, #260]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004286:	60d3      	str	r3, [r2, #12]
 8004288:	e011      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800428e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004292:	d10c      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	2101      	movs	r1, #1
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f876 	bl	800438c <RCCEx_PLLSAI1_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80042aa:	7cfb      	ldrb	r3, [r7, #19]
 80042ac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d01e      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042ba:	4b33      	ldr	r3, [pc, #204]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ca:	492f      	ldr	r1, [pc, #188]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3304      	adds	r3, #4
 80042e2:	2102      	movs	r1, #2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 f851 	bl	800438c <RCCEx_PLLSAI1_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042ee:	7cfb      	ldrb	r3, [r7, #19]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80042f4:	7cfb      	ldrb	r3, [r7, #19]
 80042f6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00b      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004304:	4b20      	ldr	r3, [pc, #128]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004306:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800430a:	f023 0204 	bic.w	r2, r3, #4
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004314:	491c      	ldr	r1, [pc, #112]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00b      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004328:	4b17      	ldr	r3, [pc, #92]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800432a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800432e:	f023 0218 	bic.w	r2, r3, #24
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	4913      	ldr	r1, [pc, #76]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d017      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800434c:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800434e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004352:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435c:	490a      	ldr	r1, [pc, #40]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800436a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800436e:	d105      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a04      	ldr	r2, [pc, #16]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800437a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800437c:	7cbb      	ldrb	r3, [r7, #18]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000

0800438c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800439a:	4b72      	ldr	r3, [pc, #456]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00e      	beq.n	80043c4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043a6:	4b6f      	ldr	r3, [pc, #444]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0203 	and.w	r2, r3, #3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d103      	bne.n	80043be <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
       ||
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d142      	bne.n	8004444 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
 80043c2:	e03f      	b.n	8004444 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d018      	beq.n	80043fe <RCCEx_PLLSAI1_Config+0x72>
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d825      	bhi.n	800441c <RCCEx_PLLSAI1_Config+0x90>
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d002      	beq.n	80043da <RCCEx_PLLSAI1_Config+0x4e>
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d009      	beq.n	80043ec <RCCEx_PLLSAI1_Config+0x60>
 80043d8:	e020      	b.n	800441c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043da:	4b62      	ldr	r3, [pc, #392]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d11d      	bne.n	8004422 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ea:	e01a      	b.n	8004422 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043ec:	4b5d      	ldr	r3, [pc, #372]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d116      	bne.n	8004426 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043fc:	e013      	b.n	8004426 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043fe:	4b59      	ldr	r3, [pc, #356]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10f      	bne.n	800442a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800440a:	4b56      	ldr	r3, [pc, #344]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800441a:	e006      	b.n	800442a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      break;
 8004420:	e004      	b.n	800442c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004422:	bf00      	nop
 8004424:	e002      	b.n	800442c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004426:	bf00      	nop
 8004428:	e000      	b.n	800442c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800442a:	bf00      	nop
    }

    if(status == HAL_OK)
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d108      	bne.n	8004444 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004432:	4b4c      	ldr	r3, [pc, #304]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f023 0203 	bic.w	r2, r3, #3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4949      	ldr	r1, [pc, #292]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004440:	4313      	orrs	r3, r2
 8004442:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f040 8086 	bne.w	8004558 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800444c:	4b45      	ldr	r3, [pc, #276]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a44      	ldr	r2, [pc, #272]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004452:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004456:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004458:	f7fd fede 	bl	8002218 <HAL_GetTick>
 800445c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800445e:	e009      	b.n	8004474 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004460:	f7fd feda 	bl	8002218 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d902      	bls.n	8004474 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	73fb      	strb	r3, [r7, #15]
        break;
 8004472:	e005      	b.n	8004480 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004474:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1ef      	bne.n	8004460 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d168      	bne.n	8004558 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d113      	bne.n	80044b4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800448c:	4b35      	ldr	r3, [pc, #212]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	4b35      	ldr	r3, [pc, #212]	; (8004568 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004492:	4013      	ands	r3, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6892      	ldr	r2, [r2, #8]
 8004498:	0211      	lsls	r1, r2, #8
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68d2      	ldr	r2, [r2, #12]
 800449e:	06d2      	lsls	r2, r2, #27
 80044a0:	4311      	orrs	r1, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6852      	ldr	r2, [r2, #4]
 80044a6:	3a01      	subs	r2, #1
 80044a8:	0112      	lsls	r2, r2, #4
 80044aa:	430a      	orrs	r2, r1
 80044ac:	492d      	ldr	r1, [pc, #180]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	610b      	str	r3, [r1, #16]
 80044b2:	e02d      	b.n	8004510 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d115      	bne.n	80044e6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ba:	4b2a      	ldr	r3, [pc, #168]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	4b2b      	ldr	r3, [pc, #172]	; (800456c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6892      	ldr	r2, [r2, #8]
 80044c6:	0211      	lsls	r1, r2, #8
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6912      	ldr	r2, [r2, #16]
 80044cc:	0852      	lsrs	r2, r2, #1
 80044ce:	3a01      	subs	r2, #1
 80044d0:	0552      	lsls	r2, r2, #21
 80044d2:	4311      	orrs	r1, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6852      	ldr	r2, [r2, #4]
 80044d8:	3a01      	subs	r2, #1
 80044da:	0112      	lsls	r2, r2, #4
 80044dc:	430a      	orrs	r2, r1
 80044de:	4921      	ldr	r1, [pc, #132]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	610b      	str	r3, [r1, #16]
 80044e4:	e014      	b.n	8004510 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044e6:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	4b21      	ldr	r3, [pc, #132]	; (8004570 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6892      	ldr	r2, [r2, #8]
 80044f2:	0211      	lsls	r1, r2, #8
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6952      	ldr	r2, [r2, #20]
 80044f8:	0852      	lsrs	r2, r2, #1
 80044fa:	3a01      	subs	r2, #1
 80044fc:	0652      	lsls	r2, r2, #25
 80044fe:	4311      	orrs	r1, r2
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6852      	ldr	r2, [r2, #4]
 8004504:	3a01      	subs	r2, #1
 8004506:	0112      	lsls	r2, r2, #4
 8004508:	430a      	orrs	r2, r1
 800450a:	4916      	ldr	r1, [pc, #88]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 800450c:	4313      	orrs	r3, r2
 800450e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004510:	4b14      	ldr	r3, [pc, #80]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a13      	ldr	r2, [pc, #76]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004516:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800451a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451c:	f7fd fe7c 	bl	8002218 <HAL_GetTick>
 8004520:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004522:	e009      	b.n	8004538 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004524:	f7fd fe78 	bl	8002218 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d902      	bls.n	8004538 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	73fb      	strb	r3, [r7, #15]
          break;
 8004536:	e005      	b.n	8004544 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004538:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ef      	beq.n	8004524 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800454a:	4b06      	ldr	r3, [pc, #24]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	4904      	ldr	r1, [pc, #16]	; (8004564 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004554:	4313      	orrs	r3, r2
 8004556:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004558:	7bfb      	ldrb	r3, [r7, #15]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40021000 	.word	0x40021000
 8004568:	07ff800f 	.word	0x07ff800f
 800456c:	ff9f800f 	.word	0xff9f800f
 8004570:	f9ff800f 	.word	0xf9ff800f

08004574 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004582:	4b72      	ldr	r3, [pc, #456]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00e      	beq.n	80045ac <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800458e:	4b6f      	ldr	r3, [pc, #444]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 0203 	and.w	r2, r3, #3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d103      	bne.n	80045a6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
       ||
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d142      	bne.n	800462c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
 80045aa:	e03f      	b.n	800462c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d018      	beq.n	80045e6 <RCCEx_PLLSAI2_Config+0x72>
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d825      	bhi.n	8004604 <RCCEx_PLLSAI2_Config+0x90>
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d002      	beq.n	80045c2 <RCCEx_PLLSAI2_Config+0x4e>
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d009      	beq.n	80045d4 <RCCEx_PLLSAI2_Config+0x60>
 80045c0:	e020      	b.n	8004604 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045c2:	4b62      	ldr	r3, [pc, #392]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d11d      	bne.n	800460a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d2:	e01a      	b.n	800460a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045d4:	4b5d      	ldr	r3, [pc, #372]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d116      	bne.n	800460e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e4:	e013      	b.n	800460e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045e6:	4b59      	ldr	r3, [pc, #356]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045f2:	4b56      	ldr	r3, [pc, #344]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d109      	bne.n	8004612 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004602:	e006      	b.n	8004612 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      break;
 8004608:	e004      	b.n	8004614 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800460a:	bf00      	nop
 800460c:	e002      	b.n	8004614 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800460e:	bf00      	nop
 8004610:	e000      	b.n	8004614 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004612:	bf00      	nop
    }

    if(status == HAL_OK)
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d108      	bne.n	800462c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800461a:	4b4c      	ldr	r3, [pc, #304]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f023 0203 	bic.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4949      	ldr	r1, [pc, #292]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004628:	4313      	orrs	r3, r2
 800462a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f040 8086 	bne.w	8004740 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004634:	4b45      	ldr	r3, [pc, #276]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a44      	ldr	r2, [pc, #272]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 800463a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800463e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004640:	f7fd fdea 	bl	8002218 <HAL_GetTick>
 8004644:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004646:	e009      	b.n	800465c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004648:	f7fd fde6 	bl	8002218 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d902      	bls.n	800465c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	73fb      	strb	r3, [r7, #15]
        break;
 800465a:	e005      	b.n	8004668 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800465c:	4b3b      	ldr	r3, [pc, #236]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ef      	bne.n	8004648 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d168      	bne.n	8004740 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d113      	bne.n	800469c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004674:	4b35      	ldr	r3, [pc, #212]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	4b35      	ldr	r3, [pc, #212]	; (8004750 <RCCEx_PLLSAI2_Config+0x1dc>)
 800467a:	4013      	ands	r3, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6892      	ldr	r2, [r2, #8]
 8004680:	0211      	lsls	r1, r2, #8
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68d2      	ldr	r2, [r2, #12]
 8004686:	06d2      	lsls	r2, r2, #27
 8004688:	4311      	orrs	r1, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6852      	ldr	r2, [r2, #4]
 800468e:	3a01      	subs	r2, #1
 8004690:	0112      	lsls	r2, r2, #4
 8004692:	430a      	orrs	r2, r1
 8004694:	492d      	ldr	r1, [pc, #180]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004696:	4313      	orrs	r3, r2
 8004698:	614b      	str	r3, [r1, #20]
 800469a:	e02d      	b.n	80046f8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d115      	bne.n	80046ce <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046a2:	4b2a      	ldr	r3, [pc, #168]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	4b2b      	ldr	r3, [pc, #172]	; (8004754 <RCCEx_PLLSAI2_Config+0x1e0>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6892      	ldr	r2, [r2, #8]
 80046ae:	0211      	lsls	r1, r2, #8
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6912      	ldr	r2, [r2, #16]
 80046b4:	0852      	lsrs	r2, r2, #1
 80046b6:	3a01      	subs	r2, #1
 80046b8:	0552      	lsls	r2, r2, #21
 80046ba:	4311      	orrs	r1, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6852      	ldr	r2, [r2, #4]
 80046c0:	3a01      	subs	r2, #1
 80046c2:	0112      	lsls	r2, r2, #4
 80046c4:	430a      	orrs	r2, r1
 80046c6:	4921      	ldr	r1, [pc, #132]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	614b      	str	r3, [r1, #20]
 80046cc:	e014      	b.n	80046f8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046ce:	4b1f      	ldr	r3, [pc, #124]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	4b21      	ldr	r3, [pc, #132]	; (8004758 <RCCEx_PLLSAI2_Config+0x1e4>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6892      	ldr	r2, [r2, #8]
 80046da:	0211      	lsls	r1, r2, #8
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6952      	ldr	r2, [r2, #20]
 80046e0:	0852      	lsrs	r2, r2, #1
 80046e2:	3a01      	subs	r2, #1
 80046e4:	0652      	lsls	r2, r2, #25
 80046e6:	4311      	orrs	r1, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6852      	ldr	r2, [r2, #4]
 80046ec:	3a01      	subs	r2, #1
 80046ee:	0112      	lsls	r2, r2, #4
 80046f0:	430a      	orrs	r2, r1
 80046f2:	4916      	ldr	r1, [pc, #88]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a13      	ldr	r2, [pc, #76]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 80046fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004704:	f7fd fd88 	bl	8002218 <HAL_GetTick>
 8004708:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800470a:	e009      	b.n	8004720 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800470c:	f7fd fd84 	bl	8002218 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d902      	bls.n	8004720 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	73fb      	strb	r3, [r7, #15]
          break;
 800471e:	e005      	b.n	800472c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0ef      	beq.n	800470c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004732:	4b06      	ldr	r3, [pc, #24]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	4904      	ldr	r1, [pc, #16]	; (800474c <RCCEx_PLLSAI2_Config+0x1d8>)
 800473c:	4313      	orrs	r3, r2
 800473e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40021000 	.word	0x40021000
 8004750:	07ff800f 	.word	0x07ff800f
 8004754:	ff9f800f 	.word	0xff9f800f
 8004758:	f9ff800f 	.word	0xf9ff800f

0800475c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e095      	b.n	800489a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	2b00      	cmp	r3, #0
 8004774:	d108      	bne.n	8004788 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800477e:	d009      	beq.n	8004794 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	61da      	str	r2, [r3, #28]
 8004786:	e005      	b.n	8004794 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7fd fb5e 	bl	8001e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047d4:	d902      	bls.n	80047dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	e002      	b.n	80047e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80047ea:	d007      	beq.n	80047fc <HAL_SPI_Init+0xa0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047f4:	d002      	beq.n	80047fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483e:	ea42 0103 	orr.w	r1, r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	0c1b      	lsrs	r3, r3, #16
 8004858:	f003 0204 	and.w	r2, r3, #4
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004878:	ea42 0103 	orr.w	r1, r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b088      	sub	sp, #32
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	4613      	mov	r3, r2
 80048b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_SPI_Transmit+0x22>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e158      	b.n	8004b76 <HAL_SPI_Transmit+0x2d4>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048cc:	f7fd fca4 	bl	8002218 <HAL_GetTick>
 80048d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d002      	beq.n	80048e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048e2:	2302      	movs	r3, #2
 80048e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048e6:	e13d      	b.n	8004b64 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_SPI_Transmit+0x52>
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048f8:	e134      	b.n	8004b64 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2203      	movs	r2, #3
 80048fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	88fa      	ldrh	r2, [r7, #6]
 8004912:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	88fa      	ldrh	r2, [r7, #6]
 8004918:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004944:	d10f      	bne.n	8004966 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004954:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004964:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004970:	2b40      	cmp	r3, #64	; 0x40
 8004972:	d007      	beq.n	8004984 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004982:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800498c:	d94b      	bls.n	8004a26 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_SPI_Transmit+0xfa>
 8004996:	8afb      	ldrh	r3, [r7, #22]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d13e      	bne.n	8004a1a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	881a      	ldrh	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	1c9a      	adds	r2, r3, #2
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049c0:	e02b      	b.n	8004a1a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d112      	bne.n	80049f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	881a      	ldrh	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	1c9a      	adds	r2, r3, #2
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049f4:	e011      	b.n	8004a1a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f6:	f7fd fc0f 	bl	8002218 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d803      	bhi.n	8004a0e <HAL_SPI_Transmit+0x16c>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d102      	bne.n	8004a14 <HAL_SPI_Transmit+0x172>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a18:	e0a4      	b.n	8004b64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1ce      	bne.n	80049c2 <HAL_SPI_Transmit+0x120>
 8004a24:	e07c      	b.n	8004b20 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_SPI_Transmit+0x192>
 8004a2e:	8afb      	ldrh	r3, [r7, #22]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d170      	bne.n	8004b16 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d912      	bls.n	8004a64 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	881a      	ldrh	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	1c9a      	adds	r2, r3, #2
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b02      	subs	r3, #2
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a62:	e058      	b.n	8004b16 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	330c      	adds	r3, #12
 8004a6e:	7812      	ldrb	r2, [r2, #0]
 8004a70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004a8a:	e044      	b.n	8004b16 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d12b      	bne.n	8004af2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d912      	bls.n	8004aca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	881a      	ldrh	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	1c9a      	adds	r2, r3, #2
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b02      	subs	r3, #2
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ac8:	e025      	b.n	8004b16 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004af0:	e011      	b.n	8004b16 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004af2:	f7fd fb91 	bl	8002218 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d803      	bhi.n	8004b0a <HAL_SPI_Transmit+0x268>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d102      	bne.n	8004b10 <HAL_SPI_Transmit+0x26e>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b14:	e026      	b.n	8004b64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1b5      	bne.n	8004a8c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	6839      	ldr	r1, [r7, #0]
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f949 	bl	8004dbc <SPI_EndRxTxTransaction>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	77fb      	strb	r3, [r7, #31]
 8004b60:	e000      	b.n	8004b64 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004b62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b74:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3720      	adds	r7, #32
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b90:	f7fd fb42 	bl	8002218 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ba0:	f7fd fb3a 	bl	8002218 <HAL_GetTick>
 8004ba4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ba6:	4b39      	ldr	r3, [pc, #228]	; (8004c8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	015b      	lsls	r3, r3, #5
 8004bac:	0d1b      	lsrs	r3, r3, #20
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	fb02 f303 	mul.w	r3, r2, r3
 8004bb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bb6:	e054      	b.n	8004c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbe:	d050      	beq.n	8004c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bc0:	f7fd fb2a 	bl	8002218 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d902      	bls.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d13d      	bne.n	8004c52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004be4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bee:	d111      	bne.n	8004c14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf8:	d004      	beq.n	8004c04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c02:	d107      	bne.n	8004c14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c1c:	d10f      	bne.n	8004c3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e017      	b.n	8004c82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	bf0c      	ite	eq
 8004c72:	2301      	moveq	r3, #1
 8004c74:	2300      	movne	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d19b      	bne.n	8004bb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000004 	.word	0x20000004

08004c90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ca2:	f7fd fab9 	bl	8002218 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	4413      	add	r3, r2
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004cb2:	f7fd fab1 	bl	8002218 <HAL_GetTick>
 8004cb6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004cc0:	4b3d      	ldr	r3, [pc, #244]	; (8004db8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	00da      	lsls	r2, r3, #3
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	0d1b      	lsrs	r3, r3, #20
 8004cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd2:	fb02 f303 	mul.w	r3, r2, r3
 8004cd6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004cd8:	e060      	b.n	8004d9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ce0:	d107      	bne.n	8004cf2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d104      	bne.n	8004cf2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004cf0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d050      	beq.n	8004d9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cfa:	f7fd fa8d 	bl	8002218 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d902      	bls.n	8004d10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d13d      	bne.n	8004d8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d28:	d111      	bne.n	8004d4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d32:	d004      	beq.n	8004d3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3c:	d107      	bne.n	8004d4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d56:	d10f      	bne.n	8004d78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e010      	b.n	8004dae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4013      	ands	r3, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d196      	bne.n	8004cda <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3728      	adds	r7, #40	; 0x28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000004 	.word	0x20000004

08004dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f7ff ff5b 	bl	8004c90 <SPI_WaitFifoStateUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de4:	f043 0220 	orr.w	r2, r3, #32
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e027      	b.n	8004e40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7ff fec0 	bl	8004b80 <SPI_WaitFlagStateUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0a:	f043 0220 	orr.w	r2, r3, #32
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e014      	b.n	8004e40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f7ff ff34 	bl	8004c90 <SPI_WaitFifoStateUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e32:	f043 0220 	orr.w	r2, r3, #32
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e000      	b.n	8004e40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e049      	b.n	8004eee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fd f842 	bl	8001ef8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	4619      	mov	r1, r3
 8004e86:	4610      	mov	r0, r2
 8004e88:	f000 f8fe 	bl	8005088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_TIM_ConfigClockSource+0x1c>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e0b6      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x18a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f30:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f3c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4e:	d03e      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0xd8>
 8004f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f54:	f200 8087 	bhi.w	8005066 <HAL_TIM_ConfigClockSource+0x170>
 8004f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5c:	f000 8086 	beq.w	800506c <HAL_TIM_ConfigClockSource+0x176>
 8004f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f64:	d87f      	bhi.n	8005066 <HAL_TIM_ConfigClockSource+0x170>
 8004f66:	2b70      	cmp	r3, #112	; 0x70
 8004f68:	d01a      	beq.n	8004fa0 <HAL_TIM_ConfigClockSource+0xaa>
 8004f6a:	2b70      	cmp	r3, #112	; 0x70
 8004f6c:	d87b      	bhi.n	8005066 <HAL_TIM_ConfigClockSource+0x170>
 8004f6e:	2b60      	cmp	r3, #96	; 0x60
 8004f70:	d050      	beq.n	8005014 <HAL_TIM_ConfigClockSource+0x11e>
 8004f72:	2b60      	cmp	r3, #96	; 0x60
 8004f74:	d877      	bhi.n	8005066 <HAL_TIM_ConfigClockSource+0x170>
 8004f76:	2b50      	cmp	r3, #80	; 0x50
 8004f78:	d03c      	beq.n	8004ff4 <HAL_TIM_ConfigClockSource+0xfe>
 8004f7a:	2b50      	cmp	r3, #80	; 0x50
 8004f7c:	d873      	bhi.n	8005066 <HAL_TIM_ConfigClockSource+0x170>
 8004f7e:	2b40      	cmp	r3, #64	; 0x40
 8004f80:	d058      	beq.n	8005034 <HAL_TIM_ConfigClockSource+0x13e>
 8004f82:	2b40      	cmp	r3, #64	; 0x40
 8004f84:	d86f      	bhi.n	8005066 <HAL_TIM_ConfigClockSource+0x170>
 8004f86:	2b30      	cmp	r3, #48	; 0x30
 8004f88:	d064      	beq.n	8005054 <HAL_TIM_ConfigClockSource+0x15e>
 8004f8a:	2b30      	cmp	r3, #48	; 0x30
 8004f8c:	d86b      	bhi.n	8005066 <HAL_TIM_ConfigClockSource+0x170>
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d060      	beq.n	8005054 <HAL_TIM_ConfigClockSource+0x15e>
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	d867      	bhi.n	8005066 <HAL_TIM_ConfigClockSource+0x170>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d05c      	beq.n	8005054 <HAL_TIM_ConfigClockSource+0x15e>
 8004f9a:	2b10      	cmp	r3, #16
 8004f9c:	d05a      	beq.n	8005054 <HAL_TIM_ConfigClockSource+0x15e>
 8004f9e:	e062      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6899      	ldr	r1, [r3, #8]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f000 f97e 	bl	80052b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fc2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	609a      	str	r2, [r3, #8]
      break;
 8004fcc:	e04f      	b.n	800506e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6899      	ldr	r1, [r3, #8]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f000 f967 	bl	80052b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ff0:	609a      	str	r2, [r3, #8]
      break;
 8004ff2:	e03c      	b.n	800506e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	6859      	ldr	r1, [r3, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	461a      	mov	r2, r3
 8005002:	f000 f8db 	bl	80051bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2150      	movs	r1, #80	; 0x50
 800500c:	4618      	mov	r0, r3
 800500e:	f000 f934 	bl	800527a <TIM_ITRx_SetConfig>
      break;
 8005012:	e02c      	b.n	800506e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6818      	ldr	r0, [r3, #0]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	6859      	ldr	r1, [r3, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	461a      	mov	r2, r3
 8005022:	f000 f8fa 	bl	800521a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2160      	movs	r1, #96	; 0x60
 800502c:	4618      	mov	r0, r3
 800502e:	f000 f924 	bl	800527a <TIM_ITRx_SetConfig>
      break;
 8005032:	e01c      	b.n	800506e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	6859      	ldr	r1, [r3, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	461a      	mov	r2, r3
 8005042:	f000 f8bb 	bl	80051bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2140      	movs	r1, #64	; 0x40
 800504c:	4618      	mov	r0, r3
 800504e:	f000 f914 	bl	800527a <TIM_ITRx_SetConfig>
      break;
 8005052:	e00c      	b.n	800506e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4619      	mov	r1, r3
 800505e:	4610      	mov	r0, r2
 8005060:	f000 f90b 	bl	800527a <TIM_ITRx_SetConfig>
      break;
 8005064:	e003      	b.n	800506e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
      break;
 800506a:	e000      	b.n	800506e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800506c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800507e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a40      	ldr	r2, [pc, #256]	; (800519c <TIM_Base_SetConfig+0x114>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d013      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a6:	d00f      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3d      	ldr	r2, [pc, #244]	; (80051a0 <TIM_Base_SetConfig+0x118>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00b      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a3c      	ldr	r2, [pc, #240]	; (80051a4 <TIM_Base_SetConfig+0x11c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d007      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a3b      	ldr	r2, [pc, #236]	; (80051a8 <TIM_Base_SetConfig+0x120>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <TIM_Base_SetConfig+0x40>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a3a      	ldr	r2, [pc, #232]	; (80051ac <TIM_Base_SetConfig+0x124>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d108      	bne.n	80050da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a2f      	ldr	r2, [pc, #188]	; (800519c <TIM_Base_SetConfig+0x114>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d01f      	beq.n	8005122 <TIM_Base_SetConfig+0x9a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e8:	d01b      	beq.n	8005122 <TIM_Base_SetConfig+0x9a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2c      	ldr	r2, [pc, #176]	; (80051a0 <TIM_Base_SetConfig+0x118>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d017      	beq.n	8005122 <TIM_Base_SetConfig+0x9a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a2b      	ldr	r2, [pc, #172]	; (80051a4 <TIM_Base_SetConfig+0x11c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d013      	beq.n	8005122 <TIM_Base_SetConfig+0x9a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a2a      	ldr	r2, [pc, #168]	; (80051a8 <TIM_Base_SetConfig+0x120>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00f      	beq.n	8005122 <TIM_Base_SetConfig+0x9a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a29      	ldr	r2, [pc, #164]	; (80051ac <TIM_Base_SetConfig+0x124>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00b      	beq.n	8005122 <TIM_Base_SetConfig+0x9a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a28      	ldr	r2, [pc, #160]	; (80051b0 <TIM_Base_SetConfig+0x128>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d007      	beq.n	8005122 <TIM_Base_SetConfig+0x9a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a27      	ldr	r2, [pc, #156]	; (80051b4 <TIM_Base_SetConfig+0x12c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d003      	beq.n	8005122 <TIM_Base_SetConfig+0x9a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a26      	ldr	r2, [pc, #152]	; (80051b8 <TIM_Base_SetConfig+0x130>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d108      	bne.n	8005134 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a10      	ldr	r2, [pc, #64]	; (800519c <TIM_Base_SetConfig+0x114>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00f      	beq.n	8005180 <TIM_Base_SetConfig+0xf8>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a12      	ldr	r2, [pc, #72]	; (80051ac <TIM_Base_SetConfig+0x124>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d00b      	beq.n	8005180 <TIM_Base_SetConfig+0xf8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a11      	ldr	r2, [pc, #68]	; (80051b0 <TIM_Base_SetConfig+0x128>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d007      	beq.n	8005180 <TIM_Base_SetConfig+0xf8>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a10      	ldr	r2, [pc, #64]	; (80051b4 <TIM_Base_SetConfig+0x12c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_Base_SetConfig+0xf8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a0f      	ldr	r2, [pc, #60]	; (80051b8 <TIM_Base_SetConfig+0x130>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d103      	bne.n	8005188 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	615a      	str	r2, [r3, #20]
}
 800518e:	bf00      	nop
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40012c00 	.word	0x40012c00
 80051a0:	40000400 	.word	0x40000400
 80051a4:	40000800 	.word	0x40000800
 80051a8:	40000c00 	.word	0x40000c00
 80051ac:	40013400 	.word	0x40013400
 80051b0:	40014000 	.word	0x40014000
 80051b4:	40014400 	.word	0x40014400
 80051b8:	40014800 	.word	0x40014800

080051bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	f023 0201 	bic.w	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f023 030a 	bic.w	r3, r3, #10
 80051f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800521a:	b480      	push	{r7}
 800521c:	b087      	sub	sp, #28
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	f023 0210 	bic.w	r2, r3, #16
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005244:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	031b      	lsls	r3, r3, #12
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005256:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	621a      	str	r2, [r3, #32]
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800527a:	b480      	push	{r7}
 800527c:	b085      	sub	sp, #20
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	f043 0307 	orr.w	r3, r3, #7
 800529c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	609a      	str	r2, [r3, #8]
}
 80052a4:	bf00      	nop
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	021a      	lsls	r2, r3, #8
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	609a      	str	r2, [r3, #8]
}
 80052e4:	bf00      	nop
 80052e6:	371c      	adds	r7, #28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005304:	2302      	movs	r3, #2
 8005306:	e068      	b.n	80053da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a2e      	ldr	r2, [pc, #184]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d004      	beq.n	800533c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a2d      	ldr	r2, [pc, #180]	; (80053ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d108      	bne.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005342:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005354:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a1e      	ldr	r2, [pc, #120]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d01d      	beq.n	80053ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537a:	d018      	beq.n	80053ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1b      	ldr	r2, [pc, #108]	; (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d013      	beq.n	80053ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1a      	ldr	r2, [pc, #104]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00e      	beq.n	80053ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a18      	ldr	r2, [pc, #96]	; (80053f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d009      	beq.n	80053ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a13      	ldr	r2, [pc, #76]	; (80053ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d004      	beq.n	80053ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a14      	ldr	r2, [pc, #80]	; (80053fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d10c      	bne.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40013400 	.word	0x40013400
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800
 80053f8:	40000c00 	.word	0x40000c00
 80053fc:	40014000 	.word	0x40014000

08005400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e042      	b.n	8005498 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fc fd85 	bl	8001f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2224      	movs	r2, #36	; 0x24
 800542e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fb1c 	bl	8005a80 <UART_SetConfig>
 8005448:	4603      	mov	r3, r0
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e022      	b.n	8005498 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fe0c 	bl	8006078 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800546e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800547e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0201 	orr.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fe93 	bl	80061bc <UART_CheckIdleState>
 8005496:	4603      	mov	r3, r0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08a      	sub	sp, #40	; 0x28
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	f040 8084 	bne.w	80055c4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <HAL_UART_Transmit+0x28>
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e07c      	b.n	80055c6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_UART_Transmit+0x3a>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e075      	b.n	80055c6 <HAL_UART_Transmit+0x126>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2221      	movs	r2, #33	; 0x21
 80054ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054f2:	f7fc fe91 	bl	8002218 <HAL_GetTick>
 80054f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	88fa      	ldrh	r2, [r7, #6]
 8005504:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005510:	d108      	bne.n	8005524 <HAL_UART_Transmit+0x84>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d104      	bne.n	8005524 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	e003      	b.n	800552c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005528:	2300      	movs	r3, #0
 800552a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005534:	e02d      	b.n	8005592 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2200      	movs	r2, #0
 800553e:	2180      	movs	r1, #128	; 0x80
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 fe86 	bl	8006252 <UART_WaitOnFlagUntilTimeout>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e03a      	b.n	80055c6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10b      	bne.n	800556e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	881a      	ldrh	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005562:	b292      	uxth	r2, r2
 8005564:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	3302      	adds	r3, #2
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	e008      	b.n	8005580 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	781a      	ldrb	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	b292      	uxth	r2, r2
 8005578:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	3301      	adds	r3, #1
 800557e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1cb      	bne.n	8005536 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2200      	movs	r2, #0
 80055a6:	2140      	movs	r1, #64	; 0x40
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 fe52 	bl	8006252 <UART_WaitOnFlagUntilTimeout>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e006      	b.n	80055c6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	e000      	b.n	80055c6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80055c4:	2302      	movs	r3, #2
  }
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b08a      	sub	sp, #40	; 0x28
 80055d2:	af02      	add	r7, sp, #8
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	603b      	str	r3, [r7, #0]
 80055da:	4613      	mov	r3, r2
 80055dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	f040 80c1 	bne.w	800576c <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_UART_Receive+0x28>
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e0b9      	b.n	800576e <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_UART_Receive+0x3a>
 8005604:	2302      	movs	r3, #2
 8005606:	e0b2      	b.n	800576e <HAL_UART_Receive+0x1a0>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2222      	movs	r2, #34	; 0x22
 800561c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005626:	f7fc fdf7 	bl	8002218 <HAL_GetTick>
 800562a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	88fa      	ldrh	r2, [r7, #6]
 8005630:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	88fa      	ldrh	r2, [r7, #6]
 8005638:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005644:	d10e      	bne.n	8005664 <HAL_UART_Receive+0x96>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d105      	bne.n	800565a <HAL_UART_Receive+0x8c>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005654:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005658:	e02d      	b.n	80056b6 <HAL_UART_Receive+0xe8>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	22ff      	movs	r2, #255	; 0xff
 800565e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005662:	e028      	b.n	80056b6 <HAL_UART_Receive+0xe8>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10d      	bne.n	8005688 <HAL_UART_Receive+0xba>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d104      	bne.n	800567e <HAL_UART_Receive+0xb0>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	22ff      	movs	r2, #255	; 0xff
 8005678:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800567c:	e01b      	b.n	80056b6 <HAL_UART_Receive+0xe8>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	227f      	movs	r2, #127	; 0x7f
 8005682:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005686:	e016      	b.n	80056b6 <HAL_UART_Receive+0xe8>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005690:	d10d      	bne.n	80056ae <HAL_UART_Receive+0xe0>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d104      	bne.n	80056a4 <HAL_UART_Receive+0xd6>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	227f      	movs	r2, #127	; 0x7f
 800569e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056a2:	e008      	b.n	80056b6 <HAL_UART_Receive+0xe8>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	223f      	movs	r2, #63	; 0x3f
 80056a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056ac:	e003      	b.n	80056b6 <HAL_UART_Receive+0xe8>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80056bc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c6:	d108      	bne.n	80056da <HAL_UART_Receive+0x10c>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d104      	bne.n	80056da <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	e003      	b.n	80056e2 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056ea:	e033      	b.n	8005754 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2200      	movs	r2, #0
 80056f4:	2120      	movs	r1, #32
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 fdab 	bl	8006252 <UART_WaitOnFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e033      	b.n	800576e <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10c      	bne.n	8005726 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005712:	b29a      	uxth	r2, r3
 8005714:	8a7b      	ldrh	r3, [r7, #18]
 8005716:	4013      	ands	r3, r2
 8005718:	b29a      	uxth	r2, r3
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	3302      	adds	r3, #2
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	e00d      	b.n	8005742 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800572c:	b29b      	uxth	r3, r3
 800572e:	b2da      	uxtb	r2, r3
 8005730:	8a7b      	ldrh	r3, [r7, #18]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	4013      	ands	r3, r2
 8005736:	b2da      	uxtb	r2, r3
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	3301      	adds	r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1c5      	bne.n	80056ec <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e000      	b.n	800576e <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800576c:	2302      	movs	r3, #2
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	4613      	mov	r3, r2
 8005784:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578c:	2b20      	cmp	r3, #32
 800578e:	d142      	bne.n	8005816 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <HAL_UART_Receive_DMA+0x24>
 8005796:	88fb      	ldrh	r3, [r7, #6]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e03b      	b.n	8005818 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <HAL_UART_Receive_DMA+0x36>
 80057aa:	2302      	movs	r3, #2
 80057ac:	e034      	b.n	8005818 <HAL_UART_Receive_DMA+0xa0>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a17      	ldr	r2, [pc, #92]	; (8005820 <HAL_UART_Receive_DMA+0xa8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d01f      	beq.n	8005806 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d018      	beq.n	8005806 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	613b      	str	r3, [r7, #16]
   return(result);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	623b      	str	r3, [r7, #32]
 80057f4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	69f9      	ldr	r1, [r7, #28]
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e6      	bne.n	80057d4 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	461a      	mov	r2, r3
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fde9 	bl	80063e4 <UART_Start_Receive_DMA>
 8005812:	4603      	mov	r3, r0
 8005814:	e000      	b.n	8005818 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005816:	2302      	movs	r3, #2
  }
}
 8005818:	4618      	mov	r0, r3
 800581a:	3728      	adds	r7, #40	; 0x28
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40008000 	.word	0x40008000

08005824 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b0a0      	sub	sp, #128	; 0x80
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800583a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800583c:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8005840:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800584a:	66bb      	str	r3, [r7, #104]	; 0x68
 800584c:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005850:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005858:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e6      	bne.n	800582c <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3308      	adds	r3, #8
 8005864:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800586e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005870:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 8005874:	f023 0301 	bic.w	r3, r3, #1
 8005878:	67bb      	str	r3, [r7, #120]	; 0x78
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005882:	657a      	str	r2, [r7, #84]	; 0x54
 8005884:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005888:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e3      	bne.n	800585e <HAL_UART_Abort+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d118      	bne.n	80058d0 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	f023 0310 	bic.w	r3, r3, #16
 80058b2:	677b      	str	r3, [r7, #116]	; 0x74
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058bc:	643b      	str	r3, [r7, #64]	; 0x40
 80058be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e6      	bne.n	800589e <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058da:	2b80      	cmp	r3, #128	; 0x80
 80058dc:	d137      	bne.n	800594e <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3308      	adds	r3, #8
 80058e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f4:	673b      	str	r3, [r7, #112]	; 0x70
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3308      	adds	r3, #8
 80058fc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80058fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005900:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e5      	bne.n	80058de <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005916:	2b00      	cmp	r3, #0
 8005918:	d019      	beq.n	800594e <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800591e:	2200      	movs	r2, #0
 8005920:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005926:	4618      	mov	r0, r3
 8005928:	f7fc fedb 	bl	80026e2 <HAL_DMA_Abort>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00d      	beq.n	800594e <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005936:	4618      	mov	r0, r3
 8005938:	f7fc ffde 	bl	80028f8 <HAL_DMA_GetError>
 800593c:	4603      	mov	r3, r0
 800593e:	2b20      	cmp	r3, #32
 8005940:	d105      	bne.n	800594e <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2210      	movs	r2, #16
 8005946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e073      	b.n	8005a36 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	d137      	bne.n	80059cc <HAL_UART_Abort+0x1a8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3308      	adds	r3, #8
 8005962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	e853 3f00 	ldrex	r3, [r3]
 800596a:	60bb      	str	r3, [r7, #8]
   return(result);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005972:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3308      	adds	r3, #8
 800597a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800597c:	61ba      	str	r2, [r7, #24]
 800597e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6979      	ldr	r1, [r7, #20]
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	613b      	str	r3, [r7, #16]
   return(result);
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e5      	bne.n	800595c <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d019      	beq.n	80059cc <HAL_UART_Abort+0x1a8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800599c:	2200      	movs	r2, #0
 800599e:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fc fe9c 	bl	80026e2 <HAL_DMA_Abort>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00d      	beq.n	80059cc <HAL_UART_Abort+0x1a8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fc ff9f 	bl	80028f8 <HAL_DMA_GetError>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d105      	bne.n	80059cc <HAL_UART_Abort+0x1a8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2210      	movs	r2, #16
 80059c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e034      	b.n	8005a36 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	220f      	movs	r2, #15
 80059e2:	621a      	str	r2, [r3, #32]

#if defined(USART_CR1_FIFOEN)
  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ec:	d109      	bne.n	8005a02 <HAL_UART_Abort+0x1de>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	8b1b      	ldrh	r3, [r3, #24]
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0210 	orr.w	r2, r2, #16
 80059fe:	b292      	uxth	r2, r2
 8005a00:	831a      	strh	r2, [r3, #24]
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	8b1b      	ldrh	r3, [r3, #24]
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0208 	orr.w	r2, r2, #8
 8005a12:	b292      	uxth	r2, r2
 8005a14:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	66da      	str	r2, [r3, #108]	; 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3780      	adds	r7, #128	; 0x80
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a84:	b08c      	sub	sp, #48	; 0x30
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	4baa      	ldr	r3, [pc, #680]	; (8005d58 <UART_SetConfig+0x2d8>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a9f      	ldr	r2, [pc, #636]	; (8005d5c <UART_SetConfig+0x2dc>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d004      	beq.n	8005aec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005af6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b00:	430b      	orrs	r3, r1
 8005b02:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0a:	f023 010f 	bic.w	r1, r3, #15
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a90      	ldr	r2, [pc, #576]	; (8005d60 <UART_SetConfig+0x2e0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d125      	bne.n	8005b70 <UART_SetConfig+0xf0>
 8005b24:	4b8f      	ldr	r3, [pc, #572]	; (8005d64 <UART_SetConfig+0x2e4>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d81a      	bhi.n	8005b68 <UART_SetConfig+0xe8>
 8005b32:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <UART_SetConfig+0xb8>)
 8005b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b38:	08005b49 	.word	0x08005b49
 8005b3c:	08005b59 	.word	0x08005b59
 8005b40:	08005b51 	.word	0x08005b51
 8005b44:	08005b61 	.word	0x08005b61
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b4e:	e116      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005b50:	2302      	movs	r3, #2
 8005b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b56:	e112      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005b58:	2304      	movs	r3, #4
 8005b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b5e:	e10e      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005b60:	2308      	movs	r3, #8
 8005b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b66:	e10a      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005b68:	2310      	movs	r3, #16
 8005b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b6e:	e106      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a7c      	ldr	r2, [pc, #496]	; (8005d68 <UART_SetConfig+0x2e8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d138      	bne.n	8005bec <UART_SetConfig+0x16c>
 8005b7a:	4b7a      	ldr	r3, [pc, #488]	; (8005d64 <UART_SetConfig+0x2e4>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b80:	f003 030c 	and.w	r3, r3, #12
 8005b84:	2b0c      	cmp	r3, #12
 8005b86:	d82d      	bhi.n	8005be4 <UART_SetConfig+0x164>
 8005b88:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <UART_SetConfig+0x110>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005bc5 	.word	0x08005bc5
 8005b94:	08005be5 	.word	0x08005be5
 8005b98:	08005be5 	.word	0x08005be5
 8005b9c:	08005be5 	.word	0x08005be5
 8005ba0:	08005bd5 	.word	0x08005bd5
 8005ba4:	08005be5 	.word	0x08005be5
 8005ba8:	08005be5 	.word	0x08005be5
 8005bac:	08005be5 	.word	0x08005be5
 8005bb0:	08005bcd 	.word	0x08005bcd
 8005bb4:	08005be5 	.word	0x08005be5
 8005bb8:	08005be5 	.word	0x08005be5
 8005bbc:	08005be5 	.word	0x08005be5
 8005bc0:	08005bdd 	.word	0x08005bdd
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bca:	e0d8      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bd2:	e0d4      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bda:	e0d0      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005bdc:	2308      	movs	r3, #8
 8005bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005be2:	e0cc      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005be4:	2310      	movs	r3, #16
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bea:	e0c8      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a5e      	ldr	r2, [pc, #376]	; (8005d6c <UART_SetConfig+0x2ec>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d125      	bne.n	8005c42 <UART_SetConfig+0x1c2>
 8005bf6:	4b5b      	ldr	r3, [pc, #364]	; (8005d64 <UART_SetConfig+0x2e4>)
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c00:	2b30      	cmp	r3, #48	; 0x30
 8005c02:	d016      	beq.n	8005c32 <UART_SetConfig+0x1b2>
 8005c04:	2b30      	cmp	r3, #48	; 0x30
 8005c06:	d818      	bhi.n	8005c3a <UART_SetConfig+0x1ba>
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d00a      	beq.n	8005c22 <UART_SetConfig+0x1a2>
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d814      	bhi.n	8005c3a <UART_SetConfig+0x1ba>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <UART_SetConfig+0x19a>
 8005c14:	2b10      	cmp	r3, #16
 8005c16:	d008      	beq.n	8005c2a <UART_SetConfig+0x1aa>
 8005c18:	e00f      	b.n	8005c3a <UART_SetConfig+0x1ba>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c20:	e0ad      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c22:	2302      	movs	r3, #2
 8005c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c28:	e0a9      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c2a:	2304      	movs	r3, #4
 8005c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c30:	e0a5      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c32:	2308      	movs	r3, #8
 8005c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c38:	e0a1      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c3a:	2310      	movs	r3, #16
 8005c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c40:	e09d      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a4a      	ldr	r2, [pc, #296]	; (8005d70 <UART_SetConfig+0x2f0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d125      	bne.n	8005c98 <UART_SetConfig+0x218>
 8005c4c:	4b45      	ldr	r3, [pc, #276]	; (8005d64 <UART_SetConfig+0x2e4>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c56:	2bc0      	cmp	r3, #192	; 0xc0
 8005c58:	d016      	beq.n	8005c88 <UART_SetConfig+0x208>
 8005c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c5c:	d818      	bhi.n	8005c90 <UART_SetConfig+0x210>
 8005c5e:	2b80      	cmp	r3, #128	; 0x80
 8005c60:	d00a      	beq.n	8005c78 <UART_SetConfig+0x1f8>
 8005c62:	2b80      	cmp	r3, #128	; 0x80
 8005c64:	d814      	bhi.n	8005c90 <UART_SetConfig+0x210>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <UART_SetConfig+0x1f0>
 8005c6a:	2b40      	cmp	r3, #64	; 0x40
 8005c6c:	d008      	beq.n	8005c80 <UART_SetConfig+0x200>
 8005c6e:	e00f      	b.n	8005c90 <UART_SetConfig+0x210>
 8005c70:	2300      	movs	r3, #0
 8005c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c76:	e082      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c7e:	e07e      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c80:	2304      	movs	r3, #4
 8005c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c86:	e07a      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c88:	2308      	movs	r3, #8
 8005c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8e:	e076      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c90:	2310      	movs	r3, #16
 8005c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c96:	e072      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a35      	ldr	r2, [pc, #212]	; (8005d74 <UART_SetConfig+0x2f4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d12a      	bne.n	8005cf8 <UART_SetConfig+0x278>
 8005ca2:	4b30      	ldr	r3, [pc, #192]	; (8005d64 <UART_SetConfig+0x2e4>)
 8005ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cb0:	d01a      	beq.n	8005ce8 <UART_SetConfig+0x268>
 8005cb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cb6:	d81b      	bhi.n	8005cf0 <UART_SetConfig+0x270>
 8005cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cbc:	d00c      	beq.n	8005cd8 <UART_SetConfig+0x258>
 8005cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cc2:	d815      	bhi.n	8005cf0 <UART_SetConfig+0x270>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <UART_SetConfig+0x250>
 8005cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ccc:	d008      	beq.n	8005ce0 <UART_SetConfig+0x260>
 8005cce:	e00f      	b.n	8005cf0 <UART_SetConfig+0x270>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cd6:	e052      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cde:	e04e      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ce6:	e04a      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005ce8:	2308      	movs	r3, #8
 8005cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cee:	e046      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf6:	e042      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a17      	ldr	r2, [pc, #92]	; (8005d5c <UART_SetConfig+0x2dc>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d13a      	bne.n	8005d78 <UART_SetConfig+0x2f8>
 8005d02:	4b18      	ldr	r3, [pc, #96]	; (8005d64 <UART_SetConfig+0x2e4>)
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d10:	d01a      	beq.n	8005d48 <UART_SetConfig+0x2c8>
 8005d12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d16:	d81b      	bhi.n	8005d50 <UART_SetConfig+0x2d0>
 8005d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d1c:	d00c      	beq.n	8005d38 <UART_SetConfig+0x2b8>
 8005d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d22:	d815      	bhi.n	8005d50 <UART_SetConfig+0x2d0>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <UART_SetConfig+0x2b0>
 8005d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2c:	d008      	beq.n	8005d40 <UART_SetConfig+0x2c0>
 8005d2e:	e00f      	b.n	8005d50 <UART_SetConfig+0x2d0>
 8005d30:	2300      	movs	r3, #0
 8005d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d36:	e022      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d3e:	e01e      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005d40:	2304      	movs	r3, #4
 8005d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d46:	e01a      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d4e:	e016      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005d50:	2310      	movs	r3, #16
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d56:	e012      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005d58:	cfff69f3 	.word	0xcfff69f3
 8005d5c:	40008000 	.word	0x40008000
 8005d60:	40013800 	.word	0x40013800
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40004400 	.word	0x40004400
 8005d6c:	40004800 	.word	0x40004800
 8005d70:	40004c00 	.word	0x40004c00
 8005d74:	40005000 	.word	0x40005000
 8005d78:	2310      	movs	r3, #16
 8005d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4aae      	ldr	r2, [pc, #696]	; (800603c <UART_SetConfig+0x5bc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	f040 8097 	bne.w	8005eb8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d823      	bhi.n	8005dda <UART_SetConfig+0x35a>
 8005d92:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <UART_SetConfig+0x318>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005dbd 	.word	0x08005dbd
 8005d9c:	08005ddb 	.word	0x08005ddb
 8005da0:	08005dc5 	.word	0x08005dc5
 8005da4:	08005ddb 	.word	0x08005ddb
 8005da8:	08005dcb 	.word	0x08005dcb
 8005dac:	08005ddb 	.word	0x08005ddb
 8005db0:	08005ddb 	.word	0x08005ddb
 8005db4:	08005ddb 	.word	0x08005ddb
 8005db8:	08005dd3 	.word	0x08005dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dbc:	f7fd feca 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 8005dc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005dc2:	e010      	b.n	8005de6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dc4:	4b9e      	ldr	r3, [pc, #632]	; (8006040 <UART_SetConfig+0x5c0>)
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dc8:	e00d      	b.n	8005de6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dca:	f7fd fe2b 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 8005dce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005dd0:	e009      	b.n	8005de6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005dd8:	e005      	b.n	8005de6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005de4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8130 	beq.w	800604e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	4a94      	ldr	r2, [pc, #592]	; (8006044 <UART_SetConfig+0x5c4>)
 8005df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	4413      	add	r3, r2
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d305      	bcc.n	8005e1e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d903      	bls.n	8005e26 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e24:	e113      	b.n	800604e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	2200      	movs	r2, #0
 8005e2a:	60bb      	str	r3, [r7, #8]
 8005e2c:	60fa      	str	r2, [r7, #12]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	4a84      	ldr	r2, [pc, #528]	; (8006044 <UART_SetConfig+0x5c4>)
 8005e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e48:	f7fa fdf8 	bl	8000a3c <__aeabi_uldivmod>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4610      	mov	r0, r2
 8005e52:	4619      	mov	r1, r3
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	020b      	lsls	r3, r1, #8
 8005e5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e62:	0202      	lsls	r2, r0, #8
 8005e64:	6979      	ldr	r1, [r7, #20]
 8005e66:	6849      	ldr	r1, [r1, #4]
 8005e68:	0849      	lsrs	r1, r1, #1
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	4605      	mov	r5, r0
 8005e70:	eb12 0804 	adds.w	r8, r2, r4
 8005e74:	eb43 0905 	adc.w	r9, r3, r5
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	469a      	mov	sl, r3
 8005e80:	4693      	mov	fp, r2
 8005e82:	4652      	mov	r2, sl
 8005e84:	465b      	mov	r3, fp
 8005e86:	4640      	mov	r0, r8
 8005e88:	4649      	mov	r1, r9
 8005e8a:	f7fa fdd7 	bl	8000a3c <__aeabi_uldivmod>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4613      	mov	r3, r2
 8005e94:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e9c:	d308      	bcc.n	8005eb0 <UART_SetConfig+0x430>
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ea4:	d204      	bcs.n	8005eb0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6a3a      	ldr	r2, [r7, #32]
 8005eac:	60da      	str	r2, [r3, #12]
 8005eae:	e0ce      	b.n	800604e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005eb6:	e0ca      	b.n	800604e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec0:	d166      	bne.n	8005f90 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d827      	bhi.n	8005f1a <UART_SetConfig+0x49a>
 8005eca:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <UART_SetConfig+0x450>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005ef5 	.word	0x08005ef5
 8005ed4:	08005efd 	.word	0x08005efd
 8005ed8:	08005f05 	.word	0x08005f05
 8005edc:	08005f1b 	.word	0x08005f1b
 8005ee0:	08005f0b 	.word	0x08005f0b
 8005ee4:	08005f1b 	.word	0x08005f1b
 8005ee8:	08005f1b 	.word	0x08005f1b
 8005eec:	08005f1b 	.word	0x08005f1b
 8005ef0:	08005f13 	.word	0x08005f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ef4:	f7fd fe2e 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 8005ef8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005efa:	e014      	b.n	8005f26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005efc:	f7fd fe40 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 8005f00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f02:	e010      	b.n	8005f26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f04:	4b4e      	ldr	r3, [pc, #312]	; (8006040 <UART_SetConfig+0x5c0>)
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f08:	e00d      	b.n	8005f26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f0a:	f7fd fd8b 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 8005f0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f10:	e009      	b.n	8005f26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f18:	e005      	b.n	8005f26 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 8090 	beq.w	800604e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	4a44      	ldr	r2, [pc, #272]	; (8006044 <UART_SetConfig+0x5c4>)
 8005f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f40:	005a      	lsls	r2, r3, #1
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	085b      	lsrs	r3, r3, #1
 8005f48:	441a      	add	r2, r3
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f52:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	2b0f      	cmp	r3, #15
 8005f58:	d916      	bls.n	8005f88 <UART_SetConfig+0x508>
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f60:	d212      	bcs.n	8005f88 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f023 030f 	bic.w	r3, r3, #15
 8005f6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	085b      	lsrs	r3, r3, #1
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	f003 0307 	and.w	r3, r3, #7
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	8bfb      	ldrh	r3, [r7, #30]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	8bfa      	ldrh	r2, [r7, #30]
 8005f84:	60da      	str	r2, [r3, #12]
 8005f86:	e062      	b.n	800604e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f8e:	e05e      	b.n	800604e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d828      	bhi.n	8005fea <UART_SetConfig+0x56a>
 8005f98:	a201      	add	r2, pc, #4	; (adr r2, 8005fa0 <UART_SetConfig+0x520>)
 8005f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9e:	bf00      	nop
 8005fa0:	08005fc5 	.word	0x08005fc5
 8005fa4:	08005fcd 	.word	0x08005fcd
 8005fa8:	08005fd5 	.word	0x08005fd5
 8005fac:	08005feb 	.word	0x08005feb
 8005fb0:	08005fdb 	.word	0x08005fdb
 8005fb4:	08005feb 	.word	0x08005feb
 8005fb8:	08005feb 	.word	0x08005feb
 8005fbc:	08005feb 	.word	0x08005feb
 8005fc0:	08005fe3 	.word	0x08005fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc4:	f7fd fdc6 	bl	8003b54 <HAL_RCC_GetPCLK1Freq>
 8005fc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fca:	e014      	b.n	8005ff6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fcc:	f7fd fdd8 	bl	8003b80 <HAL_RCC_GetPCLK2Freq>
 8005fd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fd2:	e010      	b.n	8005ff6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fd4:	4b1a      	ldr	r3, [pc, #104]	; (8006040 <UART_SetConfig+0x5c0>)
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fd8:	e00d      	b.n	8005ff6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fda:	f7fd fd23 	bl	8003a24 <HAL_RCC_GetSysClockFreq>
 8005fde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fe0:	e009      	b.n	8005ff6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fe8:	e005      	b.n	8005ff6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ff4:	bf00      	nop
    }

    if (pclk != 0U)
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d028      	beq.n	800604e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	4a10      	ldr	r2, [pc, #64]	; (8006044 <UART_SetConfig+0x5c4>)
 8006002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006006:	461a      	mov	r2, r3
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	fbb3 f2f2 	udiv	r2, r3, r2
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	085b      	lsrs	r3, r3, #1
 8006014:	441a      	add	r2, r3
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	fbb2 f3f3 	udiv	r3, r2, r3
 800601e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	2b0f      	cmp	r3, #15
 8006024:	d910      	bls.n	8006048 <UART_SetConfig+0x5c8>
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800602c:	d20c      	bcs.n	8006048 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	b29a      	uxth	r2, r3
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60da      	str	r2, [r3, #12]
 8006038:	e009      	b.n	800604e <UART_SetConfig+0x5ce>
 800603a:	bf00      	nop
 800603c:	40008000 	.word	0x40008000
 8006040:	00f42400 	.word	0x00f42400
 8006044:	08006b24 	.word	0x08006b24
      }
      else
      {
        ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2201      	movs	r2, #1
 8006052:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2201      	movs	r2, #1
 800605a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2200      	movs	r2, #0
 8006062:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2200      	movs	r2, #0
 8006068:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800606a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800606e:	4618      	mov	r0, r3
 8006070:	3730      	adds	r7, #48	; 0x30
 8006072:	46bd      	mov	sp, r7
 8006074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00a      	beq.n	80060e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ea:	f003 0308 	and.w	r3, r3, #8
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01a      	beq.n	800618e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006176:	d10a      	bne.n	800618e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	605a      	str	r2, [r3, #4]
  }
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061cc:	f7fc f824 	bl	8002218 <HAL_GetTick>
 80061d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d10e      	bne.n	80061fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f82f 	bl	8006252 <UART_WaitOnFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e025      	b.n	800624a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b04      	cmp	r3, #4
 800620a:	d10e      	bne.n	800622a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800620c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f819 	bl	8006252 <UART_WaitOnFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e00f      	b.n	800624a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2220      	movs	r2, #32
 800622e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b09c      	sub	sp, #112	; 0x70
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	60b9      	str	r1, [r7, #8]
 800625c:	603b      	str	r3, [r7, #0]
 800625e:	4613      	mov	r3, r2
 8006260:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006262:	e0a9      	b.n	80063b8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626a:	f000 80a5 	beq.w	80063b8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800626e:	f7fb ffd3 	bl	8002218 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800627a:	429a      	cmp	r2, r3
 800627c:	d302      	bcc.n	8006284 <UART_WaitOnFlagUntilTimeout+0x32>
 800627e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006280:	2b00      	cmp	r3, #0
 8006282:	d140      	bne.n	8006306 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006294:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006298:	667b      	str	r3, [r7, #100]	; 0x64
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062aa:	e841 2300 	strex	r3, r2, [r1]
 80062ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1e6      	bne.n	8006284 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	3308      	adds	r3, #8
 80062bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c8:	f023 0301 	bic.w	r3, r3, #1
 80062cc:	663b      	str	r3, [r7, #96]	; 0x60
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3308      	adds	r3, #8
 80062d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80062d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1e5      	bne.n	80062b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e069      	b.n	80063da <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	d051      	beq.n	80063b8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800631e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006322:	d149      	bne.n	80063b8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800632c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006342:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634c:	637b      	str	r3, [r7, #52]	; 0x34
 800634e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006354:	e841 2300 	strex	r3, r2, [r1]
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800635a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e6      	bne.n	800632e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3308      	adds	r3, #8
 8006366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	e853 3f00 	ldrex	r3, [r3]
 800636e:	613b      	str	r3, [r7, #16]
   return(result);
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f023 0301 	bic.w	r3, r3, #1
 8006376:	66bb      	str	r3, [r7, #104]	; 0x68
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3308      	adds	r3, #8
 800637e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006380:	623a      	str	r2, [r7, #32]
 8006382:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	69f9      	ldr	r1, [r7, #28]
 8006386:	6a3a      	ldr	r2, [r7, #32]
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	61bb      	str	r3, [r7, #24]
   return(result);
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e5      	bne.n	8006360 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2220      	movs	r2, #32
 8006398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2220      	movs	r2, #32
 80063a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e010      	b.n	80063da <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	69da      	ldr	r2, [r3, #28]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	4013      	ands	r3, r2
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	bf0c      	ite	eq
 80063c8:	2301      	moveq	r3, #1
 80063ca:	2300      	movne	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	461a      	mov	r2, r3
 80063d0:	79fb      	ldrb	r3, [r7, #7]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	f43f af46 	beq.w	8006264 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3770      	adds	r7, #112	; 0x70
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b096      	sub	sp, #88	; 0x58
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	88fa      	ldrh	r2, [r7, #6]
 80063fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2222      	movs	r2, #34	; 0x22
 800640c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d02c      	beq.n	8006472 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800641c:	4a42      	ldr	r2, [pc, #264]	; (8006528 <UART_Start_Receive_DMA+0x144>)
 800641e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006424:	4a41      	ldr	r2, [pc, #260]	; (800652c <UART_Start_Receive_DMA+0x148>)
 8006426:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800642c:	4a40      	ldr	r2, [pc, #256]	; (8006530 <UART_Start_Receive_DMA+0x14c>)
 800642e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006434:	2200      	movs	r2, #0
 8006436:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3324      	adds	r3, #36	; 0x24
 8006442:	4619      	mov	r1, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006448:	461a      	mov	r2, r3
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	f7fc f8ce 	bl	80025ec <HAL_DMA_Start_IT>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00d      	beq.n	8006472 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2210      	movs	r2, #16
 800645a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2220      	movs	r2, #32
 800646a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e055      	b.n	800651e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d018      	beq.n	80064b4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006496:	657b      	str	r3, [r7, #84]	; 0x54
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80064a2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e6      	bne.n	8006482 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	f043 0301 	orr.w	r3, r3, #1
 80064ca:	653b      	str	r3, [r7, #80]	; 0x50
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3308      	adds	r3, #8
 80064d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064d4:	637a      	str	r2, [r7, #52]	; 0x34
 80064d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e5      	bne.n	80064b4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3308      	adds	r3, #8
 80064ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	613b      	str	r3, [r7, #16]
   return(result);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3308      	adds	r3, #8
 8006506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006508:	623a      	str	r2, [r7, #32]
 800650a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650c:	69f9      	ldr	r1, [r7, #28]
 800650e:	6a3a      	ldr	r2, [r7, #32]
 8006510:	e841 2300 	strex	r3, r2, [r1]
 8006514:	61bb      	str	r3, [r7, #24]
   return(result);
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e5      	bne.n	80064e8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3758      	adds	r7, #88	; 0x58
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	08006683 	.word	0x08006683
 800652c:	080067a9 	.word	0x080067a9
 8006530:	080067e1 	.word	0x080067e1

08006534 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b08f      	sub	sp, #60	; 0x3c
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	61fb      	str	r3, [r7, #28]
   return(result);
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006550:	637b      	str	r3, [r7, #52]	; 0x34
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800655a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800655c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e6      	bne.n	800653c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3308      	adds	r3, #8
 8006574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	e853 3f00 	ldrex	r3, [r3]
 800657c:	60bb      	str	r3, [r7, #8]
   return(result);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006584:	633b      	str	r3, [r7, #48]	; 0x30
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3308      	adds	r3, #8
 800658c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800658e:	61ba      	str	r2, [r7, #24]
 8006590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	6979      	ldr	r1, [r7, #20]
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	613b      	str	r3, [r7, #16]
   return(result);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e5      	bne.n	800656e <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80065aa:	bf00      	nop
 80065ac:	373c      	adds	r7, #60	; 0x3c
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b095      	sub	sp, #84	; 0x54
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065dc:	643b      	str	r3, [r7, #64]	; 0x40
 80065de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e6      	bne.n	80065be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3308      	adds	r3, #8
 80065f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006606:	f023 0301 	bic.w	r3, r3, #1
 800660a:	64bb      	str	r3, [r7, #72]	; 0x48
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3308      	adds	r3, #8
 8006612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006614:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800661a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e3      	bne.n	80065f0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d118      	bne.n	8006662 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	e853 3f00 	ldrex	r3, [r3]
 800663c:	60bb      	str	r3, [r7, #8]
   return(result);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f023 0310 	bic.w	r3, r3, #16
 8006644:	647b      	str	r3, [r7, #68]	; 0x44
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800664e:	61bb      	str	r3, [r7, #24]
 8006650:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006652:	6979      	ldr	r1, [r7, #20]
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	e841 2300 	strex	r3, r2, [r1]
 800665a:	613b      	str	r3, [r7, #16]
   return(result);
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1e6      	bne.n	8006630 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2220      	movs	r2, #32
 8006666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006676:	bf00      	nop
 8006678:	3754      	adds	r7, #84	; 0x54
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b09c      	sub	sp, #112	; 0x70
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b00      	cmp	r3, #0
 800669c:	d171      	bne.n	8006782 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800669e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a0:	2200      	movs	r2, #0
 80066a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80066bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80066c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e6      	bne.n	80066a6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3308      	adds	r3, #8
 80066de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ea:	f023 0301 	bic.w	r3, r3, #1
 80066ee:	667b      	str	r3, [r7, #100]	; 0x64
 80066f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3308      	adds	r3, #8
 80066f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80066f8:	647a      	str	r2, [r7, #68]	; 0x44
 80066fa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e5      	bne.n	80066d8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800670c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3308      	adds	r3, #8
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	e853 3f00 	ldrex	r3, [r3]
 800671a:	623b      	str	r3, [r7, #32]
   return(result);
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006722:	663b      	str	r3, [r7, #96]	; 0x60
 8006724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3308      	adds	r3, #8
 800672a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800672c:	633a      	str	r2, [r7, #48]	; 0x30
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006730:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006734:	e841 2300 	strex	r3, r2, [r1]
 8006738:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e5      	bne.n	800670c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006742:	2220      	movs	r2, #32
 8006744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800674c:	2b01      	cmp	r3, #1
 800674e:	d118      	bne.n	8006782 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	60fb      	str	r3, [r7, #12]
   return(result);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f023 0310 	bic.w	r3, r3, #16
 8006764:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	461a      	mov	r2, r3
 800676c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800676e:	61fb      	str	r3, [r7, #28]
 8006770:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	69b9      	ldr	r1, [r7, #24]
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	617b      	str	r3, [r7, #20]
   return(result);
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e6      	bne.n	8006750 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006786:	2b01      	cmp	r3, #1
 8006788:	d107      	bne.n	800679a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800678a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800678c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006790:	4619      	mov	r1, r3
 8006792:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006794:	f7ff f967 	bl	8005a66 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006798:	e002      	b.n	80067a0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800679a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800679c:	f7fa fad0 	bl	8000d40 <HAL_UART_RxCpltCallback>
}
 80067a0:	bf00      	nop
 80067a2:	3770      	adds	r7, #112	; 0x70
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d109      	bne.n	80067d2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067c4:	085b      	lsrs	r3, r3, #1
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	4619      	mov	r1, r3
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f7ff f94b 	bl	8005a66 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067d0:	e002      	b.n	80067d8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f7ff f933 	bl	8005a3e <HAL_UART_RxHalfCpltCallback>
}
 80067d8:	bf00      	nop
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006808:	2b80      	cmp	r3, #128	; 0x80
 800680a:	d109      	bne.n	8006820 <UART_DMAError+0x40>
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	2b21      	cmp	r3, #33	; 0x21
 8006810:	d106      	bne.n	8006820 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2200      	movs	r2, #0
 8006816:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800681a:	6978      	ldr	r0, [r7, #20]
 800681c:	f7ff fe8a 	bl	8006534 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	2b40      	cmp	r3, #64	; 0x40
 800682c:	d109      	bne.n	8006842 <UART_DMAError+0x62>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b22      	cmp	r3, #34	; 0x22
 8006832:	d106      	bne.n	8006842 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2200      	movs	r2, #0
 8006838:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800683c:	6978      	ldr	r0, [r7, #20]
 800683e:	f7ff feba 	bl	80065b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006848:	f043 0210 	orr.w	r2, r3, #16
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006852:	6978      	ldr	r0, [r7, #20]
 8006854:	f7ff f8fd 	bl	8005a52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006858:	bf00      	nop
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_UARTEx_EnableFifoMode+0x16>
 8006872:	2302      	movs	r3, #2
 8006874:	e02b      	b.n	80068ce <HAL_UARTEx_EnableFifoMode+0x6e>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2224      	movs	r2, #36	; 0x24
 8006882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0201 	bic.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80068ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f88a 	bl	80069d0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2220      	movs	r2, #32
 80068c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e02d      	b.n	800694a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2224      	movs	r2, #36	; 0x24
 80068fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0201 	bic.w	r2, r2, #1
 8006914:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f850 	bl	80069d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006966:	2302      	movs	r3, #2
 8006968:	e02d      	b.n	80069c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2224      	movs	r2, #36	; 0x24
 8006976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0201 	bic.w	r2, r2, #1
 8006990:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f812 	bl	80069d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d108      	bne.n	80069f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069f0:	e031      	b.n	8006a56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069f2:	2308      	movs	r3, #8
 80069f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069f6:	2308      	movs	r3, #8
 80069f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	0e5b      	lsrs	r3, r3, #25
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	0f5b      	lsrs	r3, r3, #29
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	f003 0307 	and.w	r3, r3, #7
 8006a18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	7b3a      	ldrb	r2, [r7, #12]
 8006a1e:	4911      	ldr	r1, [pc, #68]	; (8006a64 <UARTEx_SetNbDataToProcess+0x94>)
 8006a20:	5c8a      	ldrb	r2, [r1, r2]
 8006a22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a26:	7b3a      	ldrb	r2, [r7, #12]
 8006a28:	490f      	ldr	r1, [pc, #60]	; (8006a68 <UARTEx_SetNbDataToProcess+0x98>)
 8006a2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
 8006a3a:	7b7a      	ldrb	r2, [r7, #13]
 8006a3c:	4909      	ldr	r1, [pc, #36]	; (8006a64 <UARTEx_SetNbDataToProcess+0x94>)
 8006a3e:	5c8a      	ldrb	r2, [r1, r2]
 8006a40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a44:	7b7a      	ldrb	r2, [r7, #13]
 8006a46:	4908      	ldr	r1, [pc, #32]	; (8006a68 <UARTEx_SetNbDataToProcess+0x98>)
 8006a48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006a56:	bf00      	nop
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	08006b3c 	.word	0x08006b3c
 8006a68:	08006b44 	.word	0x08006b44

08006a6c <__libc_init_array>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	4d0d      	ldr	r5, [pc, #52]	; (8006aa4 <__libc_init_array+0x38>)
 8006a70:	4c0d      	ldr	r4, [pc, #52]	; (8006aa8 <__libc_init_array+0x3c>)
 8006a72:	1b64      	subs	r4, r4, r5
 8006a74:	10a4      	asrs	r4, r4, #2
 8006a76:	2600      	movs	r6, #0
 8006a78:	42a6      	cmp	r6, r4
 8006a7a:	d109      	bne.n	8006a90 <__libc_init_array+0x24>
 8006a7c:	4d0b      	ldr	r5, [pc, #44]	; (8006aac <__libc_init_array+0x40>)
 8006a7e:	4c0c      	ldr	r4, [pc, #48]	; (8006ab0 <__libc_init_array+0x44>)
 8006a80:	f000 f820 	bl	8006ac4 <_init>
 8006a84:	1b64      	subs	r4, r4, r5
 8006a86:	10a4      	asrs	r4, r4, #2
 8006a88:	2600      	movs	r6, #0
 8006a8a:	42a6      	cmp	r6, r4
 8006a8c:	d105      	bne.n	8006a9a <__libc_init_array+0x2e>
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a94:	4798      	blx	r3
 8006a96:	3601      	adds	r6, #1
 8006a98:	e7ee      	b.n	8006a78 <__libc_init_array+0xc>
 8006a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a9e:	4798      	blx	r3
 8006aa0:	3601      	adds	r6, #1
 8006aa2:	e7f2      	b.n	8006a8a <__libc_init_array+0x1e>
 8006aa4:	08006b54 	.word	0x08006b54
 8006aa8:	08006b54 	.word	0x08006b54
 8006aac:	08006b54 	.word	0x08006b54
 8006ab0:	08006b58 	.word	0x08006b58

08006ab4 <memset>:
 8006ab4:	4402      	add	r2, r0
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d100      	bne.n	8006abe <memset+0xa>
 8006abc:	4770      	bx	lr
 8006abe:	f803 1b01 	strb.w	r1, [r3], #1
 8006ac2:	e7f9      	b.n	8006ab8 <memset+0x4>

08006ac4 <_init>:
 8006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac6:	bf00      	nop
 8006ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aca:	bc08      	pop	{r3}
 8006acc:	469e      	mov	lr, r3
 8006ace:	4770      	bx	lr

08006ad0 <_fini>:
 8006ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad2:	bf00      	nop
 8006ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad6:	bc08      	pop	{r3}
 8006ad8:	469e      	mov	lr, r3
 8006ada:	4770      	bx	lr
