
tcl_remote_GPIO_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003808  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003994  08003994  00013994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d4  080039d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080039d4  080039d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d4  080039d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000000c  080039e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080039e8  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab97  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017c3  00000000  00000000  0002abd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002c398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002cea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f09b  00000000  00000000  0002d900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b553  00000000  00000000  0004c99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0418  00000000  00000000  00057eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118306  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc8  00000000  00000000  00118358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800397c 	.word	0x0800397c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800397c 	.word	0x0800397c

080001cc <send_bit>:
void delay_us(uint16_t us);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_bit(int bit) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	if (bit) {
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d010      	beq.n	80001fc <send_bit+0x30>

		TIM2->CCR1 = 52;
 80001da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001de:	2234      	movs	r2, #52	; 0x34
 80001e0:	635a      	str	r2, [r3, #52]	; 0x34
		delay_us(1050);
 80001e2:	f240 401a 	movw	r0, #1050	; 0x41a
 80001e6:	f000 f81d 	bl	8000224 <delay_us>
		TIM2->CCR1 = 0;
 80001ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ee:	2200      	movs	r2, #0
 80001f0:	635a      	str	r2, [r3, #52]	; 0x34
		delay_us(3050);
 80001f2:	f640 30ea 	movw	r0, #3050	; 0xbea
 80001f6:	f000 f815 	bl	8000224 <delay_us>
		TIM2->CCR1 = 52;
		delay_us(1050);
		TIM2->CCR1 = 0;
		delay_us(1050);
	}
}
 80001fa:	e00f      	b.n	800021c <send_bit+0x50>
		TIM2->CCR1 = 52;
 80001fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000200:	2234      	movs	r2, #52	; 0x34
 8000202:	635a      	str	r2, [r3, #52]	; 0x34
		delay_us(1050);
 8000204:	f240 401a 	movw	r0, #1050	; 0x41a
 8000208:	f000 f80c 	bl	8000224 <delay_us>
		TIM2->CCR1 = 0;
 800020c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000210:	2200      	movs	r2, #0
 8000212:	635a      	str	r2, [r3, #52]	; 0x34
		delay_us(1050);
 8000214:	f240 401a 	movw	r0, #1050	; 0x41a
 8000218:	f000 f804 	bl	8000224 <delay_us>
}
 800021c:	bf00      	nop
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}

08000224 <delay_us>:


void delay_us(uint16_t us) {
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 800022e:	4b09      	ldr	r3, [pc, #36]	; (8000254 <delay_us+0x30>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2200      	movs	r2, #0
 8000234:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000236:	bf00      	nop
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <delay_us+0x30>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800023e:	88fb      	ldrh	r3, [r7, #6]
 8000240:	429a      	cmp	r2, r3
 8000242:	d3f9      	bcc.n	8000238 <delay_us+0x14>
}
 8000244:	bf00      	nop
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <delay_ms>:

void delay_ms(uint16_t ms) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	80fb      	strh	r3, [r7, #6]
//	__HAL_TIM_SET_COUNTER(&htim15,0);
//	while (__HAL_TIM_GET_COUNTER(&htim15) < ms);

	int ms_elapsed = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
	while(ms_elapsed < ms) {
 8000266:	e006      	b.n	8000276 <delay_ms+0x1e>
		delay_us(1000);
 8000268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800026c:	f7ff ffda 	bl	8000224 <delay_us>
		++ms_elapsed;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	3301      	adds	r3, #1
 8000274:	60fb      	str	r3, [r7, #12]
	while(ms_elapsed < ms) {
 8000276:	88fb      	ldrh	r3, [r7, #6]
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	429a      	cmp	r2, r3
 800027c:	dbf4      	blt.n	8000268 <delay_ms+0x10>
	}

}
 800027e:	bf00      	nop
 8000280:	bf00      	nop
 8000282:	3710      	adds	r7, #16
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b08a      	sub	sp, #40	; 0x28
 800028c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028e:	f001 f804 	bl	800129a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000292:	f000 f999 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000296:	f000 fb2f 	bl	80008f8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800029a:	f000 f9db 	bl	8000654 <MX_TIM1_Init>
  MX_TIM2_Init();
 800029e:	f000 fa2d 	bl	80006fc <MX_TIM2_Init>
  MX_TIM7_Init();
 80002a2:	f000 faa1 	bl	80007e8 <MX_TIM7_Init>
  MX_TIM15_Init();
 80002a6:	f000 fad5 	bl	8000854 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80002aa:	48a6      	ldr	r0, [pc, #664]	; (8000544 <main+0x2bc>)
 80002ac:	f002 fa0e 	bl	80026cc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002b0:	2100      	movs	r1, #0
 80002b2:	48a5      	ldr	r0, [pc, #660]	; (8000548 <main+0x2c0>)
 80002b4:	f002 fb0c 	bl	80028d0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 80002b8:	48a4      	ldr	r0, [pc, #656]	; (800054c <main+0x2c4>)
 80002ba:	f002 fa53 	bl	8002764 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim15);
 80002be:	48a4      	ldr	r0, [pc, #656]	; (8000550 <main+0x2c8>)
 80002c0:	f002 fa04 	bl	80026cc <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80002c4:	2201      	movs	r2, #1
 80002c6:	2102      	movs	r1, #2
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002cc:	f001 fb12 	bl	80018f4 <HAL_GPIO_WritePin>
  while (1)
  {

//	  switchStart:

		switch(global_state) {
 80002d0:	4ba0      	ldr	r3, [pc, #640]	; (8000554 <main+0x2cc>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b05      	cmp	r3, #5
 80002d6:	d8fb      	bhi.n	80002d0 <main+0x48>
 80002d8:	a201      	add	r2, pc, #4	; (adr r2, 80002e0 <main+0x58>)
 80002da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002de:	bf00      	nop
 80002e0:	080002f9 	.word	0x080002f9
 80002e4:	08000313 	.word	0x08000313
 80002e8:	080003d7 	.word	0x080003d7
 80002ec:	080003f1 	.word	0x080003f1
 80002f0:	080002d1 	.word	0x080002d1
 80002f4:	080004e5 	.word	0x080004e5
		case idle:

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2180      	movs	r1, #128	; 0x80
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000300:	f001 faf8 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2140      	movs	r1, #64	; 0x40
 8000308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030c:	f001 faf2 	bl	80018f4 <HAL_GPIO_WritePin>

			break;
 8000310:	e157      	b.n	80005c2 <main+0x33a>

		case send_signal:


			for (int t = 0; t < 5; ++t) {
 8000312:	2300      	movs	r3, #0
 8000314:	627b      	str	r3, [r7, #36]	; 0x24
 8000316:	e057      	b.n	80003c8 <main+0x140>
				// Leading frame

				TIM2->CCR1 = 52;
 8000318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800031c:	2234      	movs	r2, #52	; 0x34
 800031e:	635a      	str	r2, [r3, #52]	; 0x34
				delay_us(16050);
 8000320:	f643 60b2 	movw	r0, #16050	; 0x3eb2
 8000324:	f7ff ff7e 	bl	8000224 <delay_us>
				TIM2->CCR1 = 0;
 8000328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800032c:	2200      	movs	r2, #0
 800032e:	635a      	str	r2, [r3, #52]	; 0x34
				delay_us(8050);
 8000330:	f641 7072 	movw	r0, #8050	; 0x1f72
 8000334:	f7ff ff76 	bl	8000224 <delay_us>


				int checksum = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	623b      	str	r3, [r7, #32]
				int command = button_num;
 800033c:	4b86      	ldr	r3, [pc, #536]	; (8000558 <main+0x2d0>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	60bb      	str	r3, [r7, #8]

				// 4-bit command
				for (int i = 0; i < 4; ++i) {
 8000342:	2300      	movs	r3, #0
 8000344:	61fb      	str	r3, [r7, #28]
 8000346:	e014      	b.n	8000372 <main+0xea>
					int bit = 1 & (command >> (3-i));
 8000348:	69fb      	ldr	r3, [r7, #28]
 800034a:	f1c3 0303 	rsb	r3, r3, #3
 800034e:	68ba      	ldr	r2, [r7, #8]
 8000350:	fa42 f303 	asr.w	r3, r2, r3
 8000354:	f003 0301 	and.w	r3, r3, #1
 8000358:	603b      	str	r3, [r7, #0]

					if (bit) {
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d002      	beq.n	8000366 <main+0xde>
						++checksum;
 8000360:	6a3b      	ldr	r3, [r7, #32]
 8000362:	3301      	adds	r3, #1
 8000364:	623b      	str	r3, [r7, #32]
					}

					send_bit(bit);
 8000366:	6838      	ldr	r0, [r7, #0]
 8000368:	f7ff ff30 	bl	80001cc <send_bit>
				for (int i = 0; i < 4; ++i) {
 800036c:	69fb      	ldr	r3, [r7, #28]
 800036e:	3301      	adds	r3, #1
 8000370:	61fb      	str	r3, [r7, #28]
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	2b03      	cmp	r3, #3
 8000376:	dde7      	ble.n	8000348 <main+0xc0>
				}


				// 3-bit checksum
				for (int i = 0; i < 3; ++i) {
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
 800037c:	e00e      	b.n	800039c <main+0x114>
					int bit = 1 & (checksum >> (2-i));
 800037e:	69bb      	ldr	r3, [r7, #24]
 8000380:	f1c3 0302 	rsb	r3, r3, #2
 8000384:	6a3a      	ldr	r2, [r7, #32]
 8000386:	fa42 f303 	asr.w	r3, r2, r3
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	607b      	str	r3, [r7, #4]

					send_bit(bit);
 8000390:	6878      	ldr	r0, [r7, #4]
 8000392:	f7ff ff1b 	bl	80001cc <send_bit>
				for (int i = 0; i < 3; ++i) {
 8000396:	69bb      	ldr	r3, [r7, #24]
 8000398:	3301      	adds	r3, #1
 800039a:	61bb      	str	r3, [r7, #24]
 800039c:	69bb      	ldr	r3, [r7, #24]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	dded      	ble.n	800037e <main+0xf6>
				}


				// End frame

				TIM2->CCR1 = 52;
 80003a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a6:	2234      	movs	r2, #52	; 0x34
 80003a8:	635a      	str	r2, [r3, #52]	; 0x34
				delay_us(2050);
 80003aa:	f640 0002 	movw	r0, #2050	; 0x802
 80003ae:	f7ff ff39 	bl	8000224 <delay_us>
				TIM2->CCR1 = 0;
 80003b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b6:	2200      	movs	r2, #0
 80003b8:	635a      	str	r2, [r3, #52]	; 0x34


				delay_us(10000);
 80003ba:	f242 7010 	movw	r0, #10000	; 0x2710
 80003be:	f7ff ff31 	bl	8000224 <delay_us>
			for (int t = 0; t < 5; ++t) {
 80003c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c4:	3301      	adds	r3, #1
 80003c6:	627b      	str	r3, [r7, #36]	; 0x24
 80003c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ca:	2b04      	cmp	r3, #4
 80003cc:	dda4      	ble.n	8000318 <main+0x90>

			}


			global_state = idle;
 80003ce:	4b61      	ldr	r3, [pc, #388]	; (8000554 <main+0x2cc>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	701a      	strb	r2, [r3, #0]

			break;
 80003d4:	e0f5      	b.n	80005c2 <main+0x33a>

		case wait_for_input:


			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2180      	movs	r1, #128	; 0x80
 80003da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003de:	f001 fa89 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2140      	movs	r1, #64	; 0x40
 80003e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ea:	f001 fa83 	bl	80018f4 <HAL_GPIO_WritePin>

			break;
 80003ee:	e0e8      	b.n	80005c2 <main+0x33a>

		case receive_NEC_signal:

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2180      	movs	r1, #128	; 0x80
 80003f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f8:	f001 fa7c 	bl	80018f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2140      	movs	r1, #64	; 0x40
 8000400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000404:	f001 fa76 	bl	80018f4 <HAL_GPIO_WritePin>
			// wait for signal
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) && global_state == receive_NEC_signal);
 8000408:	bf00      	nop
 800040a:	2104      	movs	r1, #4
 800040c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000410:	f001 fa58 	bl	80018c4 <HAL_GPIO_ReadPin>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d003      	beq.n	8000422 <main+0x19a>
 800041a:	4b4e      	ldr	r3, [pc, #312]	; (8000554 <main+0x2cc>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b03      	cmp	r3, #3
 8000420:	d0f3      	beq.n	800040a <main+0x182>

			if (global_state == receive_NEC_signal) {
 8000422:	4b4c      	ldr	r3, [pc, #304]	; (8000554 <main+0x2cc>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b03      	cmp	r3, #3
 8000428:	d158      	bne.n	80004dc <main+0x254>

				// Leading frame
				while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)); // 9ms
 800042a:	bf00      	nop
 800042c:	2104      	movs	r1, #4
 800042e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000432:	f001 fa47 	bl	80018c4 <HAL_GPIO_ReadPin>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d0f7      	beq.n	800042c <main+0x1a4>
				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)); // 4.5ms
 800043c:	bf00      	nop
 800043e:	2104      	movs	r1, #4
 8000440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000444:	f001 fa3e 	bl	80018c4 <HAL_GPIO_ReadPin>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d1f7      	bne.n	800043e <main+0x1b6>


				// Read 32 bits

				for (int i = 0; i < 32; ++i) {
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
 8000452:	e027      	b.n	80004a4 <main+0x21c>

					while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)); // 562.5 us burst
 8000454:	bf00      	nop
 8000456:	2104      	movs	r1, #4
 8000458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045c:	f001 fa32 	bl	80018c4 <HAL_GPIO_ReadPin>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d0f7      	beq.n	8000456 <main+0x1ce>


					__HAL_TIM_SET_COUNTER(&htim1,0);
 8000466:	4b37      	ldr	r3, [pc, #220]	; (8000544 <main+0x2bc>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2200      	movs	r2, #0
 800046c:	625a      	str	r2, [r3, #36]	; 0x24
					while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2));
 800046e:	bf00      	nop
 8000470:	2104      	movs	r1, #4
 8000472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000476:	f001 fa25 	bl	80018c4 <HAL_GPIO_ReadPin>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d1f7      	bne.n	8000470 <main+0x1e8>

					if (__HAL_TIM_GET_COUNTER(&htim1) > 1000) {
 8000480:	4b30      	ldr	r3, [pc, #192]	; (8000544 <main+0x2bc>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800048a:	d908      	bls.n	800049e <main+0x216>

						// 1b
						received_data |= (1 << (31-i));
 800048c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	40da      	lsrs	r2, r3
 8000494:	4b31      	ldr	r3, [pc, #196]	; (800055c <main+0x2d4>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4313      	orrs	r3, r2
 800049a:	4a30      	ldr	r2, [pc, #192]	; (800055c <main+0x2d4>)
 800049c:	6013      	str	r3, [r2, #0]
				for (int i = 0; i < 32; ++i) {
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	3301      	adds	r3, #1
 80004a2:	617b      	str	r3, [r7, #20]
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	2b1f      	cmp	r3, #31
 80004a8:	ddd4      	ble.n	8000454 <main+0x1cc>
					}

				}


				while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)); // 562.5 us final burst
 80004aa:	bf00      	nop
 80004ac:	2104      	movs	r1, #4
 80004ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b2:	f001 fa07 	bl	80018c4 <HAL_GPIO_ReadPin>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d0f7      	beq.n	80004ac <main+0x224>

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c4:	f001 fa16 	bl	80018f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2140      	movs	r1, #64	; 0x40
 80004cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d0:	f001 fa10 	bl	80018f4 <HAL_GPIO_WritePin>
				global_state = assign_button;
 80004d4:	4b1f      	ldr	r3, [pc, #124]	; (8000554 <main+0x2cc>)
 80004d6:	2204      	movs	r2, #4
 80004d8:	701a      	strb	r2, [r3, #0]
				global_state = idle;

			}


			break;
 80004da:	e072      	b.n	80005c2 <main+0x33a>
				global_state = idle;
 80004dc:	4b1d      	ldr	r3, [pc, #116]	; (8000554 <main+0x2cc>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
			break;
 80004e2:	e06e      	b.n	80005c2 <main+0x33a>

			break;
		case send_NEC_signal:


			for (int t = 0; t < 3; ++t) {
 80004e4:	2300      	movs	r3, #0
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	e064      	b.n	80005b4 <main+0x32c>

				// Leading frame
				TIM2->CCR1 = 52;
 80004ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ee:	2234      	movs	r2, #52	; 0x34
 80004f0:	635a      	str	r2, [r3, #52]	; 0x34
				delay_us(8810);
 80004f2:	f242 206a 	movw	r0, #8810	; 0x226a
 80004f6:	f7ff fe95 	bl	8000224 <delay_us>
				TIM2->CCR1 = 0;
 80004fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004fe:	2200      	movs	r2, #0
 8000500:	635a      	str	r2, [r3, #52]	; 0x34
				delay_us(4454);
 8000502:	f241 1066 	movw	r0, #4454	; 0x1166
 8000506:	f7ff fe8d 	bl	8000224 <delay_us>



				// Send 32-bit data

				for (int i = 0; i < 32; ++i) {
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	e03c      	b.n	800058a <main+0x302>

					if (queue_data & (1 << (31-i))) {
 8000510:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	40da      	lsrs	r2, r3
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <main+0x2d8>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4013      	ands	r3, r2
 800051e:	2b00      	cmp	r3, #0
 8000520:	d020      	beq.n	8000564 <main+0x2dc>

						TIM2->CCR1 = 52;
 8000522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000526:	2234      	movs	r2, #52	; 0x34
 8000528:	635a      	str	r2, [r3, #52]	; 0x34
						delay_us(527);
 800052a:	f240 200f 	movw	r0, #527	; 0x20f
 800052e:	f7ff fe79 	bl	8000224 <delay_us>
						TIM2->CCR1 = 0;
 8000532:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000536:	2200      	movs	r2, #0
 8000538:	635a      	str	r2, [r3, #52]	; 0x34
						delay_us(1670);
 800053a:	f240 6086 	movw	r0, #1670	; 0x686
 800053e:	f7ff fe71 	bl	8000224 <delay_us>
 8000542:	e01f      	b.n	8000584 <main+0x2fc>
 8000544:	20000028 	.word	0x20000028
 8000548:	20000074 	.word	0x20000074
 800054c:	200000c0 	.word	0x200000c0
 8000550:	2000010c 	.word	0x2000010c
 8000554:	20000160 	.word	0x20000160
 8000558:	20000158 	.word	0x20000158
 800055c:	20000164 	.word	0x20000164
 8000560:	20000168 	.word	0x20000168

					} else {

						TIM2->CCR1 = 52;
 8000564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000568:	2234      	movs	r2, #52	; 0x34
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
						delay_us(527);
 800056c:	f240 200f 	movw	r0, #527	; 0x20f
 8000570:	f7ff fe58 	bl	8000224 <delay_us>
						TIM2->CCR1 = 0;
 8000574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000578:	2200      	movs	r2, #0
 800057a:	635a      	str	r2, [r3, #52]	; 0x34
						delay_us(562);
 800057c:	f240 2032 	movw	r0, #562	; 0x232
 8000580:	f7ff fe50 	bl	8000224 <delay_us>
				for (int i = 0; i < 32; ++i) {
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	3301      	adds	r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b1f      	cmp	r3, #31
 800058e:	ddbf      	ble.n	8000510 <main+0x288>

				}

				// Final burst

				TIM2->CCR1 = 52;
 8000590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000594:	2234      	movs	r2, #52	; 0x34
 8000596:	635a      	str	r2, [r3, #52]	; 0x34
				delay_us(527);
 8000598:	f240 200f 	movw	r0, #527	; 0x20f
 800059c:	f7ff fe42 	bl	8000224 <delay_us>
				TIM2->CCR1 = 0;
 80005a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a4:	2200      	movs	r2, #0
 80005a6:	635a      	str	r2, [r3, #52]	; 0x34


				HAL_Delay(36);
 80005a8:	2024      	movs	r0, #36	; 0x24
 80005aa:	f000 feeb 	bl	8001384 <HAL_Delay>
			for (int t = 0; t < 3; ++t) {
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	3301      	adds	r3, #1
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	dd97      	ble.n	80004ea <main+0x262>

			}


			global_state = idle;
 80005ba:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <main+0x33c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]


			break;
 80005c0:	bf00      	nop
		switch(global_state) {
 80005c2:	e685      	b.n	80002d0 <main+0x48>
 80005c4:	20000160 	.word	0x20000160

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b096      	sub	sp, #88	; 0x58
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	2244      	movs	r2, #68	; 0x44
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 f9c8 	bl	800396c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	463b      	mov	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ee:	f001 f9bf 	bl	8001970 <HAL_PWREx_ControlVoltageScaling>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f8:	f000 fd0e 	bl	8001018 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005fc:	2310      	movs	r3, #16
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000608:	2360      	movs	r3, #96	; 0x60
 800060a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800060c:	2300      	movs	r3, #0
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fa01 	bl	8001a1c <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000620:	f000 fcfa 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fe01 	bl	8002244 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000648:	f000 fce6 	bl	8001018 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3758      	adds	r7, #88	; 0x58
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000672:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <MX_TIM1_Init+0xa0>)
 8000674:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <MX_TIM1_Init+0xa4>)
 8000676:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8000678:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_TIM1_Init+0xa0>)
 800067a:	2203      	movs	r2, #3
 800067c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_TIM1_Init+0xa0>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_TIM1_Init+0xa0>)
 8000686:	f64e 2260 	movw	r2, #60000	; 0xea60
 800068a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_TIM1_Init+0xa0>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_TIM1_Init+0xa0>)
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_TIM1_Init+0xa0>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800069e:	4815      	ldr	r0, [pc, #84]	; (80006f4 <MX_TIM1_Init+0xa0>)
 80006a0:	f001 ffbc 	bl	800261c <HAL_TIM_Base_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006aa:	f000 fcb5 	bl	8001018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4619      	mov	r1, r3
 80006ba:	480e      	ldr	r0, [pc, #56]	; (80006f4 <MX_TIM1_Init+0xa0>)
 80006bc:	f002 fc1a 	bl	8002ef4 <HAL_TIM_ConfigClockSource>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80006c6:	f000 fca7 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <MX_TIM1_Init+0xa0>)
 80006dc:	f003 f89e 	bl	800381c <HAL_TIMEx_MasterConfigSynchronization>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80006e6:	f000 fc97 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000028 	.word	0x20000028
 80006f8:	40012c00 	.word	0x40012c00

080006fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071c:	463b      	mov	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
 800072a:	615a      	str	r2, [r3, #20]
 800072c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800072e:	4b2d      	ldr	r3, [pc, #180]	; (80007e4 <MX_TIM2_Init+0xe8>)
 8000730:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000734:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000736:	4b2b      	ldr	r3, [pc, #172]	; (80007e4 <MX_TIM2_Init+0xe8>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <MX_TIM2_Init+0xe8>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104;
 8000742:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <MX_TIM2_Init+0xe8>)
 8000744:	2268      	movs	r2, #104	; 0x68
 8000746:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <MX_TIM2_Init+0xe8>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800074e:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <MX_TIM2_Init+0xe8>)
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000754:	4823      	ldr	r0, [pc, #140]	; (80007e4 <MX_TIM2_Init+0xe8>)
 8000756:	f001 ff61 	bl	800261c <HAL_TIM_Base_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000760:	f000 fc5a 	bl	8001018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800076a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076e:	4619      	mov	r1, r3
 8000770:	481c      	ldr	r0, [pc, #112]	; (80007e4 <MX_TIM2_Init+0xe8>)
 8000772:	f002 fbbf 	bl	8002ef4 <HAL_TIM_ConfigClockSource>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800077c:	f000 fc4c 	bl	8001018 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000780:	4818      	ldr	r0, [pc, #96]	; (80007e4 <MX_TIM2_Init+0xe8>)
 8000782:	f002 f843 	bl	800280c <HAL_TIM_PWM_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800078c:	f000 fc44 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4619      	mov	r1, r3
 800079e:	4811      	ldr	r0, [pc, #68]	; (80007e4 <MX_TIM2_Init+0xe8>)
 80007a0:	f003 f83c 	bl	800381c <HAL_TIMEx_MasterConfigSynchronization>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007aa:	f000 fc35 	bl	8001018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ae:	2360      	movs	r3, #96	; 0x60
 80007b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	4619      	mov	r1, r3
 80007c4:	4807      	ldr	r0, [pc, #28]	; (80007e4 <MX_TIM2_Init+0xe8>)
 80007c6:	f002 fa81 	bl	8002ccc <HAL_TIM_PWM_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007d0:	f000 fc22 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007d4:	4803      	ldr	r0, [pc, #12]	; (80007e4 <MX_TIM2_Init+0xe8>)
 80007d6:	f000 fca9 	bl	800112c <HAL_TIM_MspPostInit>

}
 80007da:	bf00      	nop
 80007dc:	3738      	adds	r7, #56	; 0x38
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000074 	.word	0x20000074

080007e8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_TIM7_Init+0x64>)
 80007fa:	4a15      	ldr	r2, [pc, #84]	; (8000850 <MX_TIM7_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4-1;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_TIM7_Init+0x64>)
 8000800:	2203      	movs	r2, #3
 8000802:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_TIM7_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_TIM7_Init+0x64>)
 800080c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000810:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_TIM7_Init+0x64>)
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_TIM7_Init+0x64>)
 800081a:	f001 feff 	bl	800261c <HAL_TIM_Base_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000824:	f000 fbf8 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_TIM7_Init+0x64>)
 8000836:	f002 fff1 	bl	800381c <HAL_TIMEx_MasterConfigSynchronization>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000840:	f000 fbea 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000c0 	.word	0x200000c0
 8000850:	40001400 	.word	0x40001400

08000854 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <MX_TIM15_Init+0x9c>)
 8000874:	4a1f      	ldr	r2, [pc, #124]	; (80008f4 <MX_TIM15_Init+0xa0>)
 8000876:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 4000-1;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_TIM15_Init+0x9c>)
 800087a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800087e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_TIM15_Init+0x9c>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_TIM15_Init+0x9c>)
 8000888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800088c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_TIM15_Init+0x9c>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_TIM15_Init+0x9c>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_TIM15_Init+0x9c>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80008a0:	4813      	ldr	r0, [pc, #76]	; (80008f0 <MX_TIM15_Init+0x9c>)
 80008a2:	f001 febb 	bl	800261c <HAL_TIM_Base_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80008ac:	f000 fbb4 	bl	8001018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	4619      	mov	r1, r3
 80008bc:	480c      	ldr	r0, [pc, #48]	; (80008f0 <MX_TIM15_Init+0x9c>)
 80008be:	f002 fb19 	bl	8002ef4 <HAL_TIM_ConfigClockSource>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80008c8:	f000 fba6 	bl	8001018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_TIM15_Init+0x9c>)
 80008da:	f002 ff9f 	bl	800381c <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80008e4:	f000 fb98 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000010c 	.word	0x2000010c
 80008f4:	40014000 	.word	0x40014000

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b3f      	ldr	r3, [pc, #252]	; (8000a0c <MX_GPIO_Init+0x114>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a3e      	ldr	r2, [pc, #248]	; (8000a0c <MX_GPIO_Init+0x114>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b3c      	ldr	r3, [pc, #240]	; (8000a0c <MX_GPIO_Init+0x114>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b39      	ldr	r3, [pc, #228]	; (8000a0c <MX_GPIO_Init+0x114>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a38      	ldr	r2, [pc, #224]	; (8000a0c <MX_GPIO_Init+0x114>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b36      	ldr	r3, [pc, #216]	; (8000a0c <MX_GPIO_Init+0x114>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f000 ffd4 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2181      	movs	r1, #129	; 0x81
 8000950:	482f      	ldr	r0, [pc, #188]	; (8000a10 <MX_GPIO_Init+0x118>)
 8000952:	f000 ffcf 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000956:	2304      	movs	r3, #4
 8000958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f000 fe40 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12;
 8000970:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
 8000974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098c:	f000 fe30 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8000990:	2381      	movs	r3, #129	; 0x81
 8000992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	4619      	mov	r1, r3
 80009a6:	481a      	ldr	r0, [pc, #104]	; (8000a10 <MX_GPIO_Init+0x118>)
 80009a8:	f000 fe22 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80009ac:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80009b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009b8:	2302      	movs	r3, #2
 80009ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c6:	f000 fe13 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009ca:	2320      	movs	r3, #32
 80009cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009d4:	2302      	movs	r3, #2
 80009d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <MX_GPIO_Init+0x118>)
 80009e0:	f000 fe06 	bl	80015f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	2017      	movs	r0, #23
 80009ea:	f000 fdca 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009ee:	2017      	movs	r0, #23
 80009f0:	f000 fde3 	bl	80015ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	2028      	movs	r0, #40	; 0x28
 80009fa:	f000 fdc2 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009fe:	2028      	movs	r0, #40	; 0x28
 8000a00:	f000 fddb 	bl	80015ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	48000400 	.word	0x48000400

08000a14 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]



		if (GPIO_Pin == GPIO_PIN_5) {
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	2b20      	cmp	r3, #32
 8000a22:	f040 80d3 	bne.w	8000bcc <HAL_GPIO_EXTI_Callback+0x1b8>


			switch(output_state) {
 8000a26:	4ba5      	ldr	r3, [pc, #660]	; (8000cbc <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	f000 808c 	beq.w	8000b48 <HAL_GPIO_EXTI_Callback+0x134>
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	f300 80d2 	bgt.w	8000bda <HAL_GPIO_EXTI_Callback+0x1c6>
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d002      	beq.n	8000a40 <HAL_GPIO_EXTI_Callback+0x2c>
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d042      	beq.n	8000ac4 <HAL_GPIO_EXTI_Callback+0xb0>
 8000a3e:	e0cc      	b.n	8000bda <HAL_GPIO_EXTI_Callback+0x1c6>
			case 0:



				switch(global_state) {
 8000a40:	4b9f      	ldr	r3, [pc, #636]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b05      	cmp	r3, #5
 8000a46:	f200 80c3 	bhi.w	8000bd0 <HAL_GPIO_EXTI_Callback+0x1bc>
 8000a4a:	a201      	add	r2, pc, #4	; (adr r2, 8000a50 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a50:	08000a69 	.word	0x08000a69
 8000a54:	08000ac1 	.word	0x08000ac1
 8000a58:	08000a97 	.word	0x08000a97
 8000a5c:	08000ac1 	.word	0x08000ac1
 8000a60:	08000aa5 	.word	0x08000aa5
 8000a64:	08000ac1 	.word	0x08000ac1
				case idle:


					switch(b0500_func) {
 8000a68:	4b96      	ldr	r3, [pc, #600]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d002      	beq.n	8000a76 <HAL_GPIO_EXTI_Callback+0x62>
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d007      	beq.n	8000a84 <HAL_GPIO_EXTI_Callback+0x70>

						break;
					}


					break;
 8000a74:	e025      	b.n	8000ac2 <HAL_GPIO_EXTI_Callback+0xae>
						queue_data = 0xCDFE4D18;
 8000a76:	4b94      	ldr	r3, [pc, #592]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a78:	4a94      	ldr	r2, [pc, #592]	; (8000ccc <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000a7a:	601a      	str	r2, [r3, #0]
						global_state = send_NEC_signal;
 8000a7c:	4b90      	ldr	r3, [pc, #576]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000a7e:	2205      	movs	r2, #5
 8000a80:	701a      	strb	r2, [r3, #0]
						break;
 8000a82:	e007      	b.n	8000a94 <HAL_GPIO_EXTI_Callback+0x80>
						queue_data = b0500_data;
 8000a84:	4b92      	ldr	r3, [pc, #584]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a8f      	ldr	r2, [pc, #572]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a8a:	6013      	str	r3, [r2, #0]
						global_state = send_NEC_signal;
 8000a8c:	4b8c      	ldr	r3, [pc, #560]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000a8e:	2205      	movs	r2, #5
 8000a90:	701a      	strb	r2, [r3, #0]
						break;
 8000a92:	bf00      	nop
					break;
 8000a94:	e015      	b.n	8000ac2 <HAL_GPIO_EXTI_Callback+0xae>
						// bool

						break;
					case wait_for_input:

						b0500_func = default__;
 8000a96:	4b8b      	ldr	r3, [pc, #556]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
						global_state = idle;
 8000a9c:	4b88      	ldr	r3, [pc, #544]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]

						break;
 8000aa2:	e00e      	b.n	8000ac2 <HAL_GPIO_EXTI_Callback+0xae>
						// bool

						break;
					case assign_button:

						b0500_func = alternate_function;
 8000aa4:	4b87      	ldr	r3, [pc, #540]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
						b0500_data = received_data;
 8000aaa:	4b8a      	ldr	r3, [pc, #552]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a88      	ldr	r2, [pc, #544]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000ab0:	6013      	str	r3, [r2, #0]


						received_data = 0;
 8000ab2:	4b88      	ldr	r3, [pc, #544]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
						global_state = idle;
 8000ab8:	4b81      	ldr	r3, [pc, #516]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]

						break;
 8000abe:	e000      	b.n	8000ac2 <HAL_GPIO_EXTI_Callback+0xae>
						break;
 8000ac0:	bf00      	nop
						break;
				}



				break;
 8000ac2:	e085      	b.n	8000bd0 <HAL_GPIO_EXTI_Callback+0x1bc>

				case 1:



					switch(global_state) {
 8000ac4:	4b7e      	ldr	r3, [pc, #504]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b05      	cmp	r3, #5
 8000aca:	f200 8083 	bhi.w	8000bd4 <HAL_GPIO_EXTI_Callback+0x1c0>
 8000ace:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad4:	08000aed 	.word	0x08000aed
 8000ad8:	08000b45 	.word	0x08000b45
 8000adc:	08000b1b 	.word	0x08000b1b
 8000ae0:	08000b45 	.word	0x08000b45
 8000ae4:	08000b29 	.word	0x08000b29
 8000ae8:	08000b45 	.word	0x08000b45
					case idle:


						switch(b0501_func) {
 8000aec:	4b7a      	ldr	r3, [pc, #488]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <HAL_GPIO_EXTI_Callback+0xe6>
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d007      	beq.n	8000b08 <HAL_GPIO_EXTI_Callback+0xf4>

							break;
						}


						break;
 8000af8:	e025      	b.n	8000b46 <HAL_GPIO_EXTI_Callback+0x132>
							queue_data = 0xD4081C98;
 8000afa:	4b73      	ldr	r3, [pc, #460]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000afc:	4a77      	ldr	r2, [pc, #476]	; (8000cdc <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000afe:	601a      	str	r2, [r3, #0]
							global_state = send_NEC_signal;
 8000b00:	4b6f      	ldr	r3, [pc, #444]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000b02:	2205      	movs	r2, #5
 8000b04:	701a      	strb	r2, [r3, #0]
							break;
 8000b06:	e007      	b.n	8000b18 <HAL_GPIO_EXTI_Callback+0x104>
							queue_data = b0501_data;
 8000b08:	4b75      	ldr	r3, [pc, #468]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a6e      	ldr	r2, [pc, #440]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000b0e:	6013      	str	r3, [r2, #0]
							global_state = send_NEC_signal;
 8000b10:	4b6b      	ldr	r3, [pc, #428]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000b12:	2205      	movs	r2, #5
 8000b14:	701a      	strb	r2, [r3, #0]
							break;
 8000b16:	bf00      	nop
						break;
 8000b18:	e015      	b.n	8000b46 <HAL_GPIO_EXTI_Callback+0x132>
							// bool

							break;
						case wait_for_input:

							b0501_func = default__;
 8000b1a:	4b6f      	ldr	r3, [pc, #444]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
							global_state = idle;
 8000b20:	4b67      	ldr	r3, [pc, #412]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]

							break;
 8000b26:	e00e      	b.n	8000b46 <HAL_GPIO_EXTI_Callback+0x132>
							// bool

							break;
						case assign_button:

							b0501_func = alternate_function;
 8000b28:	4b6b      	ldr	r3, [pc, #428]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	701a      	strb	r2, [r3, #0]
							b0501_data = received_data;
 8000b2e:	4b69      	ldr	r3, [pc, #420]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a6b      	ldr	r2, [pc, #428]	; (8000ce0 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000b34:	6013      	str	r3, [r2, #0]


							received_data = 0;
 8000b36:	4b67      	ldr	r3, [pc, #412]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
							global_state = idle;
 8000b3c:	4b60      	ldr	r3, [pc, #384]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]

							break;
 8000b42:	e000      	b.n	8000b46 <HAL_GPIO_EXTI_Callback+0x132>
							break;
 8000b44:	bf00      	nop





					break;
 8000b46:	e045      	b.n	8000bd4 <HAL_GPIO_EXTI_Callback+0x1c0>

				case 2:

					switch(global_state) {
 8000b48:	4b5d      	ldr	r3, [pc, #372]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b05      	cmp	r3, #5
 8000b4e:	d843      	bhi.n	8000bd8 <HAL_GPIO_EXTI_Callback+0x1c4>
 8000b50:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <HAL_GPIO_EXTI_Callback+0x144>)
 8000b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b56:	bf00      	nop
 8000b58:	08000b71 	.word	0x08000b71
 8000b5c:	08000bc9 	.word	0x08000bc9
 8000b60:	08000b9f 	.word	0x08000b9f
 8000b64:	08000bc9 	.word	0x08000bc9
 8000b68:	08000bad 	.word	0x08000bad
 8000b6c:	08000bc9 	.word	0x08000bc9
					case idle:


						switch(b0502_func) {
 8000b70:	4b5c      	ldr	r3, [pc, #368]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <HAL_GPIO_EXTI_Callback+0x16a>
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d007      	beq.n	8000b8c <HAL_GPIO_EXTI_Callback+0x178>

							break;
						}


						break;
 8000b7c:	e025      	b.n	8000bca <HAL_GPIO_EXTI_Callback+0x1b6>
							queue_data = 0xF51E64D2;
 8000b7e:	4b52      	ldr	r3, [pc, #328]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000b80:	4a59      	ldr	r2, [pc, #356]	; (8000ce8 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000b82:	601a      	str	r2, [r3, #0]
							global_state = send_NEC_signal;
 8000b84:	4b4e      	ldr	r3, [pc, #312]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000b86:	2205      	movs	r2, #5
 8000b88:	701a      	strb	r2, [r3, #0]
							break;
 8000b8a:	e007      	b.n	8000b9c <HAL_GPIO_EXTI_Callback+0x188>
							queue_data = b0502_data;
 8000b8c:	4b57      	ldr	r3, [pc, #348]	; (8000cec <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a4d      	ldr	r2, [pc, #308]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000b92:	6013      	str	r3, [r2, #0]
							global_state = send_NEC_signal;
 8000b94:	4b4a      	ldr	r3, [pc, #296]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000b96:	2205      	movs	r2, #5
 8000b98:	701a      	strb	r2, [r3, #0]
							break;
 8000b9a:	bf00      	nop
						break;
 8000b9c:	e015      	b.n	8000bca <HAL_GPIO_EXTI_Callback+0x1b6>
							// bool

							break;
						case wait_for_input:

							b0502_func = default__;
 8000b9e:	4b51      	ldr	r3, [pc, #324]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
							global_state = idle;
 8000ba4:	4b46      	ldr	r3, [pc, #280]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]

							break;
 8000baa:	e00e      	b.n	8000bca <HAL_GPIO_EXTI_Callback+0x1b6>
							// bool

							break;
						case assign_button:

							b0502_func = alternate_function;
 8000bac:	4b4d      	ldr	r3, [pc, #308]	; (8000ce4 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
							b0502_data = received_data;
 8000bb2:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a4d      	ldr	r2, [pc, #308]	; (8000cec <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000bb8:	6013      	str	r3, [r2, #0]


							received_data = 0;
 8000bba:	4b46      	ldr	r3, [pc, #280]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
							global_state = idle;
 8000bc0:	4b3f      	ldr	r3, [pc, #252]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]

							break;
 8000bc6:	e000      	b.n	8000bca <HAL_GPIO_EXTI_Callback+0x1b6>
							break;
 8000bc8:	bf00      	nop
						case send_NEC_signal:
							// bool
							break;
					}

					break;
 8000bca:	e005      	b.n	8000bd8 <HAL_GPIO_EXTI_Callback+0x1c4>
			}


		}
 8000bcc:	bf00      	nop
 8000bce:	e004      	b.n	8000bda <HAL_GPIO_EXTI_Callback+0x1c6>
				break;
 8000bd0:	bf00      	nop
 8000bd2:	e002      	b.n	8000bda <HAL_GPIO_EXTI_Callback+0x1c6>
					break;
 8000bd4:	bf00      	nop
 8000bd6:	e000      	b.n	8000bda <HAL_GPIO_EXTI_Callback+0x1c6>
					break;
 8000bd8:	bf00      	nop


		if (GPIO_Pin == GPIO_PIN_8) {
 8000bda:	88fb      	ldrh	r3, [r7, #6]
 8000bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000be0:	f040 80f6 	bne.w	8000dd0 <HAL_GPIO_EXTI_Callback+0x3bc>


			switch(output_state) {
 8000be4:	4b35      	ldr	r3, [pc, #212]	; (8000cbc <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	f000 80b0 	beq.w	8000d4e <HAL_GPIO_EXTI_Callback+0x33a>
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	f300 80f5 	bgt.w	8000dde <HAL_GPIO_EXTI_Callback+0x3ca>
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d002      	beq.n	8000bfe <HAL_GPIO_EXTI_Callback+0x1ea>
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d043      	beq.n	8000c84 <HAL_GPIO_EXTI_Callback+0x270>
 8000bfc:	e0ef      	b.n	8000dde <HAL_GPIO_EXTI_Callback+0x3ca>
			case 0:



				switch(global_state) {
 8000bfe:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b05      	cmp	r3, #5
 8000c04:	f200 80e6 	bhi.w	8000dd4 <HAL_GPIO_EXTI_Callback+0x3c0>
 8000c08:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0e:	bf00      	nop
 8000c10:	08000c29 	.word	0x08000c29
 8000c14:	08000c81 	.word	0x08000c81
 8000c18:	08000c57 	.word	0x08000c57
 8000c1c:	08000c81 	.word	0x08000c81
 8000c20:	08000c65 	.word	0x08000c65
 8000c24:	08000c81 	.word	0x08000c81
				case idle:


					switch(b0800_func) {
 8000c28:	4b31      	ldr	r3, [pc, #196]	; (8000cf0 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <HAL_GPIO_EXTI_Callback+0x222>
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d007      	beq.n	8000c44 <HAL_GPIO_EXTI_Callback+0x230>

						break;
					}


					break;
 8000c34:	e025      	b.n	8000c82 <HAL_GPIO_EXTI_Callback+0x26e>
						button_num = 3;
 8000c36:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8000c38:	2203      	movs	r2, #3
 8000c3a:	601a      	str	r2, [r3, #0]
						global_state = send_signal;
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
						break;
 8000c42:	e007      	b.n	8000c54 <HAL_GPIO_EXTI_Callback+0x240>
						queue_data = b0800_data;
 8000c44:	4b2c      	ldr	r3, [pc, #176]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a1f      	ldr	r2, [pc, #124]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000c4a:	6013      	str	r3, [r2, #0]
						global_state = send_NEC_signal;
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000c4e:	2205      	movs	r2, #5
 8000c50:	701a      	strb	r2, [r3, #0]
						break;
 8000c52:	bf00      	nop
					break;
 8000c54:	e015      	b.n	8000c82 <HAL_GPIO_EXTI_Callback+0x26e>
						// bool

						break;
					case wait_for_input:

						b0800_func = default__;
 8000c56:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
						global_state = idle;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]

						break;
 8000c62:	e00e      	b.n	8000c82 <HAL_GPIO_EXTI_Callback+0x26e>
						// bool

						break;
					case assign_button:

						b0800_func = alternate_function;
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
						b0800_data = received_data;
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a22      	ldr	r2, [pc, #136]	; (8000cf8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8000c70:	6013      	str	r3, [r2, #0]


						received_data = 0;
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
						global_state = idle;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]

						break;
 8000c7e:	e000      	b.n	8000c82 <HAL_GPIO_EXTI_Callback+0x26e>
						break;
 8000c80:	bf00      	nop
						break;
				}



				break;
 8000c82:	e0a7      	b.n	8000dd4 <HAL_GPIO_EXTI_Callback+0x3c0>

				case 1:



					switch(global_state) {
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b05      	cmp	r3, #5
 8000c8a:	f200 80a5 	bhi.w	8000dd8 <HAL_GPIO_EXTI_Callback+0x3c4>
 8000c8e:	a201      	add	r2, pc, #4	; (adr r2, 8000c94 <HAL_GPIO_EXTI_Callback+0x280>)
 8000c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c94:	08000cad 	.word	0x08000cad
 8000c98:	08000d4b 	.word	0x08000d4b
 8000c9c:	08000d21 	.word	0x08000d21
 8000ca0:	08000d4b 	.word	0x08000d4b
 8000ca4:	08000d2f 	.word	0x08000d2f
 8000ca8:	08000d4b 	.word	0x08000d4b
					case idle:


						switch(b0801_func) {
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <HAL_GPIO_EXTI_Callback+0x2e8>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d025      	beq.n	8000d00 <HAL_GPIO_EXTI_Callback+0x2ec>
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d02a      	beq.n	8000d0e <HAL_GPIO_EXTI_Callback+0x2fa>

							break;
						}


						break;
 8000cb8:	e048      	b.n	8000d4c <HAL_GPIO_EXTI_Callback+0x338>
 8000cba:	bf00      	nop
 8000cbc:	2000015c 	.word	0x2000015c
 8000cc0:	20000160 	.word	0x20000160
 8000cc4:	2000016c 	.word	0x2000016c
 8000cc8:	20000168 	.word	0x20000168
 8000ccc:	cdfe4d18 	.word	0xcdfe4d18
 8000cd0:	20000170 	.word	0x20000170
 8000cd4:	20000164 	.word	0x20000164
 8000cd8:	20000174 	.word	0x20000174
 8000cdc:	d4081c98 	.word	0xd4081c98
 8000ce0:	20000178 	.word	0x20000178
 8000ce4:	2000017c 	.word	0x2000017c
 8000ce8:	f51e64d2 	.word	0xf51e64d2
 8000cec:	20000180 	.word	0x20000180
 8000cf0:	20000184 	.word	0x20000184
 8000cf4:	20000158 	.word	0x20000158
 8000cf8:	20000188 	.word	0x20000188
 8000cfc:	2000018c 	.word	0x2000018c
							button_num = 4;
 8000d00:	4b8d      	ldr	r3, [pc, #564]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x524>)
 8000d02:	2204      	movs	r2, #4
 8000d04:	601a      	str	r2, [r3, #0]
							global_state = send_signal;
 8000d06:	4b8d      	ldr	r3, [pc, #564]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
							break;
 8000d0c:	e007      	b.n	8000d1e <HAL_GPIO_EXTI_Callback+0x30a>
							queue_data = b0801_data;
 8000d0e:	4b8c      	ldr	r3, [pc, #560]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x52c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a8c      	ldr	r2, [pc, #560]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x530>)
 8000d14:	6013      	str	r3, [r2, #0]
							global_state = send_NEC_signal;
 8000d16:	4b89      	ldr	r3, [pc, #548]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000d18:	2205      	movs	r2, #5
 8000d1a:	701a      	strb	r2, [r3, #0]
							break;
 8000d1c:	bf00      	nop
						break;
 8000d1e:	e015      	b.n	8000d4c <HAL_GPIO_EXTI_Callback+0x338>
							// bool

							break;
						case wait_for_input:

							b0801_func = default__;
 8000d20:	4b89      	ldr	r3, [pc, #548]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x534>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
							global_state = idle;
 8000d26:	4b85      	ldr	r3, [pc, #532]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]

							break;
 8000d2c:	e00e      	b.n	8000d4c <HAL_GPIO_EXTI_Callback+0x338>
							// bool

							break;
						case assign_button:

							b0801_func = alternate_function;
 8000d2e:	4b86      	ldr	r3, [pc, #536]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x534>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
							b0801_data = received_data;
 8000d34:	4b85      	ldr	r3, [pc, #532]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x538>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a81      	ldr	r2, [pc, #516]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x52c>)
 8000d3a:	6013      	str	r3, [r2, #0]


							received_data = 0;
 8000d3c:	4b83      	ldr	r3, [pc, #524]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x538>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
							global_state = idle;
 8000d42:	4b7e      	ldr	r3, [pc, #504]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]

							break;
 8000d48:	e000      	b.n	8000d4c <HAL_GPIO_EXTI_Callback+0x338>
							break;
 8000d4a:	bf00      	nop





					break;
 8000d4c:	e044      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x3c4>

				case 2:

					switch(global_state) {
 8000d4e:	4b7b      	ldr	r3, [pc, #492]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b05      	cmp	r3, #5
 8000d54:	d842      	bhi.n	8000ddc <HAL_GPIO_EXTI_Callback+0x3c8>
 8000d56:	a201      	add	r2, pc, #4	; (adr r2, 8000d5c <HAL_GPIO_EXTI_Callback+0x348>)
 8000d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5c:	08000d75 	.word	0x08000d75
 8000d60:	08000dcd 	.word	0x08000dcd
 8000d64:	08000da3 	.word	0x08000da3
 8000d68:	08000dcd 	.word	0x08000dcd
 8000d6c:	08000db1 	.word	0x08000db1
 8000d70:	08000dcd 	.word	0x08000dcd
					case idle:


						switch(b0802_func) {
 8000d74:	4b76      	ldr	r3, [pc, #472]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x53c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <HAL_GPIO_EXTI_Callback+0x36e>
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d007      	beq.n	8000d90 <HAL_GPIO_EXTI_Callback+0x37c>

							break;
						}


						break;
 8000d80:	e025      	b.n	8000dce <HAL_GPIO_EXTI_Callback+0x3ba>
							button_num = 5;
 8000d82:	4b6d      	ldr	r3, [pc, #436]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x524>)
 8000d84:	2205      	movs	r2, #5
 8000d86:	601a      	str	r2, [r3, #0]
							global_state = send_signal;
 8000d88:	4b6c      	ldr	r3, [pc, #432]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
							break;
 8000d8e:	e007      	b.n	8000da0 <HAL_GPIO_EXTI_Callback+0x38c>
							queue_data = b0802_data;
 8000d90:	4b70      	ldr	r3, [pc, #448]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x540>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a6b      	ldr	r2, [pc, #428]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x530>)
 8000d96:	6013      	str	r3, [r2, #0]
							global_state = send_NEC_signal;
 8000d98:	4b68      	ldr	r3, [pc, #416]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000d9a:	2205      	movs	r2, #5
 8000d9c:	701a      	strb	r2, [r3, #0]
							break;
 8000d9e:	bf00      	nop
						break;
 8000da0:	e015      	b.n	8000dce <HAL_GPIO_EXTI_Callback+0x3ba>
							// bool

							break;
						case wait_for_input:

							b0802_func = default__;
 8000da2:	4b6b      	ldr	r3, [pc, #428]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x53c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
							global_state = idle;
 8000da8:	4b64      	ldr	r3, [pc, #400]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]

							break;
 8000dae:	e00e      	b.n	8000dce <HAL_GPIO_EXTI_Callback+0x3ba>
							// bool

							break;
						case assign_button:

							b0802_func = alternate_function;
 8000db0:	4b67      	ldr	r3, [pc, #412]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x53c>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
							b0802_data = received_data;
 8000db6:	4b65      	ldr	r3, [pc, #404]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x538>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a66      	ldr	r2, [pc, #408]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x540>)
 8000dbc:	6013      	str	r3, [r2, #0]


							received_data = 0;
 8000dbe:	4b63      	ldr	r3, [pc, #396]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x538>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
							global_state = idle;
 8000dc4:	4b5d      	ldr	r3, [pc, #372]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]

							break;
 8000dca:	e000      	b.n	8000dce <HAL_GPIO_EXTI_Callback+0x3ba>
							break;
 8000dcc:	bf00      	nop
						case send_NEC_signal:
							// bool
							break;
					}

					break;
 8000dce:	e005      	b.n	8000ddc <HAL_GPIO_EXTI_Callback+0x3c8>
			}
		}
 8000dd0:	bf00      	nop
 8000dd2:	e004      	b.n	8000dde <HAL_GPIO_EXTI_Callback+0x3ca>
				break;
 8000dd4:	bf00      	nop
 8000dd6:	e002      	b.n	8000dde <HAL_GPIO_EXTI_Callback+0x3ca>
					break;
 8000dd8:	bf00      	nop
 8000dda:	e000      	b.n	8000dde <HAL_GPIO_EXTI_Callback+0x3ca>
					break;
 8000ddc:	bf00      	nop




		if (GPIO_Pin == GPIO_PIN_11) {
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000de4:	f040 809c 	bne.w	8000f20 <HAL_GPIO_EXTI_Callback+0x50c>
			switch(output_state) {
 8000de8:	4b5b      	ldr	r3, [pc, #364]	; (8000f58 <HAL_GPIO_EXTI_Callback+0x544>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d056      	beq.n	8000e9e <HAL_GPIO_EXTI_Callback+0x48a>
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	f300 809c 	bgt.w	8000f2e <HAL_GPIO_EXTI_Callback+0x51a>
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <HAL_GPIO_EXTI_Callback+0x3ec>
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d01e      	beq.n	8000e3c <HAL_GPIO_EXTI_Callback+0x428>
		}

//	}


}
 8000dfe:	e096      	b.n	8000f2e <HAL_GPIO_EXTI_Callback+0x51a>
				switch(global_state) {
 8000e00:	4b4e      	ldr	r3, [pc, #312]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b05      	cmp	r3, #5
 8000e06:	f200 808d 	bhi.w	8000f24 <HAL_GPIO_EXTI_Callback+0x510>
 8000e0a:	a201      	add	r2, pc, #4	; (adr r2, 8000e10 <HAL_GPIO_EXTI_Callback+0x3fc>)
 8000e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e10:	08000e39 	.word	0x08000e39
 8000e14:	08000e39 	.word	0x08000e39
 8000e18:	08000e29 	.word	0x08000e29
 8000e1c:	08000e39 	.word	0x08000e39
 8000e20:	08000e39 	.word	0x08000e39
 8000e24:	08000e39 	.word	0x08000e39
						global_state = receive_NEC_signal;
 8000e28:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	701a      	strb	r2, [r3, #0]
						delay_ms(500);
 8000e2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e32:	f7ff fa11 	bl	8000258 <delay_ms>
						break;
 8000e36:	e000      	b.n	8000e3a <HAL_GPIO_EXTI_Callback+0x426>
					break;
 8000e38:	bf00      	nop
				break;
 8000e3a:	e073      	b.n	8000f24 <HAL_GPIO_EXTI_Callback+0x510>
				switch(global_state) {
 8000e3c:	4b3f      	ldr	r3, [pc, #252]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b05      	cmp	r3, #5
 8000e42:	d871      	bhi.n	8000f28 <HAL_GPIO_EXTI_Callback+0x514>
 8000e44:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <HAL_GPIO_EXTI_Callback+0x438>)
 8000e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4a:	bf00      	nop
 8000e4c:	08000e65 	.word	0x08000e65
 8000e50:	08000e9b 	.word	0x08000e9b
 8000e54:	08000e9b 	.word	0x08000e9b
 8000e58:	08000e75 	.word	0x08000e75
 8000e5c:	08000e85 	.word	0x08000e85
 8000e60:	08000e9b 	.word	0x08000e9b
					global_state = wait_for_input;
 8000e64:	4b35      	ldr	r3, [pc, #212]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	701a      	strb	r2, [r3, #0]
					delay_ms(500);
 8000e6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e6e:	f7ff f9f3 	bl	8000258 <delay_ms>
					break;
 8000e72:	e013      	b.n	8000e9c <HAL_GPIO_EXTI_Callback+0x488>
					global_state = idle;
 8000e74:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
					delay_ms(500);
 8000e7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e7e:	f7ff f9eb 	bl	8000258 <delay_ms>
					break;
 8000e82:	e00b      	b.n	8000e9c <HAL_GPIO_EXTI_Callback+0x488>
					received_data = 0;
 8000e84:	4b31      	ldr	r3, [pc, #196]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x538>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
					global_state = idle;
 8000e8a:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
					delay_ms(500);
 8000e90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e94:	f7ff f9e0 	bl	8000258 <delay_ms>
					break;
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_EXTI_Callback+0x488>
					break;
 8000e9a:	bf00      	nop
				break;
 8000e9c:	e044      	b.n	8000f28 <HAL_GPIO_EXTI_Callback+0x514>
				switch(global_state) {
 8000e9e:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b05      	cmp	r3, #5
 8000ea4:	d842      	bhi.n	8000f2c <HAL_GPIO_EXTI_Callback+0x518>
 8000ea6:	a201      	add	r2, pc, #4	; (adr r2, 8000eac <HAL_GPIO_EXTI_Callback+0x498>)
 8000ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eac:	08000ec5 	.word	0x08000ec5
 8000eb0:	08000f1d 	.word	0x08000f1d
 8000eb4:	08000ef3 	.word	0x08000ef3
 8000eb8:	08000f1d 	.word	0x08000f1d
 8000ebc:	08000f01 	.word	0x08000f01
 8000ec0:	08000f1d 	.word	0x08000f1d
					switch(b1102_func) {
 8000ec4:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x548>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d002      	beq.n	8000ed2 <HAL_GPIO_EXTI_Callback+0x4be>
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d007      	beq.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x4cc>
					break;
 8000ed0:	e025      	b.n	8000f1e <HAL_GPIO_EXTI_Callback+0x50a>
						button_num = 6;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_GPIO_EXTI_Callback+0x524>)
 8000ed4:	2206      	movs	r2, #6
 8000ed6:	601a      	str	r2, [r3, #0]
						global_state = send_signal;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
						break;
 8000ede:	e007      	b.n	8000ef0 <HAL_GPIO_EXTI_Callback+0x4dc>
						queue_data = b1102_data;
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x54c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x530>)
 8000ee6:	6013      	str	r3, [r2, #0]
						global_state = send_NEC_signal;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000eea:	2205      	movs	r2, #5
 8000eec:	701a      	strb	r2, [r3, #0]
						break;
 8000eee:	bf00      	nop
					break;
 8000ef0:	e015      	b.n	8000f1e <HAL_GPIO_EXTI_Callback+0x50a>
						b1102_func = default__;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x548>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
						global_state = idle;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
						break;
 8000efe:	e00e      	b.n	8000f1e <HAL_GPIO_EXTI_Callback+0x50a>
						b1102_func = alternate_function;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_GPIO_EXTI_Callback+0x548>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
						b1102_data = received_data;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x538>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <HAL_GPIO_EXTI_Callback+0x54c>)
 8000f0c:	6013      	str	r3, [r2, #0]
						received_data = 0;
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x538>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
						global_state = idle;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x528>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
						break;
 8000f1a:	e000      	b.n	8000f1e <HAL_GPIO_EXTI_Callback+0x50a>
						break;
 8000f1c:	bf00      	nop
				break;
 8000f1e:	e005      	b.n	8000f2c <HAL_GPIO_EXTI_Callback+0x518>
		}
 8000f20:	bf00      	nop
 8000f22:	e004      	b.n	8000f2e <HAL_GPIO_EXTI_Callback+0x51a>
				break;
 8000f24:	bf00      	nop
 8000f26:	e002      	b.n	8000f2e <HAL_GPIO_EXTI_Callback+0x51a>
				break;
 8000f28:	bf00      	nop
 8000f2a:	e000      	b.n	8000f2e <HAL_GPIO_EXTI_Callback+0x51a>
				break;
 8000f2c:	bf00      	nop
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000158 	.word	0x20000158
 8000f3c:	20000160 	.word	0x20000160
 8000f40:	20000190 	.word	0x20000190
 8000f44:	20000168 	.word	0x20000168
 8000f48:	2000018c 	.word	0x2000018c
 8000f4c:	20000164 	.word	0x20000164
 8000f50:	20000194 	.word	0x20000194
 8000f54:	20000198 	.word	0x20000198
 8000f58:	2000015c 	.word	0x2000015c
 8000f5c:	2000019c 	.word	0x2000019c
 8000f60:	200001a0 	.word	0x200001a0

08000f64 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	++output_state;
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3301      	adds	r3, #1
 8000f72:	4a27      	ldr	r2, [pc, #156]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f74:	6013      	str	r3, [r2, #0]

	if (output_state == 3) {
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d102      	bne.n	8000f84 <HAL_TIM_PeriodElapsedCallback+0x20>
		output_state = 0;
 8000f7e:	4b24      	ldr	r3, [pc, #144]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
	}


	switch(output_state) {
 8000f84:	4b22      	ldr	r3, [pc, #136]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d02a      	beq.n	8000fe2 <HAL_TIM_PeriodElapsedCallback+0x7e>
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	dc3a      	bgt.n	8001006 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <HAL_TIM_PeriodElapsedCallback+0x36>
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d012      	beq.n	8000fbe <HAL_TIM_PeriodElapsedCallback+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
		break;
	}
}
 8000f98:	e035      	b.n	8001006 <HAL_TIM_PeriodElapsedCallback+0xa2>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f000 fca6 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2101      	movs	r1, #1
 8000fac:	4819      	ldr	r0, [pc, #100]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fae:	f000 fca1 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	4817      	ldr	r0, [pc, #92]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fb8:	f000 fc9c 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 8000fbc:	e023      	b.n	8001006 <HAL_TIM_PeriodElapsedCallback+0xa2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	4814      	ldr	r0, [pc, #80]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fc4:	f000 fc96 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd2:	f000 fc8f 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fdc:	f000 fc8a 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 8000fe0:	e011      	b.n	8001006 <HAL_TIM_PeriodElapsedCallback+0xa2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	480b      	ldr	r0, [pc, #44]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fe8:	f000 fc84 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff6:	f000 fc7d 	bl	80018f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2180      	movs	r1, #128	; 0x80
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001000:	f000 fc78 	bl	80018f4 <HAL_GPIO_WritePin>
		break;
 8001004:	bf00      	nop
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000015c 	.word	0x2000015c
 8001014:	48000400 	.word	0x48000400

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0x8>
	...

08001024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_MspInit+0x44>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <HAL_MspInit+0x44>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6613      	str	r3, [r2, #96]	; 0x60
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_MspInit+0x44>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_MspInit+0x44>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	4a08      	ldr	r2, [pc, #32]	; (8001068 <HAL_MspInit+0x44>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	6593      	str	r3, [r2, #88]	; 0x58
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_MspInit+0x44>)
 8001050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000

0800106c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a28      	ldr	r2, [pc, #160]	; (800111c <HAL_TIM_Base_MspInit+0xb0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d10c      	bne.n	8001098 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <HAL_TIM_Base_MspInit+0xb4>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001082:	4a27      	ldr	r2, [pc, #156]	; (8001120 <HAL_TIM_Base_MspInit+0xb4>)
 8001084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001088:	6613      	str	r3, [r2, #96]	; 0x60
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <HAL_TIM_Base_MspInit+0xb4>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001096:	e03c      	b.n	8001112 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a0:	d10c      	bne.n	80010bc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <HAL_TIM_Base_MspInit+0xb4>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <HAL_TIM_Base_MspInit+0xb4>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6593      	str	r3, [r2, #88]	; 0x58
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <HAL_TIM_Base_MspInit+0xb4>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
}
 80010ba:	e02a      	b.n	8001112 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a18      	ldr	r2, [pc, #96]	; (8001124 <HAL_TIM_Base_MspInit+0xb8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d114      	bne.n	80010f0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <HAL_TIM_Base_MspInit+0xb4>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	4a15      	ldr	r2, [pc, #84]	; (8001120 <HAL_TIM_Base_MspInit+0xb4>)
 80010cc:	f043 0320 	orr.w	r3, r3, #32
 80010d0:	6593      	str	r3, [r2, #88]	; 0x58
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_TIM_Base_MspInit+0xb4>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	f003 0320 	and.w	r3, r3, #32
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2101      	movs	r1, #1
 80010e2:	2037      	movs	r0, #55	; 0x37
 80010e4:	f000 fa4d 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80010e8:	2037      	movs	r0, #55	; 0x37
 80010ea:	f000 fa66 	bl	80015ba <HAL_NVIC_EnableIRQ>
}
 80010ee:	e010      	b.n	8001112 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM15)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <HAL_TIM_Base_MspInit+0xbc>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d10b      	bne.n	8001112 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_TIM_Base_MspInit+0xb4>)
 80010fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fe:	4a08      	ldr	r2, [pc, #32]	; (8001120 <HAL_TIM_Base_MspInit+0xb4>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6613      	str	r3, [r2, #96]	; 0x60
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_TIM_Base_MspInit+0xb4>)
 8001108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40012c00 	.word	0x40012c00
 8001120:	40021000 	.word	0x40021000
 8001124:	40001400 	.word	0x40001400
 8001128:	40014000 	.word	0x40014000

0800112c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800114c:	d11c      	bne.n	8001188 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_TIM_MspPostInit+0x64>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <HAL_TIM_MspPostInit+0x64>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <HAL_TIM_MspPostInit+0x64>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001166:	2301      	movs	r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001176:	2301      	movs	r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	4619      	mov	r1, r3
 8001180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001184:	f000 fa34 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40021000 	.word	0x40021000

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e0:	f000 f8b0 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80011ec:	2020      	movs	r0, #32
 80011ee:	f000 fb99 	bl	8001924 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80011f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011f6:	f000 fb95 	bl	8001924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}

080011fe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001202:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001206:	f000 fb8d 	bl	8001924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <TIM7_IRQHandler+0x10>)
 8001216:	f001 fc39 	bl	8002a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200000c0 	.word	0x200000c0

08001224 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <SystemInit+0x20>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <SystemInit+0x20>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800124c:	f7ff ffea 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <LoopForever+0x6>)
  ldr r1, =_edata
 8001252:	490d      	ldr	r1, [pc, #52]	; (8001288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <LoopForever+0xe>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001268:	4c0a      	ldr	r4, [pc, #40]	; (8001294 <LoopForever+0x16>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001276:	f002 fb55 	bl	8003924 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800127a:	f7ff f805 	bl	8000288 <main>

0800127e <LoopForever>:

LoopForever:
    b LoopForever
 800127e:	e7fe      	b.n	800127e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001280:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800128c:	080039dc 	.word	0x080039dc
  ldr r2, =_sbss
 8001290:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001294:	200001a8 	.word	0x200001a8

08001298 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC1_IRQHandler>

0800129a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 f961 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012aa:	200f      	movs	r0, #15
 80012ac:	f000 f80e 	bl	80012cc <HAL_InitTick>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	e001      	b.n	80012c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012bc:	f7ff feb2 	bl	8001024 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_InitTick+0x6c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d023      	beq.n	8001328 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <HAL_InitTick+0x70>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_InitTick+0x6c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f96d 	bl	80015d6 <HAL_SYSTICK_Config>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10f      	bne.n	8001322 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d809      	bhi.n	800131c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 f937 	bl	8001582 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001314:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <HAL_InitTick+0x74>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e007      	b.n	800132c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e004      	b.n	800132c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e001      	b.n	800132c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000008 	.word	0x20000008
 800133c:	20000000 	.word	0x20000000
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000008 	.word	0x20000008
 8001368:	200001a4 	.word	0x200001a4

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	200001a4 	.word	0x200001a4

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff ffee 	bl	800136c <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_Delay+0x44>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013aa:	bf00      	nop
 80013ac:	f7ff ffde 	bl	800136c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <__NVIC_EnableIRQ+0x38>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff8e 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff29 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff3e 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff8e 	bl	80014c0 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5d 	bl	800146c <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff31 	bl	8001430 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa2 	bl	8001528 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fe:	e148      	b.n	8001892 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 813a 	beq.w	800188c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d005      	beq.n	8001630 <HAL_GPIO_Init+0x40>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d130      	bne.n	8001692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	2203      	movs	r2, #3
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001666:	2201      	movs	r2, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	f003 0201 	and.w	r2, r3, #1
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b03      	cmp	r3, #3
 800169c:	d017      	beq.n	80016ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d123      	bne.n	8001722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	691a      	ldr	r2, [r3, #16]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	6939      	ldr	r1, [r7, #16]
 800171e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0203 	and.w	r2, r3, #3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8094 	beq.w	800188c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001764:	4b52      	ldr	r3, [pc, #328]	; (80018b0 <HAL_GPIO_Init+0x2c0>)
 8001766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001768:	4a51      	ldr	r2, [pc, #324]	; (80018b0 <HAL_GPIO_Init+0x2c0>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6613      	str	r3, [r2, #96]	; 0x60
 8001770:	4b4f      	ldr	r3, [pc, #316]	; (80018b0 <HAL_GPIO_Init+0x2c0>)
 8001772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800177c:	4a4d      	ldr	r2, [pc, #308]	; (80018b4 <HAL_GPIO_Init+0x2c4>)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	220f      	movs	r2, #15
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017a6:	d00d      	beq.n	80017c4 <HAL_GPIO_Init+0x1d4>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a43      	ldr	r2, [pc, #268]	; (80018b8 <HAL_GPIO_Init+0x2c8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d007      	beq.n	80017c0 <HAL_GPIO_Init+0x1d0>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a42      	ldr	r2, [pc, #264]	; (80018bc <HAL_GPIO_Init+0x2cc>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d101      	bne.n	80017bc <HAL_GPIO_Init+0x1cc>
 80017b8:	2302      	movs	r3, #2
 80017ba:	e004      	b.n	80017c6 <HAL_GPIO_Init+0x1d6>
 80017bc:	2307      	movs	r3, #7
 80017be:	e002      	b.n	80017c6 <HAL_GPIO_Init+0x1d6>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <HAL_GPIO_Init+0x1d6>
 80017c4:	2300      	movs	r3, #0
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	f002 0203 	and.w	r2, r2, #3
 80017cc:	0092      	lsls	r2, r2, #2
 80017ce:	4093      	lsls	r3, r2
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017d6:	4937      	ldr	r1, [pc, #220]	; (80018b4 <HAL_GPIO_Init+0x2c4>)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017e4:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001808:	4a2d      	ldr	r2, [pc, #180]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800180e:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001832:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800185c:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001886:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	3301      	adds	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	f47f aeaf 	bne.w	8001600 <HAL_GPIO_Init+0x10>
  }
}
 80018a2:	bf00      	nop
 80018a4:	bf00      	nop
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000
 80018b8:	48000400 	.word	0x48000400
 80018bc:	48000800 	.word	0x48000800
 80018c0:	40010400 	.word	0x40010400

080018c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e001      	b.n	80018e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001904:	787b      	ldrb	r3, [r7, #1]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001910:	e002      	b.n	8001918 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001930:	695a      	ldr	r2, [r3, #20]
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	4013      	ands	r3, r2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d006      	beq.n	8001948 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001940:	88fb      	ldrh	r3, [r7, #6]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff f866 	bl	8000a14 <HAL_GPIO_EXTI_Callback>
  }
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40010400 	.word	0x40010400

08001954 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <HAL_PWREx_GetVoltageRange+0x18>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40007000 	.word	0x40007000

08001970 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800197e:	d130      	bne.n	80019e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800198c:	d038      	beq.n	8001a00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001996:	4a1e      	ldr	r2, [pc, #120]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001998:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800199c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800199e:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2232      	movs	r2, #50	; 0x32
 80019a4:	fb02 f303 	mul.w	r3, r2, r3
 80019a8:	4a1b      	ldr	r2, [pc, #108]	; (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0c9b      	lsrs	r3, r3, #18
 80019b0:	3301      	adds	r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b4:	e002      	b.n	80019bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c8:	d102      	bne.n	80019d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f2      	bne.n	80019b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019dc:	d110      	bne.n	8001a00 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e00f      	b.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ee:	d007      	beq.n	8001a00 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019f8:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40007000 	.word	0x40007000
 8001a14:	20000000 	.word	0x20000000
 8001a18:	431bde83 	.word	0x431bde83

08001a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f000 bc02 	b.w	8002234 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a30:	4b96      	ldr	r3, [pc, #600]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a3a:	4b94      	ldr	r3, [pc, #592]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80e4 	beq.w	8001c1a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d007      	beq.n	8001a68 <HAL_RCC_OscConfig+0x4c>
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b0c      	cmp	r3, #12
 8001a5c:	f040 808b 	bne.w	8001b76 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	f040 8087 	bne.w	8001b76 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a68:	4b88      	ldr	r3, [pc, #544]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_OscConfig+0x64>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e3d9      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1a      	ldr	r2, [r3, #32]
 8001a84:	4b81      	ldr	r3, [pc, #516]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <HAL_RCC_OscConfig+0x7e>
 8001a90:	4b7e      	ldr	r3, [pc, #504]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a98:	e005      	b.n	8001aa6 <HAL_RCC_OscConfig+0x8a>
 8001a9a:	4b7c      	ldr	r3, [pc, #496]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d223      	bcs.n	8001af2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fd54 	bl	800255c <RCC_SetFlashLatencyFromMSIRange>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e3ba      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001abe:	4b73      	ldr	r3, [pc, #460]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a72      	ldr	r2, [pc, #456]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b70      	ldr	r3, [pc, #448]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	496d      	ldr	r1, [pc, #436]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001adc:	4b6b      	ldr	r3, [pc, #428]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	4968      	ldr	r1, [pc, #416]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
 8001af0:	e025      	b.n	8001b3e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af2:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a65      	ldr	r2, [pc, #404]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b63      	ldr	r3, [pc, #396]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	4960      	ldr	r1, [pc, #384]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b10:	4b5e      	ldr	r3, [pc, #376]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	495b      	ldr	r1, [pc, #364]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 fd14 	bl	800255c <RCC_SetFlashLatencyFromMSIRange>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e37a      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b3e:	f000 fc81 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b51      	ldr	r3, [pc, #324]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	4950      	ldr	r1, [pc, #320]	; (8001c90 <HAL_RCC_OscConfig+0x274>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	f003 031f 	and.w	r3, r3, #31
 8001b56:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5a:	4a4e      	ldr	r2, [pc, #312]	; (8001c94 <HAL_RCC_OscConfig+0x278>)
 8001b5c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b5e:	4b4e      	ldr	r3, [pc, #312]	; (8001c98 <HAL_RCC_OscConfig+0x27c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fbb2 	bl	80012cc <HAL_InitTick>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d052      	beq.n	8001c18 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	e35e      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d032      	beq.n	8001be4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a42      	ldr	r2, [pc, #264]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff fbef 	bl	800136c <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b92:	f7ff fbeb 	bl	800136c <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e347      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba4:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bb0:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a35      	ldr	r2, [pc, #212]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bb6:	f043 0308 	orr.w	r3, r3, #8
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b33      	ldr	r3, [pc, #204]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4930      	ldr	r1, [pc, #192]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bce:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	492b      	ldr	r1, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
 8001be2:	e01a      	b.n	8001c1a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001be4:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a28      	ldr	r2, [pc, #160]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001bea:	f023 0301 	bic.w	r3, r3, #1
 8001bee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fbbc 	bl	800136c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fbb8 	bl	800136c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e314      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x1dc>
 8001c16:	e000      	b.n	8001c1a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d073      	beq.n	8001d0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_OscConfig+0x21c>
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d10e      	bne.n	8001c50 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d10b      	bne.n	8001c50 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d063      	beq.n	8001d0c <HAL_RCC_OscConfig+0x2f0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d15f      	bne.n	8001d0c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e2f1      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d106      	bne.n	8001c68 <HAL_RCC_OscConfig+0x24c>
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e025      	b.n	8001cb4 <HAL_RCC_OscConfig+0x298>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c70:	d114      	bne.n	8001c9c <HAL_RCC_OscConfig+0x280>
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a02      	ldr	r2, [pc, #8]	; (8001c8c <HAL_RCC_OscConfig+0x270>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e013      	b.n	8001cb4 <HAL_RCC_OscConfig+0x298>
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	08003994 	.word	0x08003994
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000004 	.word	0x20000004
 8001c9c:	4ba0      	ldr	r3, [pc, #640]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a9f      	ldr	r2, [pc, #636]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b9d      	ldr	r3, [pc, #628]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a9c      	ldr	r2, [pc, #624]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fb56 	bl	800136c <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff fb52 	bl	800136c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e2ae      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd6:	4b92      	ldr	r3, [pc, #584]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x2a8>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fb42 	bl	800136c <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff fb3e 	bl	800136c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e29a      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cfe:	4b88      	ldr	r3, [pc, #544]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x2d0>
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d060      	beq.n	8001ddc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_OscConfig+0x310>
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2b0c      	cmp	r3, #12
 8001d24:	d119      	bne.n	8001d5a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d116      	bne.n	8001d5a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d2c:	4b7c      	ldr	r3, [pc, #496]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_OscConfig+0x328>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e277      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d44:	4b76      	ldr	r3, [pc, #472]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	061b      	lsls	r3, r3, #24
 8001d52:	4973      	ldr	r1, [pc, #460]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d58:	e040      	b.n	8001ddc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d023      	beq.n	8001daa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d62:	4b6f      	ldr	r3, [pc, #444]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a6e      	ldr	r2, [pc, #440]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7ff fafd 	bl	800136c <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d76:	f7ff faf9 	bl	800136c <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e255      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d88:	4b65      	ldr	r3, [pc, #404]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	4b62      	ldr	r3, [pc, #392]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	495f      	ldr	r1, [pc, #380]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
 8001da8:	e018      	b.n	8001ddc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001daa:	4b5d      	ldr	r3, [pc, #372]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a5c      	ldr	r2, [pc, #368]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7ff fad9 	bl	800136c <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fad5 	bl	800136c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e231      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd0:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d03c      	beq.n	8001e62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01c      	beq.n	8001e2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df6:	4a4a      	ldr	r2, [pc, #296]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff fab4 	bl	800136c <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e08:	f7ff fab0 	bl	800136c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e20c      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e1a:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0ef      	beq.n	8001e08 <HAL_RCC_OscConfig+0x3ec>
 8001e28:	e01b      	b.n	8001e62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e30:	4a3b      	ldr	r2, [pc, #236]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e32:	f023 0301 	bic.w	r3, r3, #1
 8001e36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fa97 	bl	800136c <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e42:	f7ff fa93 	bl	800136c <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e1ef      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e54:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ef      	bne.n	8001e42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80a6 	beq.w	8001fbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e74:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10d      	bne.n	8001e9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e80:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	4a26      	ldr	r2, [pc, #152]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8c:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e9c:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <HAL_RCC_OscConfig+0x508>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d118      	bne.n	8001eda <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ea8:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <HAL_RCC_OscConfig+0x508>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1d      	ldr	r2, [pc, #116]	; (8001f24 <HAL_RCC_OscConfig+0x508>)
 8001eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb4:	f7ff fa5a 	bl	800136c <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebc:	f7ff fa56 	bl	800136c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e1b2      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <HAL_RCC_OscConfig+0x508>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d108      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x4d8>
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ef2:	e029      	b.n	8001f48 <HAL_RCC_OscConfig+0x52c>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	d115      	bne.n	8001f28 <HAL_RCC_OscConfig+0x50c>
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f02:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	4a03      	ldr	r2, [pc, #12]	; (8001f20 <HAL_RCC_OscConfig+0x504>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f1c:	e014      	b.n	8001f48 <HAL_RCC_OscConfig+0x52c>
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40007000 	.word	0x40007000
 8001f28:	4b9a      	ldr	r3, [pc, #616]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2e:	4a99      	ldr	r2, [pc, #612]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f38:	4b96      	ldr	r3, [pc, #600]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3e:	4a95      	ldr	r2, [pc, #596]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001f40:	f023 0304 	bic.w	r3, r3, #4
 8001f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d016      	beq.n	8001f7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff fa0c 	bl	800136c <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f58:	f7ff fa08 	bl	800136c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e162      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6e:	4b89      	ldr	r3, [pc, #548]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ed      	beq.n	8001f58 <HAL_RCC_OscConfig+0x53c>
 8001f7c:	e015      	b.n	8001faa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7e:	f7ff f9f5 	bl	800136c <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7ff f9f1 	bl	800136c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e14b      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f9c:	4b7d      	ldr	r3, [pc, #500]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1ed      	bne.n	8001f86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001faa:	7ffb      	ldrb	r3, [r7, #31]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d105      	bne.n	8001fbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb0:	4b78      	ldr	r3, [pc, #480]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	4a77      	ldr	r2, [pc, #476]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d03c      	beq.n	8002042 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01c      	beq.n	800200a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fd0:	4b70      	ldr	r3, [pc, #448]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fd6:	4a6f      	ldr	r2, [pc, #444]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7ff f9c4 	bl	800136c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fe8:	f7ff f9c0 	bl	800136c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e11c      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ffa:	4b66      	ldr	r3, [pc, #408]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8001ffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ef      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x5cc>
 8002008:	e01b      	b.n	8002042 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800200a:	4b62      	ldr	r3, [pc, #392]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 800200c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002010:	4a60      	ldr	r2, [pc, #384]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201a:	f7ff f9a7 	bl	800136c <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002022:	f7ff f9a3 	bl	800136c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e0ff      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002034:	4b57      	ldr	r3, [pc, #348]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002036:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1ef      	bne.n	8002022 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80f3 	beq.w	8002232 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	2b02      	cmp	r3, #2
 8002052:	f040 80c9 	bne.w	80021e8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002056:	4b4f      	ldr	r3, [pc, #316]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 0203 	and.w	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	429a      	cmp	r2, r3
 8002068:	d12c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	3b01      	subs	r3, #1
 8002076:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d123      	bne.n	80020c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002086:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d11b      	bne.n	80020c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d113      	bne.n	80020c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	3b01      	subs	r3, #1
 80020aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d109      	bne.n	80020c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	3b01      	subs	r3, #1
 80020be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d06b      	beq.n	800219c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d062      	beq.n	8002190 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020ca:	4b32      	ldr	r3, [pc, #200]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0ac      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020da:	4b2e      	ldr	r3, [pc, #184]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a2d      	ldr	r2, [pc, #180]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 80020e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020e6:	f7ff f941 	bl	800136c <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff f93d 	bl	800136c <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e099      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002100:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800210c:	4b21      	ldr	r3, [pc, #132]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <HAL_RCC_OscConfig+0x77c>)
 8002112:	4013      	ands	r3, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800211c:	3a01      	subs	r2, #1
 800211e:	0112      	lsls	r2, r2, #4
 8002120:	4311      	orrs	r1, r2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002126:	0212      	lsls	r2, r2, #8
 8002128:	4311      	orrs	r1, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800212e:	0852      	lsrs	r2, r2, #1
 8002130:	3a01      	subs	r2, #1
 8002132:	0552      	lsls	r2, r2, #21
 8002134:	4311      	orrs	r1, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800213a:	0852      	lsrs	r2, r2, #1
 800213c:	3a01      	subs	r2, #1
 800213e:	0652      	lsls	r2, r2, #25
 8002140:	4311      	orrs	r1, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002146:	06d2      	lsls	r2, r2, #27
 8002148:	430a      	orrs	r2, r1
 800214a:	4912      	ldr	r1, [pc, #72]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 800214c:	4313      	orrs	r3, r2
 800214e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002150:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800215c:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002166:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002168:	f7ff f900 	bl	800136c <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f8fc 	bl	800136c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e058      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_RCC_OscConfig+0x778>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800218e:	e050      	b.n	8002232 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e04f      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
 8002194:	40021000 	.word	0x40021000
 8002198:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x820>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d144      	bne.n	8002232 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021a8:	4b24      	ldr	r3, [pc, #144]	; (800223c <HAL_RCC_OscConfig+0x820>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a23      	ldr	r2, [pc, #140]	; (800223c <HAL_RCC_OscConfig+0x820>)
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <HAL_RCC_OscConfig+0x820>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4a20      	ldr	r2, [pc, #128]	; (800223c <HAL_RCC_OscConfig+0x820>)
 80021ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021c0:	f7ff f8d4 	bl	800136c <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7ff f8d0 	bl	800136c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e02c      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <HAL_RCC_OscConfig+0x820>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x7ac>
 80021e6:	e024      	b.n	8002232 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	d01f      	beq.n	800222e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_RCC_OscConfig+0x820>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a12      	ldr	r2, [pc, #72]	; (800223c <HAL_RCC_OscConfig+0x820>)
 80021f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7ff f8b7 	bl	800136c <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002202:	f7ff f8b3 	bl	800136c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e00f      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_RCC_OscConfig+0x820>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_OscConfig+0x820>)
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	4905      	ldr	r1, [pc, #20]	; (800223c <HAL_RCC_OscConfig+0x820>)
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_RCC_OscConfig+0x824>)
 8002228:	4013      	ands	r3, r2
 800222a:	60cb      	str	r3, [r1, #12]
 800222c:	e001      	b.n	8002232 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3720      	adds	r7, #32
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	feeefffc 	.word	0xfeeefffc

08002244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0e7      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002258:	4b75      	ldr	r3, [pc, #468]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d910      	bls.n	8002288 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b72      	ldr	r3, [pc, #456]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 0207 	bic.w	r2, r3, #7
 800226e:	4970      	ldr	r1, [pc, #448]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b6e      	ldr	r3, [pc, #440]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0cf      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b00      	cmp	r3, #0
 8002292:	d010      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	4b66      	ldr	r3, [pc, #408]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d908      	bls.n	80022b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b63      	ldr	r3, [pc, #396]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4960      	ldr	r1, [pc, #384]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d04c      	beq.n	800235c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ca:	4b5a      	ldr	r3, [pc, #360]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d121      	bne.n	800231a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0a6      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e2:	4b54      	ldr	r3, [pc, #336]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d115      	bne.n	800231a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e09a      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022fa:	4b4e      	ldr	r3, [pc, #312]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e08e      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800230a:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e086      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800231a:	4b46      	ldr	r3, [pc, #280]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4943      	ldr	r1, [pc, #268]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800232c:	f7ff f81e 	bl	800136c <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7ff f81a 	bl	800136c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e06e      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 020c 	and.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d1eb      	bne.n	8002334 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d010      	beq.n	800238a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	4b31      	ldr	r3, [pc, #196]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002374:	429a      	cmp	r2, r3
 8002376:	d208      	bcs.n	800238a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002378:	4b2e      	ldr	r3, [pc, #184]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	492b      	ldr	r1, [pc, #172]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d210      	bcs.n	80023ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 0207 	bic.w	r2, r3, #7
 80023a0:	4923      	ldr	r1, [pc, #140]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a8:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_RCC_ClockConfig+0x1ec>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e036      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4918      	ldr	r1, [pc, #96]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4910      	ldr	r1, [pc, #64]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f8:	f000 f824 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	490b      	ldr	r1, [pc, #44]	; (8002438 <HAL_RCC_ClockConfig+0x1f4>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x1f8>)
 8002416:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCC_ClockConfig+0x1fc>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe ff55 	bl	80012cc <HAL_InitTick>
 8002422:	4603      	mov	r3, r0
 8002424:	72fb      	strb	r3, [r7, #11]

  return status;
 8002426:	7afb      	ldrb	r3, [r7, #11]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40022000 	.word	0x40022000
 8002434:	40021000 	.word	0x40021000
 8002438:	08003994 	.word	0x08003994
 800243c:	20000000 	.word	0x20000000
 8002440:	20000004 	.word	0x20000004

08002444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002452:	4b3e      	ldr	r3, [pc, #248]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800245c:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x34>
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d121      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d11e      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002478:	4b34      	ldr	r3, [pc, #208]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002484:	4b31      	ldr	r3, [pc, #196]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	e005      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002494:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024a0:	4a2b      	ldr	r2, [pc, #172]	; (8002550 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10d      	bne.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d102      	bne.n	80024c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024bc:	4b25      	ldr	r3, [pc, #148]	; (8002554 <HAL_RCC_GetSysClockFreq+0x110>)
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	e004      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024c8:	4b23      	ldr	r3, [pc, #140]	; (8002558 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d134      	bne.n	800253c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024d2:	4b1e      	ldr	r3, [pc, #120]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0xa6>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d003      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0xac>
 80024e8:	e005      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024ea:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ec:	617b      	str	r3, [r7, #20]
      break;
 80024ee:	e005      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_RCC_GetSysClockFreq+0x114>)
 80024f2:	617b      	str	r3, [r7, #20]
      break;
 80024f4:	e002      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	617b      	str	r3, [r7, #20]
      break;
 80024fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024fc:	4b13      	ldr	r3, [pc, #76]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	3301      	adds	r3, #1
 8002508:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	fb03 f202 	mul.w	r2, r3, r2
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_RCC_GetSysClockFreq+0x108>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	0e5b      	lsrs	r3, r3, #25
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	3301      	adds	r3, #1
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800253c:	69bb      	ldr	r3, [r7, #24]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3724      	adds	r7, #36	; 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	080039a4 	.word	0x080039a4
 8002554:	00f42400 	.word	0x00f42400
 8002558:	007a1200 	.word	0x007a1200

0800255c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002564:	2300      	movs	r3, #0
 8002566:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002568:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002574:	f7ff f9ee 	bl	8001954 <HAL_PWREx_GetVoltageRange>
 8002578:	6178      	str	r0, [r7, #20]
 800257a:	e014      	b.n	80025a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002580:	4a24      	ldr	r2, [pc, #144]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002586:	6593      	str	r3, [r2, #88]	; 0x58
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002594:	f7ff f9de 	bl	8001954 <HAL_PWREx_GetVoltageRange>
 8002598:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800259a:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259e:	4a1d      	ldr	r2, [pc, #116]	; (8002614 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ac:	d10b      	bne.n	80025c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b80      	cmp	r3, #128	; 0x80
 80025b2:	d919      	bls.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2ba0      	cmp	r3, #160	; 0xa0
 80025b8:	d902      	bls.n	80025c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025ba:	2302      	movs	r3, #2
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	e013      	b.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025c0:	2301      	movs	r3, #1
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	e010      	b.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b80      	cmp	r3, #128	; 0x80
 80025ca:	d902      	bls.n	80025d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025cc:	2303      	movs	r3, #3
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	e00a      	b.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b80      	cmp	r3, #128	; 0x80
 80025d6:	d102      	bne.n	80025de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025d8:	2302      	movs	r3, #2
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	e004      	b.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b70      	cmp	r3, #112	; 0x70
 80025e2:	d101      	bne.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025e4:	2301      	movs	r3, #1
 80025e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f023 0207 	bic.w	r2, r3, #7
 80025f0:	4909      	ldr	r1, [pc, #36]	; (8002618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025f8:	4b07      	ldr	r3, [pc, #28]	; (8002618 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	429a      	cmp	r2, r3
 8002604:	d001      	beq.n	800260a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	40022000 	.word	0x40022000

0800261c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e049      	b.n	80026c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe fd12 	bl	800106c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3304      	adds	r3, #4
 8002658:	4619      	mov	r1, r3
 800265a:	4610      	mov	r0, r2
 800265c:	f000 fd3c 	bl	80030d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d001      	beq.n	80026e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e033      	b.n	800274c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a19      	ldr	r2, [pc, #100]	; (8002758 <HAL_TIM_Base_Start+0x8c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d009      	beq.n	800270a <HAL_TIM_Base_Start+0x3e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026fe:	d004      	beq.n	800270a <HAL_TIM_Base_Start+0x3e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a15      	ldr	r2, [pc, #84]	; (800275c <HAL_TIM_Base_Start+0x90>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d115      	bne.n	8002736 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	4b13      	ldr	r3, [pc, #76]	; (8002760 <HAL_TIM_Base_Start+0x94>)
 8002712:	4013      	ands	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b06      	cmp	r3, #6
 800271a:	d015      	beq.n	8002748 <HAL_TIM_Base_Start+0x7c>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002722:	d011      	beq.n	8002748 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002734:	e008      	b.n	8002748 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0201 	orr.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e000      	b.n	800274a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002748:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40012c00 	.word	0x40012c00
 800275c:	40014000 	.word	0x40014000
 8002760:	00010007 	.word	0x00010007

08002764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d001      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e03b      	b.n	80027f4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a19      	ldr	r2, [pc, #100]	; (8002800 <HAL_TIM_Base_Start_IT+0x9c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d009      	beq.n	80027b2 <HAL_TIM_Base_Start_IT+0x4e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a6:	d004      	beq.n	80027b2 <HAL_TIM_Base_Start_IT+0x4e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a15      	ldr	r2, [pc, #84]	; (8002804 <HAL_TIM_Base_Start_IT+0xa0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d115      	bne.n	80027de <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <HAL_TIM_Base_Start_IT+0xa4>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b06      	cmp	r3, #6
 80027c2:	d015      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x8c>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ca:	d011      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027dc:	e008      	b.n	80027f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0201 	orr.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e000      	b.n	80027f2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40012c00 	.word	0x40012c00
 8002804:	40014000 	.word	0x40014000
 8002808:	00010007 	.word	0x00010007

0800280c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e049      	b.n	80028b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f841 	bl	80028ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3304      	adds	r3, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f000 fc44 	bl	80030d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d109      	bne.n	80028f4 <HAL_TIM_PWM_Start+0x24>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	bf14      	ite	ne
 80028ec:	2301      	movne	r3, #1
 80028ee:	2300      	moveq	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	e03c      	b.n	800296e <HAL_TIM_PWM_Start+0x9e>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d109      	bne.n	800290e <HAL_TIM_PWM_Start+0x3e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b01      	cmp	r3, #1
 8002904:	bf14      	ite	ne
 8002906:	2301      	movne	r3, #1
 8002908:	2300      	moveq	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	e02f      	b.n	800296e <HAL_TIM_PWM_Start+0x9e>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d109      	bne.n	8002928 <HAL_TIM_PWM_Start+0x58>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	bf14      	ite	ne
 8002920:	2301      	movne	r3, #1
 8002922:	2300      	moveq	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e022      	b.n	800296e <HAL_TIM_PWM_Start+0x9e>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d109      	bne.n	8002942 <HAL_TIM_PWM_Start+0x72>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	bf14      	ite	ne
 800293a:	2301      	movne	r3, #1
 800293c:	2300      	moveq	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	e015      	b.n	800296e <HAL_TIM_PWM_Start+0x9e>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b10      	cmp	r3, #16
 8002946:	d109      	bne.n	800295c <HAL_TIM_PWM_Start+0x8c>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e008      	b.n	800296e <HAL_TIM_PWM_Start+0x9e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	bf14      	ite	ne
 8002968:	2301      	movne	r3, #1
 800296a:	2300      	moveq	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e07e      	b.n	8002a74 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d104      	bne.n	8002986 <HAL_TIM_PWM_Start+0xb6>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002984:	e023      	b.n	80029ce <HAL_TIM_PWM_Start+0xfe>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d104      	bne.n	8002996 <HAL_TIM_PWM_Start+0xc6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002994:	e01b      	b.n	80029ce <HAL_TIM_PWM_Start+0xfe>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d104      	bne.n	80029a6 <HAL_TIM_PWM_Start+0xd6>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a4:	e013      	b.n	80029ce <HAL_TIM_PWM_Start+0xfe>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b0c      	cmp	r3, #12
 80029aa:	d104      	bne.n	80029b6 <HAL_TIM_PWM_Start+0xe6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029b4:	e00b      	b.n	80029ce <HAL_TIM_PWM_Start+0xfe>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	d104      	bne.n	80029c6 <HAL_TIM_PWM_Start+0xf6>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029c4:	e003      	b.n	80029ce <HAL_TIM_PWM_Start+0xfe>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2201      	movs	r2, #1
 80029d4:	6839      	ldr	r1, [r7, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fefa 	bl	80037d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a26      	ldr	r2, [pc, #152]	; (8002a7c <HAL_TIM_PWM_Start+0x1ac>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d009      	beq.n	80029fa <HAL_TIM_PWM_Start+0x12a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a25      	ldr	r2, [pc, #148]	; (8002a80 <HAL_TIM_PWM_Start+0x1b0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d004      	beq.n	80029fa <HAL_TIM_PWM_Start+0x12a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a23      	ldr	r2, [pc, #140]	; (8002a84 <HAL_TIM_PWM_Start+0x1b4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_TIM_PWM_Start+0x12e>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_TIM_PWM_Start+0x130>
 80029fe:	2300      	movs	r3, #0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a18      	ldr	r2, [pc, #96]	; (8002a7c <HAL_TIM_PWM_Start+0x1ac>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d009      	beq.n	8002a32 <HAL_TIM_PWM_Start+0x162>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a26:	d004      	beq.n	8002a32 <HAL_TIM_PWM_Start+0x162>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <HAL_TIM_PWM_Start+0x1b0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d115      	bne.n	8002a5e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <HAL_TIM_PWM_Start+0x1b8>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2b06      	cmp	r3, #6
 8002a42:	d015      	beq.n	8002a70 <HAL_TIM_PWM_Start+0x1a0>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4a:	d011      	beq.n	8002a70 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5c:	e008      	b.n	8002a70 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e000      	b.n	8002a72 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40012c00 	.word	0x40012c00
 8002a80:	40014000 	.word	0x40014000
 8002a84:	40014400 	.word	0x40014400
 8002a88:	00010007 	.word	0x00010007

08002a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d122      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0202 	mvn.w	r2, #2
 8002ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fae3 	bl	800309a <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fad5 	bl	8003086 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fae6 	bl	80030ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0204 	mvn.w	r2, #4
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fab9 	bl	800309a <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 faab 	bl	8003086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fabc 	bl	80030ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d122      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d11b      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0208 	mvn.w	r2, #8
 8002b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2204      	movs	r2, #4
 8002b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fa8f 	bl	800309a <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e005      	b.n	8002b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fa81 	bl	8003086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fa92 	bl	80030ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b10      	cmp	r3, #16
 8002b9c:	d122      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d11b      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0210 	mvn.w	r2, #16
 8002bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2208      	movs	r2, #8
 8002bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fa65 	bl	800309a <HAL_TIM_IC_CaptureCallback>
 8002bd0:	e005      	b.n	8002bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fa57 	bl	8003086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fa68 	bl	80030ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d10e      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d107      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0201 	mvn.w	r2, #1
 8002c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fe f9aa 	bl	8000f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1a:	2b80      	cmp	r3, #128	; 0x80
 8002c1c:	d10e      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c28:	2b80      	cmp	r3, #128	; 0x80
 8002c2a:	d107      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fe60 	bl	80038fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4a:	d10e      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c56:	2b80      	cmp	r3, #128	; 0x80
 8002c58:	d107      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fe53 	bl	8003910 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c74:	2b40      	cmp	r3, #64	; 0x40
 8002c76:	d10e      	bne.n	8002c96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c82:	2b40      	cmp	r3, #64	; 0x40
 8002c84:	d107      	bne.n	8002c96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fa16 	bl	80030c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d10e      	bne.n	8002cc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d107      	bne.n	8002cc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f06f 0220 	mvn.w	r2, #32
 8002cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fe13 	bl	80038e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e0ff      	b.n	8002eea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b14      	cmp	r3, #20
 8002cf6:	f200 80f0 	bhi.w	8002eda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002cfa:	a201      	add	r2, pc, #4	; (adr r2, 8002d00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d55 	.word	0x08002d55
 8002d04:	08002edb 	.word	0x08002edb
 8002d08:	08002edb 	.word	0x08002edb
 8002d0c:	08002edb 	.word	0x08002edb
 8002d10:	08002d95 	.word	0x08002d95
 8002d14:	08002edb 	.word	0x08002edb
 8002d18:	08002edb 	.word	0x08002edb
 8002d1c:	08002edb 	.word	0x08002edb
 8002d20:	08002dd7 	.word	0x08002dd7
 8002d24:	08002edb 	.word	0x08002edb
 8002d28:	08002edb 	.word	0x08002edb
 8002d2c:	08002edb 	.word	0x08002edb
 8002d30:	08002e17 	.word	0x08002e17
 8002d34:	08002edb 	.word	0x08002edb
 8002d38:	08002edb 	.word	0x08002edb
 8002d3c:	08002edb 	.word	0x08002edb
 8002d40:	08002e59 	.word	0x08002e59
 8002d44:	08002edb 	.word	0x08002edb
 8002d48:	08002edb 	.word	0x08002edb
 8002d4c:	08002edb 	.word	0x08002edb
 8002d50:	08002e99 	.word	0x08002e99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fa20 	bl	80031a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0208 	orr.w	r2, r2, #8
 8002d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0204 	bic.w	r2, r2, #4
 8002d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6999      	ldr	r1, [r3, #24]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	619a      	str	r2, [r3, #24]
      break;
 8002d92:	e0a5      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fa7c 	bl	8003298 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6999      	ldr	r1, [r3, #24]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	021a      	lsls	r2, r3, #8
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	619a      	str	r2, [r3, #24]
      break;
 8002dd4:	e084      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fad5 	bl	800338c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0208 	orr.w	r2, r2, #8
 8002df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0204 	bic.w	r2, r2, #4
 8002e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69d9      	ldr	r1, [r3, #28]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	61da      	str	r2, [r3, #28]
      break;
 8002e14:	e064      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fb2d 	bl	800347c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69d9      	ldr	r1, [r3, #28]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	021a      	lsls	r2, r3, #8
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	61da      	str	r2, [r3, #28]
      break;
 8002e56:	e043      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fb6a 	bl	8003538 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0208 	orr.w	r2, r2, #8
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0204 	bic.w	r2, r2, #4
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e96:	e023      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fba2 	bl	80035e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	021a      	lsls	r2, r3, #8
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ed8:	e002      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ede:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop

08002ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_TIM_ConfigClockSource+0x1c>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e0b6      	b.n	800307e <HAL_TIM_ConfigClockSource+0x18a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4c:	d03e      	beq.n	8002fcc <HAL_TIM_ConfigClockSource+0xd8>
 8002f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f52:	f200 8087 	bhi.w	8003064 <HAL_TIM_ConfigClockSource+0x170>
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	f000 8086 	beq.w	800306a <HAL_TIM_ConfigClockSource+0x176>
 8002f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f62:	d87f      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x170>
 8002f64:	2b70      	cmp	r3, #112	; 0x70
 8002f66:	d01a      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0xaa>
 8002f68:	2b70      	cmp	r3, #112	; 0x70
 8002f6a:	d87b      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x170>
 8002f6c:	2b60      	cmp	r3, #96	; 0x60
 8002f6e:	d050      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0x11e>
 8002f70:	2b60      	cmp	r3, #96	; 0x60
 8002f72:	d877      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x170>
 8002f74:	2b50      	cmp	r3, #80	; 0x50
 8002f76:	d03c      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0xfe>
 8002f78:	2b50      	cmp	r3, #80	; 0x50
 8002f7a:	d873      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x170>
 8002f7c:	2b40      	cmp	r3, #64	; 0x40
 8002f7e:	d058      	beq.n	8003032 <HAL_TIM_ConfigClockSource+0x13e>
 8002f80:	2b40      	cmp	r3, #64	; 0x40
 8002f82:	d86f      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x170>
 8002f84:	2b30      	cmp	r3, #48	; 0x30
 8002f86:	d064      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x15e>
 8002f88:	2b30      	cmp	r3, #48	; 0x30
 8002f8a:	d86b      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x170>
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d060      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x15e>
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d867      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x170>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d05c      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x15e>
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d05a      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x15e>
 8002f9c:	e062      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6899      	ldr	r1, [r3, #8]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f000 fbef 	bl	8003790 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	609a      	str	r2, [r3, #8]
      break;
 8002fca:	e04f      	b.n	800306c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	6899      	ldr	r1, [r3, #8]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f000 fbd8 	bl	8003790 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fee:	609a      	str	r2, [r3, #8]
      break;
 8002ff0:	e03c      	b.n	800306c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	6859      	ldr	r1, [r3, #4]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	461a      	mov	r2, r3
 8003000:	f000 fb4c 	bl	800369c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2150      	movs	r1, #80	; 0x50
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fba5 	bl	800375a <TIM_ITRx_SetConfig>
      break;
 8003010:	e02c      	b.n	800306c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6859      	ldr	r1, [r3, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	461a      	mov	r2, r3
 8003020:	f000 fb6b 	bl	80036fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2160      	movs	r1, #96	; 0x60
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fb95 	bl	800375a <TIM_ITRx_SetConfig>
      break;
 8003030:	e01c      	b.n	800306c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6859      	ldr	r1, [r3, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	461a      	mov	r2, r3
 8003040:	f000 fb2c 	bl	800369c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2140      	movs	r1, #64	; 0x40
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fb85 	bl	800375a <TIM_ITRx_SetConfig>
      break;
 8003050:	e00c      	b.n	800306c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4619      	mov	r1, r3
 800305c:	4610      	mov	r0, r2
 800305e:	f000 fb7c 	bl	800375a <TIM_ITRx_SetConfig>
      break;
 8003062:	e003      	b.n	800306c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      break;
 8003068:	e000      	b.n	800306c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800306a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <TIM_Base_SetConfig+0xbc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d003      	beq.n	80030f8 <TIM_Base_SetConfig+0x20>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f6:	d108      	bne.n	800310a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a21      	ldr	r2, [pc, #132]	; (8003194 <TIM_Base_SetConfig+0xbc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00b      	beq.n	800312a <TIM_Base_SetConfig+0x52>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003118:	d007      	beq.n	800312a <TIM_Base_SetConfig+0x52>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <TIM_Base_SetConfig+0xc0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d003      	beq.n	800312a <TIM_Base_SetConfig+0x52>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a1d      	ldr	r2, [pc, #116]	; (800319c <TIM_Base_SetConfig+0xc4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d108      	bne.n	800313c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4313      	orrs	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a0c      	ldr	r2, [pc, #48]	; (8003194 <TIM_Base_SetConfig+0xbc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d007      	beq.n	8003178 <TIM_Base_SetConfig+0xa0>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <TIM_Base_SetConfig+0xc0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d003      	beq.n	8003178 <TIM_Base_SetConfig+0xa0>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a0a      	ldr	r2, [pc, #40]	; (800319c <TIM_Base_SetConfig+0xc4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d103      	bne.n	8003180 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	615a      	str	r2, [r3, #20]
}
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40014000 	.word	0x40014000
 800319c:	40014400 	.word	0x40014400

080031a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f023 0201 	bic.w	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f023 0302 	bic.w	r3, r3, #2
 80031ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a24      	ldr	r2, [pc, #144]	; (800328c <TIM_OC1_SetConfig+0xec>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d007      	beq.n	8003210 <TIM_OC1_SetConfig+0x70>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a23      	ldr	r2, [pc, #140]	; (8003290 <TIM_OC1_SetConfig+0xf0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_OC1_SetConfig+0x70>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a22      	ldr	r2, [pc, #136]	; (8003294 <TIM_OC1_SetConfig+0xf4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d10c      	bne.n	800322a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f023 0308 	bic.w	r3, r3, #8
 8003216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f023 0304 	bic.w	r3, r3, #4
 8003228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a17      	ldr	r2, [pc, #92]	; (800328c <TIM_OC1_SetConfig+0xec>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <TIM_OC1_SetConfig+0xa2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a16      	ldr	r2, [pc, #88]	; (8003290 <TIM_OC1_SetConfig+0xf0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d003      	beq.n	8003242 <TIM_OC1_SetConfig+0xa2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a15      	ldr	r2, [pc, #84]	; (8003294 <TIM_OC1_SetConfig+0xf4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d111      	bne.n	8003266 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	621a      	str	r2, [r3, #32]
}
 8003280:	bf00      	nop
 8003282:	371c      	adds	r7, #28
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	40012c00 	.word	0x40012c00
 8003290:	40014000 	.word	0x40014000
 8003294:	40014400 	.word	0x40014400

08003298 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	f023 0210 	bic.w	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f023 0320 	bic.w	r3, r3, #32
 80032e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a22      	ldr	r2, [pc, #136]	; (8003380 <TIM_OC2_SetConfig+0xe8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d10d      	bne.n	8003318 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003316:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a19      	ldr	r2, [pc, #100]	; (8003380 <TIM_OC2_SetConfig+0xe8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d007      	beq.n	8003330 <TIM_OC2_SetConfig+0x98>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a18      	ldr	r2, [pc, #96]	; (8003384 <TIM_OC2_SetConfig+0xec>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d003      	beq.n	8003330 <TIM_OC2_SetConfig+0x98>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a17      	ldr	r2, [pc, #92]	; (8003388 <TIM_OC2_SetConfig+0xf0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d113      	bne.n	8003358 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800333e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	621a      	str	r2, [r3, #32]
}
 8003372:	bf00      	nop
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40012c00 	.word	0x40012c00
 8003384:	40014000 	.word	0x40014000
 8003388:	40014400 	.word	0x40014400

0800338c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0303 	bic.w	r3, r3, #3
 80033c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a21      	ldr	r2, [pc, #132]	; (8003470 <TIM_OC3_SetConfig+0xe4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d10d      	bne.n	800340a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a18      	ldr	r2, [pc, #96]	; (8003470 <TIM_OC3_SetConfig+0xe4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <TIM_OC3_SetConfig+0x96>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a17      	ldr	r2, [pc, #92]	; (8003474 <TIM_OC3_SetConfig+0xe8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d003      	beq.n	8003422 <TIM_OC3_SetConfig+0x96>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a16      	ldr	r2, [pc, #88]	; (8003478 <TIM_OC3_SetConfig+0xec>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d113      	bne.n	800344a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	621a      	str	r2, [r3, #32]
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40012c00 	.word	0x40012c00
 8003474:	40014000 	.word	0x40014000
 8003478:	40014400 	.word	0x40014400

0800347c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	021b      	lsls	r3, r3, #8
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	031b      	lsls	r3, r3, #12
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a14      	ldr	r2, [pc, #80]	; (800352c <TIM_OC4_SetConfig+0xb0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d007      	beq.n	80034f0 <TIM_OC4_SetConfig+0x74>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a13      	ldr	r2, [pc, #76]	; (8003530 <TIM_OC4_SetConfig+0xb4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d003      	beq.n	80034f0 <TIM_OC4_SetConfig+0x74>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a12      	ldr	r2, [pc, #72]	; (8003534 <TIM_OC4_SetConfig+0xb8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d109      	bne.n	8003504 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	019b      	lsls	r3, r3, #6
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	621a      	str	r2, [r3, #32]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40014000 	.word	0x40014000
 8003534:	40014400 	.word	0x40014400

08003538 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800355e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800357c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	041b      	lsls	r3, r3, #16
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a13      	ldr	r2, [pc, #76]	; (80035dc <TIM_OC5_SetConfig+0xa4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <TIM_OC5_SetConfig+0x6a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <TIM_OC5_SetConfig+0xa8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d003      	beq.n	80035a2 <TIM_OC5_SetConfig+0x6a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a11      	ldr	r2, [pc, #68]	; (80035e4 <TIM_OC5_SetConfig+0xac>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d109      	bne.n	80035b6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	621a      	str	r2, [r3, #32]
}
 80035d0:	bf00      	nop
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	40014000 	.word	0x40014000
 80035e4:	40014400 	.word	0x40014400

080035e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800362e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	051b      	lsls	r3, r3, #20
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a14      	ldr	r2, [pc, #80]	; (8003690 <TIM_OC6_SetConfig+0xa8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d007      	beq.n	8003654 <TIM_OC6_SetConfig+0x6c>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a13      	ldr	r2, [pc, #76]	; (8003694 <TIM_OC6_SetConfig+0xac>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d003      	beq.n	8003654 <TIM_OC6_SetConfig+0x6c>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a12      	ldr	r2, [pc, #72]	; (8003698 <TIM_OC6_SetConfig+0xb0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d109      	bne.n	8003668 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800365a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	029b      	lsls	r3, r3, #10
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	621a      	str	r2, [r3, #32]
}
 8003682:	bf00      	nop
 8003684:	371c      	adds	r7, #28
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40014000 	.word	0x40014000
 8003698:	40014400 	.word	0x40014400

0800369c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	f023 0201 	bic.w	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f023 030a 	bic.w	r3, r3, #10
 80036d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	621a      	str	r2, [r3, #32]
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b087      	sub	sp, #28
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f023 0210 	bic.w	r2, r3, #16
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003724:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	031b      	lsls	r3, r3, #12
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003736:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	621a      	str	r2, [r3, #32]
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800375a:	b480      	push	{r7}
 800375c:	b085      	sub	sp, #20
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003770:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	f043 0307 	orr.w	r3, r3, #7
 800377c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	609a      	str	r2, [r3, #8]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	021a      	lsls	r2, r3, #8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	609a      	str	r2, [r3, #8]
}
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	2201      	movs	r2, #1
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	43db      	mvns	r3, r3
 80037f2:	401a      	ands	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a1a      	ldr	r2, [r3, #32]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	fa01 f303 	lsl.w	r3, r1, r3
 8003808:	431a      	orrs	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	621a      	str	r2, [r3, #32]
}
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
	...

0800381c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003830:	2302      	movs	r3, #2
 8003832:	e04f      	b.n	80038d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a21      	ldr	r2, [pc, #132]	; (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d108      	bne.n	8003870 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003864:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a14      	ldr	r2, [pc, #80]	; (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d009      	beq.n	80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389c:	d004      	beq.n	80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a10      	ldr	r2, [pc, #64]	; (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d10c      	bne.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	40012c00 	.word	0x40012c00
 80038e4:	40014000 	.word	0x40014000

080038e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <__libc_init_array>:
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	4d0d      	ldr	r5, [pc, #52]	; (800395c <__libc_init_array+0x38>)
 8003928:	4c0d      	ldr	r4, [pc, #52]	; (8003960 <__libc_init_array+0x3c>)
 800392a:	1b64      	subs	r4, r4, r5
 800392c:	10a4      	asrs	r4, r4, #2
 800392e:	2600      	movs	r6, #0
 8003930:	42a6      	cmp	r6, r4
 8003932:	d109      	bne.n	8003948 <__libc_init_array+0x24>
 8003934:	4d0b      	ldr	r5, [pc, #44]	; (8003964 <__libc_init_array+0x40>)
 8003936:	4c0c      	ldr	r4, [pc, #48]	; (8003968 <__libc_init_array+0x44>)
 8003938:	f000 f820 	bl	800397c <_init>
 800393c:	1b64      	subs	r4, r4, r5
 800393e:	10a4      	asrs	r4, r4, #2
 8003940:	2600      	movs	r6, #0
 8003942:	42a6      	cmp	r6, r4
 8003944:	d105      	bne.n	8003952 <__libc_init_array+0x2e>
 8003946:	bd70      	pop	{r4, r5, r6, pc}
 8003948:	f855 3b04 	ldr.w	r3, [r5], #4
 800394c:	4798      	blx	r3
 800394e:	3601      	adds	r6, #1
 8003950:	e7ee      	b.n	8003930 <__libc_init_array+0xc>
 8003952:	f855 3b04 	ldr.w	r3, [r5], #4
 8003956:	4798      	blx	r3
 8003958:	3601      	adds	r6, #1
 800395a:	e7f2      	b.n	8003942 <__libc_init_array+0x1e>
 800395c:	080039d4 	.word	0x080039d4
 8003960:	080039d4 	.word	0x080039d4
 8003964:	080039d4 	.word	0x080039d4
 8003968:	080039d8 	.word	0x080039d8

0800396c <memset>:
 800396c:	4402      	add	r2, r0
 800396e:	4603      	mov	r3, r0
 8003970:	4293      	cmp	r3, r2
 8003972:	d100      	bne.n	8003976 <memset+0xa>
 8003974:	4770      	bx	lr
 8003976:	f803 1b01 	strb.w	r1, [r3], #1
 800397a:	e7f9      	b.n	8003970 <memset+0x4>

0800397c <_init>:
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	bf00      	nop
 8003980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003982:	bc08      	pop	{r3}
 8003984:	469e      	mov	lr, r3
 8003986:	4770      	bx	lr

08003988 <_fini>:
 8003988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398a:	bf00      	nop
 800398c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398e:	bc08      	pop	{r3}
 8003990:	469e      	mov	lr, r3
 8003992:	4770      	bx	lr
